
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Paciente
 * 
 */
export type Paciente = $Result.DefaultSelection<Prisma.$PacientePayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Consultorio
 * 
 */
export type Consultorio = $Result.DefaultSelection<Prisma.$ConsultorioPayload>
/**
 * Model PrecioConsultorio
 * 
 */
export type PrecioConsultorio = $Result.DefaultSelection<Prisma.$PrecioConsultorioPayload>
/**
 * Model Cobro
 * 
 */
export type Cobro = $Result.DefaultSelection<Prisma.$CobroPayload>
/**
 * Model CobroConcepto
 * 
 */
export type CobroConcepto = $Result.DefaultSelection<Prisma.$CobroConceptoPayload>
/**
 * Model HistorialCobro
 * 
 */
export type HistorialCobro = $Result.DefaultSelection<Prisma.$HistorialCobroPayload>
/**
 * Model Servicio
 * 
 */
export type Servicio = $Result.DefaultSelection<Prisma.$ServicioPayload>
/**
 * Model MetodoPagoCobro
 * 
 */
export type MetodoPagoCobro = $Result.DefaultSelection<Prisma.$MetodoPagoCobroPayload>
/**
 * Model Cita
 * 
 */
export type Cita = $Result.DefaultSelection<Prisma.$CitaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MetodoPago: {
  EFECTIVO: 'EFECTIVO',
  TARJETA_DEBITO: 'TARJETA_DEBITO',
  TARJETA_CREDITO: 'TARJETA_CREDITO',
  TRANSFERENCIA: 'TRANSFERENCIA',
  OTRO: 'OTRO'
};

export type MetodoPago = (typeof MetodoPago)[keyof typeof MetodoPago]


export const EstadoCobro: {
  PENDIENTE: 'PENDIENTE',
  COMPLETADO: 'COMPLETADO',
  CANCELADO: 'CANCELADO'
};

export type EstadoCobro = (typeof EstadoCobro)[keyof typeof EstadoCobro]


export const Rol: {
  DOCTOR: 'DOCTOR',
  SECRETARIA: 'SECRETARIA',
  ADMINISTRADOR: 'ADMINISTRADOR'
};

export type Rol = (typeof Rol)[keyof typeof Rol]


export const TipoCambio: {
  CREACION: 'CREACION',
  EDICION: 'EDICION',
  ELIMINACION: 'ELIMINACION'
};

export type TipoCambio = (typeof TipoCambio)[keyof typeof TipoCambio]


export const EstadoCita: {
  PROGRAMADA: 'PROGRAMADA',
  EN_CURSO: 'EN_CURSO',
  COMPLETADA: 'COMPLETADA',
  CANCELADA: 'CANCELADA',
  NO_ASISTIO: 'NO_ASISTIO'
};

export type EstadoCita = (typeof EstadoCita)[keyof typeof EstadoCita]

}

export type MetodoPago = $Enums.MetodoPago

export const MetodoPago: typeof $Enums.MetodoPago

export type EstadoCobro = $Enums.EstadoCobro

export const EstadoCobro: typeof $Enums.EstadoCobro

export type Rol = $Enums.Rol

export const Rol: typeof $Enums.Rol

export type TipoCambio = $Enums.TipoCambio

export const TipoCambio: typeof $Enums.TipoCambio

export type EstadoCita = $Enums.EstadoCita

export const EstadoCita: typeof $Enums.EstadoCita

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pacientes
 * const pacientes = await prisma.paciente.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pacientes
   * const pacientes = await prisma.paciente.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.paciente`: Exposes CRUD operations for the **Paciente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pacientes
    * const pacientes = await prisma.paciente.findMany()
    * ```
    */
  get paciente(): Prisma.PacienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consultorio`: Exposes CRUD operations for the **Consultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultorios
    * const consultorios = await prisma.consultorio.findMany()
    * ```
    */
  get consultorio(): Prisma.ConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.precioConsultorio`: Exposes CRUD operations for the **PrecioConsultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrecioConsultorios
    * const precioConsultorios = await prisma.precioConsultorio.findMany()
    * ```
    */
  get precioConsultorio(): Prisma.PrecioConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cobro`: Exposes CRUD operations for the **Cobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cobros
    * const cobros = await prisma.cobro.findMany()
    * ```
    */
  get cobro(): Prisma.CobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cobroConcepto`: Exposes CRUD operations for the **CobroConcepto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CobroConceptos
    * const cobroConceptos = await prisma.cobroConcepto.findMany()
    * ```
    */
  get cobroConcepto(): Prisma.CobroConceptoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historialCobro`: Exposes CRUD operations for the **HistorialCobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistorialCobros
    * const historialCobros = await prisma.historialCobro.findMany()
    * ```
    */
  get historialCobro(): Prisma.HistorialCobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servicio`: Exposes CRUD operations for the **Servicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicio.findMany()
    * ```
    */
  get servicio(): Prisma.ServicioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metodoPagoCobro`: Exposes CRUD operations for the **MetodoPagoCobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetodoPagoCobros
    * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany()
    * ```
    */
  get metodoPagoCobro(): Prisma.MetodoPagoCobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cita`: Exposes CRUD operations for the **Cita** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Citas
    * const citas = await prisma.cita.findMany()
    * ```
    */
  get cita(): Prisma.CitaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Paciente: 'Paciente',
    Usuario: 'Usuario',
    Consultorio: 'Consultorio',
    PrecioConsultorio: 'PrecioConsultorio',
    Cobro: 'Cobro',
    CobroConcepto: 'CobroConcepto',
    HistorialCobro: 'HistorialCobro',
    Servicio: 'Servicio',
    MetodoPagoCobro: 'MetodoPagoCobro',
    Cita: 'Cita'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "paciente" | "usuario" | "consultorio" | "precioConsultorio" | "cobro" | "cobroConcepto" | "historialCobro" | "servicio" | "metodoPagoCobro" | "cita"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Paciente: {
        payload: Prisma.$PacientePayload<ExtArgs>
        fields: Prisma.PacienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PacienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PacienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findFirst: {
            args: Prisma.PacienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PacienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findMany: {
            args: Prisma.PacienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          create: {
            args: Prisma.PacienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          createMany: {
            args: Prisma.PacienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PacienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          delete: {
            args: Prisma.PacienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          update: {
            args: Prisma.PacienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          deleteMany: {
            args: Prisma.PacienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PacienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PacienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          upsert: {
            args: Prisma.PacienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          aggregate: {
            args: Prisma.PacienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaciente>
          }
          groupBy: {
            args: Prisma.PacienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PacienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PacienteCountArgs<ExtArgs>
            result: $Utils.Optional<PacienteCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Consultorio: {
        payload: Prisma.$ConsultorioPayload<ExtArgs>
        fields: Prisma.ConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findFirst: {
            args: Prisma.ConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findMany: {
            args: Prisma.ConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          create: {
            args: Prisma.ConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          createMany: {
            args: Prisma.ConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          delete: {
            args: Prisma.ConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          update: {
            args: Prisma.ConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.ConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.ConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          aggregate: {
            args: Prisma.ConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultorio>
          }
          groupBy: {
            args: Prisma.ConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioCountAggregateOutputType> | number
          }
        }
      }
      PrecioConsultorio: {
        payload: Prisma.$PrecioConsultorioPayload<ExtArgs>
        fields: Prisma.PrecioConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrecioConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          findFirst: {
            args: Prisma.PrecioConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrecioConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          findMany: {
            args: Prisma.PrecioConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          create: {
            args: Prisma.PrecioConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          createMany: {
            args: Prisma.PrecioConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrecioConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          delete: {
            args: Prisma.PrecioConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          update: {
            args: Prisma.PrecioConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.PrecioConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrecioConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.PrecioConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          aggregate: {
            args: Prisma.PrecioConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrecioConsultorio>
          }
          groupBy: {
            args: Prisma.PrecioConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrecioConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrecioConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<PrecioConsultorioCountAggregateOutputType> | number
          }
        }
      }
      Cobro: {
        payload: Prisma.$CobroPayload<ExtArgs>
        fields: Prisma.CobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          findFirst: {
            args: Prisma.CobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          findMany: {
            args: Prisma.CobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          create: {
            args: Prisma.CobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          createMany: {
            args: Prisma.CobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          delete: {
            args: Prisma.CobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          update: {
            args: Prisma.CobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          deleteMany: {
            args: Prisma.CobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          upsert: {
            args: Prisma.CobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          aggregate: {
            args: Prisma.CobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCobro>
          }
          groupBy: {
            args: Prisma.CobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<CobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.CobroCountArgs<ExtArgs>
            result: $Utils.Optional<CobroCountAggregateOutputType> | number
          }
        }
      }
      CobroConcepto: {
        payload: Prisma.$CobroConceptoPayload<ExtArgs>
        fields: Prisma.CobroConceptoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CobroConceptoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CobroConceptoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          findFirst: {
            args: Prisma.CobroConceptoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CobroConceptoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          findMany: {
            args: Prisma.CobroConceptoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          create: {
            args: Prisma.CobroConceptoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          createMany: {
            args: Prisma.CobroConceptoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CobroConceptoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          delete: {
            args: Prisma.CobroConceptoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          update: {
            args: Prisma.CobroConceptoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          deleteMany: {
            args: Prisma.CobroConceptoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CobroConceptoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CobroConceptoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          upsert: {
            args: Prisma.CobroConceptoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          aggregate: {
            args: Prisma.CobroConceptoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCobroConcepto>
          }
          groupBy: {
            args: Prisma.CobroConceptoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CobroConceptoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CobroConceptoCountArgs<ExtArgs>
            result: $Utils.Optional<CobroConceptoCountAggregateOutputType> | number
          }
        }
      }
      HistorialCobro: {
        payload: Prisma.$HistorialCobroPayload<ExtArgs>
        fields: Prisma.HistorialCobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistorialCobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistorialCobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          findFirst: {
            args: Prisma.HistorialCobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistorialCobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          findMany: {
            args: Prisma.HistorialCobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          create: {
            args: Prisma.HistorialCobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          createMany: {
            args: Prisma.HistorialCobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistorialCobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          delete: {
            args: Prisma.HistorialCobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          update: {
            args: Prisma.HistorialCobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          deleteMany: {
            args: Prisma.HistorialCobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistorialCobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistorialCobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          upsert: {
            args: Prisma.HistorialCobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          aggregate: {
            args: Prisma.HistorialCobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorialCobro>
          }
          groupBy: {
            args: Prisma.HistorialCobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistorialCobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistorialCobroCountArgs<ExtArgs>
            result: $Utils.Optional<HistorialCobroCountAggregateOutputType> | number
          }
        }
      }
      Servicio: {
        payload: Prisma.$ServicioPayload<ExtArgs>
        fields: Prisma.ServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findFirst: {
            args: Prisma.ServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findMany: {
            args: Prisma.ServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          create: {
            args: Prisma.ServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          createMany: {
            args: Prisma.ServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          delete: {
            args: Prisma.ServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          update: {
            args: Prisma.ServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          deleteMany: {
            args: Prisma.ServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServicioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          upsert: {
            args: Prisma.ServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          aggregate: {
            args: Prisma.ServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicio>
          }
          groupBy: {
            args: Prisma.ServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ServicioCountAggregateOutputType> | number
          }
        }
      }
      MetodoPagoCobro: {
        payload: Prisma.$MetodoPagoCobroPayload<ExtArgs>
        fields: Prisma.MetodoPagoCobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetodoPagoCobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          findFirst: {
            args: Prisma.MetodoPagoCobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          findMany: {
            args: Prisma.MetodoPagoCobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          create: {
            args: Prisma.MetodoPagoCobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          createMany: {
            args: Prisma.MetodoPagoCobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          delete: {
            args: Prisma.MetodoPagoCobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          update: {
            args: Prisma.MetodoPagoCobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          deleteMany: {
            args: Prisma.MetodoPagoCobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetodoPagoCobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          upsert: {
            args: Prisma.MetodoPagoCobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          aggregate: {
            args: Prisma.MetodoPagoCobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetodoPagoCobro>
          }
          groupBy: {
            args: Prisma.MetodoPagoCobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetodoPagoCobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetodoPagoCobroCountArgs<ExtArgs>
            result: $Utils.Optional<MetodoPagoCobroCountAggregateOutputType> | number
          }
        }
      }
      Cita: {
        payload: Prisma.$CitaPayload<ExtArgs>
        fields: Prisma.CitaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CitaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CitaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          findFirst: {
            args: Prisma.CitaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CitaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          findMany: {
            args: Prisma.CitaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>[]
          }
          create: {
            args: Prisma.CitaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          createMany: {
            args: Prisma.CitaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CitaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>[]
          }
          delete: {
            args: Prisma.CitaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          update: {
            args: Prisma.CitaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          deleteMany: {
            args: Prisma.CitaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CitaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CitaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>[]
          }
          upsert: {
            args: Prisma.CitaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          aggregate: {
            args: Prisma.CitaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCita>
          }
          groupBy: {
            args: Prisma.CitaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CitaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CitaCountArgs<ExtArgs>
            result: $Utils.Optional<CitaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    paciente?: PacienteOmit
    usuario?: UsuarioOmit
    consultorio?: ConsultorioOmit
    precioConsultorio?: PrecioConsultorioOmit
    cobro?: CobroOmit
    cobroConcepto?: CobroConceptoOmit
    historialCobro?: HistorialCobroOmit
    servicio?: ServicioOmit
    metodoPagoCobro?: MetodoPagoCobroOmit
    cita?: CitaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PacienteCountOutputType
   */

  export type PacienteCountOutputType = {
    cobros: number
    citas: number
  }

  export type PacienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobros?: boolean | PacienteCountOutputTypeCountCobrosArgs
    citas?: boolean | PacienteCountOutputTypeCountCitasArgs
  }

  // Custom InputTypes
  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PacienteCountOutputType
     */
    select?: PacienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountCobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    cobros: number
    historial: number
    citas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobros?: boolean | UsuarioCountOutputTypeCountCobrosArgs
    historial?: boolean | UsuarioCountOutputTypeCountHistorialArgs
    citas?: boolean | UsuarioCountOutputTypeCountCitasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountHistorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
  }


  /**
   * Count Type ConsultorioCountOutputType
   */

  export type ConsultorioCountOutputType = {
    conceptos: number
    precios: number
    citas: number
  }

  export type ConsultorioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | ConsultorioCountOutputTypeCountConceptosArgs
    precios?: boolean | ConsultorioCountOutputTypeCountPreciosArgs
    citas?: boolean | ConsultorioCountOutputTypeCountCitasArgs
  }

  // Custom InputTypes
  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultorioCountOutputType
     */
    select?: ConsultorioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountPreciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrecioConsultorioWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
  }


  /**
   * Count Type CobroCountOutputType
   */

  export type CobroCountOutputType = {
    conceptos: number
    historial: number
    metodos_pago: number
  }

  export type CobroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | CobroCountOutputTypeCountConceptosArgs
    historial?: boolean | CobroCountOutputTypeCountHistorialArgs
    metodos_pago?: boolean | CobroCountOutputTypeCountMetodos_pagoArgs
  }

  // Custom InputTypes
  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroCountOutputType
     */
    select?: CobroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountHistorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountMetodos_pagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetodoPagoCobroWhereInput
  }


  /**
   * Count Type ServicioCountOutputType
   */

  export type ServicioCountOutputType = {
    conceptos: number
  }

  export type ServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | ServicioCountOutputTypeCountConceptosArgs
  }

  // Custom InputTypes
  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioCountOutputType
     */
    select?: ServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Paciente
   */

  export type AggregatePaciente = {
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  export type PacienteMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    fecha_nacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    documento_identidad: string | null
    created_at: Date | null
    updated_at: Date | null
    apellido: string | null
  }

  export type PacienteMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    fecha_nacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    documento_identidad: string | null
    created_at: Date | null
    updated_at: Date | null
    apellido: string | null
  }

  export type PacienteCountAggregateOutputType = {
    id: number
    nombre: number
    fecha_nacimiento: number
    genero: number
    direccion: number
    telefono: number
    email: number
    documento_identidad: number
    created_at: number
    updated_at: number
    apellido: number
    _all: number
  }


  export type PacienteMinAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
  }

  export type PacienteMaxAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
  }

  export type PacienteCountAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
    _all?: true
  }

  export type PacienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paciente to aggregate.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pacientes
    **/
    _count?: true | PacienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PacienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PacienteMaxAggregateInputType
  }

  export type GetPacienteAggregateType<T extends PacienteAggregateArgs> = {
        [P in keyof T & keyof AggregatePaciente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaciente[P]>
      : GetScalarType<T[P], AggregatePaciente[P]>
  }




  export type PacienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithAggregationInput | PacienteOrderByWithAggregationInput[]
    by: PacienteScalarFieldEnum[] | PacienteScalarFieldEnum
    having?: PacienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PacienteCountAggregateInputType | true
    _min?: PacienteMinAggregateInputType
    _max?: PacienteMaxAggregateInputType
  }

  export type PacienteGroupByOutputType = {
    id: string
    nombre: string
    fecha_nacimiento: Date
    genero: string
    direccion: string | null
    telefono: string
    email: string
    documento_identidad: string | null
    created_at: Date
    updated_at: Date
    apellido: string
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  type GetPacienteGroupByPayload<T extends PacienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PacienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PacienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PacienteGroupByOutputType[P]>
            : GetScalarType<T[P], PacienteGroupByOutputType[P]>
        }
      >
    >


  export type PacienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
    cobros?: boolean | Paciente$cobrosArgs<ExtArgs>
    citas?: boolean | Paciente$citasArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectScalar = {
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }

  export type PacienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "fecha_nacimiento" | "genero" | "direccion" | "telefono" | "email" | "documento_identidad" | "created_at" | "updated_at" | "apellido", ExtArgs["result"]["paciente"]>
  export type PacienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobros?: boolean | Paciente$cobrosArgs<ExtArgs>
    citas?: boolean | Paciente$citasArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PacienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PacienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PacientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paciente"
    objects: {
      cobros: Prisma.$CobroPayload<ExtArgs>[]
      citas: Prisma.$CitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      fecha_nacimiento: Date
      genero: string
      direccion: string | null
      telefono: string
      email: string
      documento_identidad: string | null
      created_at: Date
      updated_at: Date
      apellido: string
    }, ExtArgs["result"]["paciente"]>
    composites: {}
  }

  type PacienteGetPayload<S extends boolean | null | undefined | PacienteDefaultArgs> = $Result.GetResult<Prisma.$PacientePayload, S>

  type PacienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PacienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PacienteCountAggregateInputType | true
    }

  export interface PacienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paciente'], meta: { name: 'Paciente' } }
    /**
     * Find zero or one Paciente that matches the filter.
     * @param {PacienteFindUniqueArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PacienteFindUniqueArgs>(args: SelectSubset<T, PacienteFindUniqueArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paciente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PacienteFindUniqueOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PacienteFindUniqueOrThrowArgs>(args: SelectSubset<T, PacienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PacienteFindFirstArgs>(args?: SelectSubset<T, PacienteFindFirstArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PacienteFindFirstOrThrowArgs>(args?: SelectSubset<T, PacienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pacientes
     * const pacientes = await prisma.paciente.findMany()
     * 
     * // Get first 10 Pacientes
     * const pacientes = await prisma.paciente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pacienteWithIdOnly = await prisma.paciente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PacienteFindManyArgs>(args?: SelectSubset<T, PacienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paciente.
     * @param {PacienteCreateArgs} args - Arguments to create a Paciente.
     * @example
     * // Create one Paciente
     * const Paciente = await prisma.paciente.create({
     *   data: {
     *     // ... data to create a Paciente
     *   }
     * })
     * 
     */
    create<T extends PacienteCreateArgs>(args: SelectSubset<T, PacienteCreateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pacientes.
     * @param {PacienteCreateManyArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PacienteCreateManyArgs>(args?: SelectSubset<T, PacienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pacientes and returns the data saved in the database.
     * @param {PacienteCreateManyAndReturnArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PacienteCreateManyAndReturnArgs>(args?: SelectSubset<T, PacienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Paciente.
     * @param {PacienteDeleteArgs} args - Arguments to delete one Paciente.
     * @example
     * // Delete one Paciente
     * const Paciente = await prisma.paciente.delete({
     *   where: {
     *     // ... filter to delete one Paciente
     *   }
     * })
     * 
     */
    delete<T extends PacienteDeleteArgs>(args: SelectSubset<T, PacienteDeleteArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paciente.
     * @param {PacienteUpdateArgs} args - Arguments to update one Paciente.
     * @example
     * // Update one Paciente
     * const paciente = await prisma.paciente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PacienteUpdateArgs>(args: SelectSubset<T, PacienteUpdateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pacientes.
     * @param {PacienteDeleteManyArgs} args - Arguments to filter Pacientes to delete.
     * @example
     * // Delete a few Pacientes
     * const { count } = await prisma.paciente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PacienteDeleteManyArgs>(args?: SelectSubset<T, PacienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PacienteUpdateManyArgs>(args: SelectSubset<T, PacienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes and returns the data updated in the database.
     * @param {PacienteUpdateManyAndReturnArgs} args - Arguments to update many Pacientes.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PacienteUpdateManyAndReturnArgs>(args: SelectSubset<T, PacienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Paciente.
     * @param {PacienteUpsertArgs} args - Arguments to update or create a Paciente.
     * @example
     * // Update or create a Paciente
     * const paciente = await prisma.paciente.upsert({
     *   create: {
     *     // ... data to create a Paciente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paciente we want to update
     *   }
     * })
     */
    upsert<T extends PacienteUpsertArgs>(args: SelectSubset<T, PacienteUpsertArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteCountArgs} args - Arguments to filter Pacientes to count.
     * @example
     * // Count the number of Pacientes
     * const count = await prisma.paciente.count({
     *   where: {
     *     // ... the filter for the Pacientes we want to count
     *   }
     * })
    **/
    count<T extends PacienteCountArgs>(
      args?: Subset<T, PacienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PacienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PacienteAggregateArgs>(args: Subset<T, PacienteAggregateArgs>): Prisma.PrismaPromise<GetPacienteAggregateType<T>>

    /**
     * Group by Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PacienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PacienteGroupByArgs['orderBy'] }
        : { orderBy?: PacienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PacienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPacienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paciente model
   */
  readonly fields: PacienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paciente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PacienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobros<T extends Paciente$cobrosArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$cobrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    citas<T extends Paciente$citasArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paciente model
   */
  interface PacienteFieldRefs {
    readonly id: FieldRef<"Paciente", 'String'>
    readonly nombre: FieldRef<"Paciente", 'String'>
    readonly fecha_nacimiento: FieldRef<"Paciente", 'DateTime'>
    readonly genero: FieldRef<"Paciente", 'String'>
    readonly direccion: FieldRef<"Paciente", 'String'>
    readonly telefono: FieldRef<"Paciente", 'String'>
    readonly email: FieldRef<"Paciente", 'String'>
    readonly documento_identidad: FieldRef<"Paciente", 'String'>
    readonly created_at: FieldRef<"Paciente", 'DateTime'>
    readonly updated_at: FieldRef<"Paciente", 'DateTime'>
    readonly apellido: FieldRef<"Paciente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Paciente findUnique
   */
  export type PacienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findUniqueOrThrow
   */
  export type PacienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findFirst
   */
  export type PacienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findFirstOrThrow
   */
  export type PacienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findMany
   */
  export type PacienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Pacientes to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente create
   */
  export type PacienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Paciente.
     */
    data: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
  }

  /**
   * Paciente createMany
   */
  export type PacienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paciente createManyAndReturn
   */
  export type PacienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paciente update
   */
  export type PacienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Paciente.
     */
    data: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
    /**
     * Choose, which Paciente to update.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente updateMany
   */
  export type PacienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente updateManyAndReturn
   */
  export type PacienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente upsert
   */
  export type PacienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Paciente to update in case it exists.
     */
    where: PacienteWhereUniqueInput
    /**
     * In case the Paciente found by the `where` argument doesn't exist, create a new Paciente with this data.
     */
    create: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
    /**
     * In case the Paciente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
  }

  /**
   * Paciente delete
   */
  export type PacienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter which Paciente to delete.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente deleteMany
   */
  export type PacienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pacientes to delete
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to delete.
     */
    limit?: number
  }

  /**
   * Paciente.cobros
   */
  export type Paciente$cobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    cursor?: CobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Paciente.citas
   */
  export type Paciente$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    cursor?: CitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Paciente without action
   */
  export type PacienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    email: string | null
    telefono: string | null
    created_at: Date | null
    updated_at: Date | null
    rol: $Enums.Rol | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    email: string | null
    telefono: string | null
    created_at: Date | null
    updated_at: Date | null
    rol: $Enums.Rol | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    email: number
    telefono: number
    created_at: number
    updated_at: number
    rol: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    nombre: string
    email: string
    telefono: string
    created_at: Date
    updated_at: Date
    rol: $Enums.Rol
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
    cobros?: boolean | Usuario$cobrosArgs<ExtArgs>
    historial?: boolean | Usuario$historialArgs<ExtArgs>
    citas?: boolean | Usuario$citasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "email" | "telefono" | "created_at" | "updated_at" | "rol", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobros?: boolean | Usuario$cobrosArgs<ExtArgs>
    historial?: boolean | Usuario$historialArgs<ExtArgs>
    citas?: boolean | Usuario$citasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      cobros: Prisma.$CobroPayload<ExtArgs>[]
      historial: Prisma.$HistorialCobroPayload<ExtArgs>[]
      citas: Prisma.$CitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      email: string
      telefono: string
      created_at: Date
      updated_at: Date
      rol: $Enums.Rol
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobros<T extends Usuario$cobrosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$cobrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historial<T extends Usuario$historialArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$historialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    citas<T extends Usuario$citasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly telefono: FieldRef<"Usuario", 'String'>
    readonly created_at: FieldRef<"Usuario", 'DateTime'>
    readonly updated_at: FieldRef<"Usuario", 'DateTime'>
    readonly rol: FieldRef<"Usuario", 'Rol'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.cobros
   */
  export type Usuario$cobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    cursor?: CobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Usuario.historial
   */
  export type Usuario$historialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    cursor?: HistorialCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * Usuario.citas
   */
  export type Usuario$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    cursor?: CitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Consultorio
   */

  export type AggregateConsultorio = {
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  export type ConsultorioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultorioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultorioCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ConsultorioMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultorioMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultorioCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorio to aggregate.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultorios
    **/
    _count?: true | ConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultorioMaxAggregateInputType
  }

  export type GetConsultorioAggregateType<T extends ConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultorio[P]>
      : GetScalarType<T[P], AggregateConsultorio[P]>
  }




  export type ConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithAggregationInput | ConsultorioOrderByWithAggregationInput[]
    by: ConsultorioScalarFieldEnum[] | ConsultorioScalarFieldEnum
    having?: ConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultorioCountAggregateInputType | true
    _min?: ConsultorioMinAggregateInputType
    _max?: ConsultorioMaxAggregateInputType
  }

  export type ConsultorioGroupByOutputType = {
    id: string
    nombre: string
    direccion: string
    created_at: Date
    updated_at: Date
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  type GetConsultorioGroupByPayload<T extends ConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type ConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
    conceptos?: boolean | Consultorio$conceptosArgs<ExtArgs>
    precios?: boolean | Consultorio$preciosArgs<ExtArgs>
    citas?: boolean | Consultorio$citasArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "direccion" | "created_at" | "updated_at", ExtArgs["result"]["consultorio"]>
  export type ConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | Consultorio$conceptosArgs<ExtArgs>
    precios?: boolean | Consultorio$preciosArgs<ExtArgs>
    citas?: boolean | Consultorio$citasArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultorio"
    objects: {
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
      precios: Prisma.$PrecioConsultorioPayload<ExtArgs>[]
      citas: Prisma.$CitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      direccion: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["consultorio"]>
    composites: {}
  }

  type ConsultorioGetPayload<S extends boolean | null | undefined | ConsultorioDefaultArgs> = $Result.GetResult<Prisma.$ConsultorioPayload, S>

  type ConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsultorioCountAggregateInputType | true
    }

  export interface ConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultorio'], meta: { name: 'Consultorio' } }
    /**
     * Find zero or one Consultorio that matches the filter.
     * @param {ConsultorioFindUniqueArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultorioFindUniqueArgs>(args: SelectSubset<T, ConsultorioFindUniqueArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsultorioFindUniqueOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultorioFindFirstArgs>(args?: SelectSubset<T, ConsultorioFindFirstArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultorios
     * const consultorios = await prisma.consultorio.findMany()
     * 
     * // Get first 10 Consultorios
     * const consultorios = await prisma.consultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultorioFindManyArgs>(args?: SelectSubset<T, ConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consultorio.
     * @param {ConsultorioCreateArgs} args - Arguments to create a Consultorio.
     * @example
     * // Create one Consultorio
     * const Consultorio = await prisma.consultorio.create({
     *   data: {
     *     // ... data to create a Consultorio
     *   }
     * })
     * 
     */
    create<T extends ConsultorioCreateArgs>(args: SelectSubset<T, ConsultorioCreateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consultorios.
     * @param {ConsultorioCreateManyArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultorioCreateManyArgs>(args?: SelectSubset<T, ConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consultorios and returns the data saved in the database.
     * @param {ConsultorioCreateManyAndReturnArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consultorio.
     * @param {ConsultorioDeleteArgs} args - Arguments to delete one Consultorio.
     * @example
     * // Delete one Consultorio
     * const Consultorio = await prisma.consultorio.delete({
     *   where: {
     *     // ... filter to delete one Consultorio
     *   }
     * })
     * 
     */
    delete<T extends ConsultorioDeleteArgs>(args: SelectSubset<T, ConsultorioDeleteArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consultorio.
     * @param {ConsultorioUpdateArgs} args - Arguments to update one Consultorio.
     * @example
     * // Update one Consultorio
     * const consultorio = await prisma.consultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultorioUpdateArgs>(args: SelectSubset<T, ConsultorioUpdateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consultorios.
     * @param {ConsultorioDeleteManyArgs} args - Arguments to filter Consultorios to delete.
     * @example
     * // Delete a few Consultorios
     * const { count } = await prisma.consultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultorioDeleteManyArgs>(args?: SelectSubset<T, ConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultorioUpdateManyArgs>(args: SelectSubset<T, ConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios and returns the data updated in the database.
     * @param {ConsultorioUpdateManyAndReturnArgs} args - Arguments to update many Consultorios.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consultorio.
     * @param {ConsultorioUpsertArgs} args - Arguments to update or create a Consultorio.
     * @example
     * // Update or create a Consultorio
     * const consultorio = await prisma.consultorio.upsert({
     *   create: {
     *     // ... data to create a Consultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultorio we want to update
     *   }
     * })
     */
    upsert<T extends ConsultorioUpsertArgs>(args: SelectSubset<T, ConsultorioUpsertArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioCountArgs} args - Arguments to filter Consultorios to count.
     * @example
     * // Count the number of Consultorios
     * const count = await prisma.consultorio.count({
     *   where: {
     *     // ... the filter for the Consultorios we want to count
     *   }
     * })
    **/
    count<T extends ConsultorioCountArgs>(
      args?: Subset<T, ConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultorioAggregateArgs>(args: Subset<T, ConsultorioAggregateArgs>): Prisma.PrismaPromise<GetConsultorioAggregateType<T>>

    /**
     * Group by Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: ConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultorio model
   */
  readonly fields: ConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conceptos<T extends Consultorio$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    precios<T extends Consultorio$preciosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$preciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    citas<T extends Consultorio$citasArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultorio model
   */
  interface ConsultorioFieldRefs {
    readonly id: FieldRef<"Consultorio", 'String'>
    readonly nombre: FieldRef<"Consultorio", 'String'>
    readonly direccion: FieldRef<"Consultorio", 'String'>
    readonly created_at: FieldRef<"Consultorio", 'DateTime'>
    readonly updated_at: FieldRef<"Consultorio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consultorio findUnique
   */
  export type ConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findUniqueOrThrow
   */
  export type ConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findFirst
   */
  export type ConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findFirstOrThrow
   */
  export type ConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findMany
   */
  export type ConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorios to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio create
   */
  export type ConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultorio.
     */
    data: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
  }

  /**
   * Consultorio createMany
   */
  export type ConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultorio createManyAndReturn
   */
  export type ConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultorio update
   */
  export type ConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultorio.
     */
    data: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
    /**
     * Choose, which Consultorio to update.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio updateMany
   */
  export type ConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio updateManyAndReturn
   */
  export type ConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio upsert
   */
  export type ConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultorio to update in case it exists.
     */
    where: ConsultorioWhereUniqueInput
    /**
     * In case the Consultorio found by the `where` argument doesn't exist, create a new Consultorio with this data.
     */
    create: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
    /**
     * In case the Consultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
  }

  /**
   * Consultorio delete
   */
  export type ConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter which Consultorio to delete.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio deleteMany
   */
  export type ConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorios to delete
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to delete.
     */
    limit?: number
  }

  /**
   * Consultorio.conceptos
   */
  export type Consultorio$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Consultorio.precios
   */
  export type Consultorio$preciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    where?: PrecioConsultorioWhereInput
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    cursor?: PrecioConsultorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio.citas
   */
  export type Consultorio$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    cursor?: CitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Consultorio without action
   */
  export type ConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model PrecioConsultorio
   */

  export type AggregatePrecioConsultorio = {
    _count: PrecioConsultorioCountAggregateOutputType | null
    _avg: PrecioConsultorioAvgAggregateOutputType | null
    _sum: PrecioConsultorioSumAggregateOutputType | null
    _min: PrecioConsultorioMinAggregateOutputType | null
    _max: PrecioConsultorioMaxAggregateOutputType | null
  }

  export type PrecioConsultorioAvgAggregateOutputType = {
    precio: number | null
  }

  export type PrecioConsultorioSumAggregateOutputType = {
    precio: number | null
  }

  export type PrecioConsultorioMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    concepto: string | null
    consultorio_id: string | null
    precio: number | null
  }

  export type PrecioConsultorioMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    concepto: string | null
    consultorio_id: string | null
    precio: number | null
  }

  export type PrecioConsultorioCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    concepto: number
    consultorio_id: number
    precio: number
    _all: number
  }


  export type PrecioConsultorioAvgAggregateInputType = {
    precio?: true
  }

  export type PrecioConsultorioSumAggregateInputType = {
    precio?: true
  }

  export type PrecioConsultorioMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
  }

  export type PrecioConsultorioMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
  }

  export type PrecioConsultorioCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
    _all?: true
  }

  export type PrecioConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrecioConsultorio to aggregate.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrecioConsultorios
    **/
    _count?: true | PrecioConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrecioConsultorioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrecioConsultorioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrecioConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrecioConsultorioMaxAggregateInputType
  }

  export type GetPrecioConsultorioAggregateType<T extends PrecioConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregatePrecioConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrecioConsultorio[P]>
      : GetScalarType<T[P], AggregatePrecioConsultorio[P]>
  }




  export type PrecioConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrecioConsultorioWhereInput
    orderBy?: PrecioConsultorioOrderByWithAggregationInput | PrecioConsultorioOrderByWithAggregationInput[]
    by: PrecioConsultorioScalarFieldEnum[] | PrecioConsultorioScalarFieldEnum
    having?: PrecioConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrecioConsultorioCountAggregateInputType | true
    _avg?: PrecioConsultorioAvgAggregateInputType
    _sum?: PrecioConsultorioSumAggregateInputType
    _min?: PrecioConsultorioMinAggregateInputType
    _max?: PrecioConsultorioMaxAggregateInputType
  }

  export type PrecioConsultorioGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    concepto: string
    consultorio_id: string
    precio: number
    _count: PrecioConsultorioCountAggregateOutputType | null
    _avg: PrecioConsultorioAvgAggregateOutputType | null
    _sum: PrecioConsultorioSumAggregateOutputType | null
    _min: PrecioConsultorioMinAggregateOutputType | null
    _max: PrecioConsultorioMaxAggregateOutputType | null
  }

  type GetPrecioConsultorioGroupByPayload<T extends PrecioConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrecioConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrecioConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrecioConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], PrecioConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type PrecioConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
  }

  export type PrecioConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "concepto" | "consultorio_id" | "precio", ExtArgs["result"]["precioConsultorio"]>
  export type PrecioConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type PrecioConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type PrecioConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }

  export type $PrecioConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrecioConsultorio"
    objects: {
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      concepto: string
      consultorio_id: string
      precio: number
    }, ExtArgs["result"]["precioConsultorio"]>
    composites: {}
  }

  type PrecioConsultorioGetPayload<S extends boolean | null | undefined | PrecioConsultorioDefaultArgs> = $Result.GetResult<Prisma.$PrecioConsultorioPayload, S>

  type PrecioConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrecioConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrecioConsultorioCountAggregateInputType | true
    }

  export interface PrecioConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrecioConsultorio'], meta: { name: 'PrecioConsultorio' } }
    /**
     * Find zero or one PrecioConsultorio that matches the filter.
     * @param {PrecioConsultorioFindUniqueArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrecioConsultorioFindUniqueArgs>(args: SelectSubset<T, PrecioConsultorioFindUniqueArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrecioConsultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrecioConsultorioFindUniqueOrThrowArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrecioConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrecioConsultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindFirstArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrecioConsultorioFindFirstArgs>(args?: SelectSubset<T, PrecioConsultorioFindFirstArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrecioConsultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindFirstOrThrowArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrecioConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, PrecioConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrecioConsultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrecioConsultorios
     * const precioConsultorios = await prisma.precioConsultorio.findMany()
     * 
     * // Get first 10 PrecioConsultorios
     * const precioConsultorios = await prisma.precioConsultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrecioConsultorioFindManyArgs>(args?: SelectSubset<T, PrecioConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrecioConsultorio.
     * @param {PrecioConsultorioCreateArgs} args - Arguments to create a PrecioConsultorio.
     * @example
     * // Create one PrecioConsultorio
     * const PrecioConsultorio = await prisma.precioConsultorio.create({
     *   data: {
     *     // ... data to create a PrecioConsultorio
     *   }
     * })
     * 
     */
    create<T extends PrecioConsultorioCreateArgs>(args: SelectSubset<T, PrecioConsultorioCreateArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrecioConsultorios.
     * @param {PrecioConsultorioCreateManyArgs} args - Arguments to create many PrecioConsultorios.
     * @example
     * // Create many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrecioConsultorioCreateManyArgs>(args?: SelectSubset<T, PrecioConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrecioConsultorios and returns the data saved in the database.
     * @param {PrecioConsultorioCreateManyAndReturnArgs} args - Arguments to create many PrecioConsultorios.
     * @example
     * // Create many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrecioConsultorios and only return the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrecioConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, PrecioConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrecioConsultorio.
     * @param {PrecioConsultorioDeleteArgs} args - Arguments to delete one PrecioConsultorio.
     * @example
     * // Delete one PrecioConsultorio
     * const PrecioConsultorio = await prisma.precioConsultorio.delete({
     *   where: {
     *     // ... filter to delete one PrecioConsultorio
     *   }
     * })
     * 
     */
    delete<T extends PrecioConsultorioDeleteArgs>(args: SelectSubset<T, PrecioConsultorioDeleteArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrecioConsultorio.
     * @param {PrecioConsultorioUpdateArgs} args - Arguments to update one PrecioConsultorio.
     * @example
     * // Update one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrecioConsultorioUpdateArgs>(args: SelectSubset<T, PrecioConsultorioUpdateArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrecioConsultorios.
     * @param {PrecioConsultorioDeleteManyArgs} args - Arguments to filter PrecioConsultorios to delete.
     * @example
     * // Delete a few PrecioConsultorios
     * const { count } = await prisma.precioConsultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrecioConsultorioDeleteManyArgs>(args?: SelectSubset<T, PrecioConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrecioConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrecioConsultorioUpdateManyArgs>(args: SelectSubset<T, PrecioConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrecioConsultorios and returns the data updated in the database.
     * @param {PrecioConsultorioUpdateManyAndReturnArgs} args - Arguments to update many PrecioConsultorios.
     * @example
     * // Update many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrecioConsultorios and only return the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrecioConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrecioConsultorio.
     * @param {PrecioConsultorioUpsertArgs} args - Arguments to update or create a PrecioConsultorio.
     * @example
     * // Update or create a PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.upsert({
     *   create: {
     *     // ... data to create a PrecioConsultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrecioConsultorio we want to update
     *   }
     * })
     */
    upsert<T extends PrecioConsultorioUpsertArgs>(args: SelectSubset<T, PrecioConsultorioUpsertArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrecioConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioCountArgs} args - Arguments to filter PrecioConsultorios to count.
     * @example
     * // Count the number of PrecioConsultorios
     * const count = await prisma.precioConsultorio.count({
     *   where: {
     *     // ... the filter for the PrecioConsultorios we want to count
     *   }
     * })
    **/
    count<T extends PrecioConsultorioCountArgs>(
      args?: Subset<T, PrecioConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrecioConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrecioConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrecioConsultorioAggregateArgs>(args: Subset<T, PrecioConsultorioAggregateArgs>): Prisma.PrismaPromise<GetPrecioConsultorioAggregateType<T>>

    /**
     * Group by PrecioConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrecioConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrecioConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: PrecioConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrecioConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrecioConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrecioConsultorio model
   */
  readonly fields: PrecioConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrecioConsultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrecioConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrecioConsultorio model
   */
  interface PrecioConsultorioFieldRefs {
    readonly id: FieldRef<"PrecioConsultorio", 'String'>
    readonly created_at: FieldRef<"PrecioConsultorio", 'DateTime'>
    readonly updated_at: FieldRef<"PrecioConsultorio", 'DateTime'>
    readonly concepto: FieldRef<"PrecioConsultorio", 'String'>
    readonly consultorio_id: FieldRef<"PrecioConsultorio", 'String'>
    readonly precio: FieldRef<"PrecioConsultorio", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PrecioConsultorio findUnique
   */
  export type PrecioConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio findUniqueOrThrow
   */
  export type PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio findFirst
   */
  export type PrecioConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrecioConsultorios.
     */
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio findFirstOrThrow
   */
  export type PrecioConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrecioConsultorios.
     */
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio findMany
   */
  export type PrecioConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorios to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio create
   */
  export type PrecioConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a PrecioConsultorio.
     */
    data: XOR<PrecioConsultorioCreateInput, PrecioConsultorioUncheckedCreateInput>
  }

  /**
   * PrecioConsultorio createMany
   */
  export type PrecioConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrecioConsultorios.
     */
    data: PrecioConsultorioCreateManyInput | PrecioConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrecioConsultorio createManyAndReturn
   */
  export type PrecioConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many PrecioConsultorios.
     */
    data: PrecioConsultorioCreateManyInput | PrecioConsultorioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrecioConsultorio update
   */
  export type PrecioConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a PrecioConsultorio.
     */
    data: XOR<PrecioConsultorioUpdateInput, PrecioConsultorioUncheckedUpdateInput>
    /**
     * Choose, which PrecioConsultorio to update.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio updateMany
   */
  export type PrecioConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrecioConsultorios.
     */
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which PrecioConsultorios to update
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to update.
     */
    limit?: number
  }

  /**
   * PrecioConsultorio updateManyAndReturn
   */
  export type PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update PrecioConsultorios.
     */
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which PrecioConsultorios to update
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrecioConsultorio upsert
   */
  export type PrecioConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the PrecioConsultorio to update in case it exists.
     */
    where: PrecioConsultorioWhereUniqueInput
    /**
     * In case the PrecioConsultorio found by the `where` argument doesn't exist, create a new PrecioConsultorio with this data.
     */
    create: XOR<PrecioConsultorioCreateInput, PrecioConsultorioUncheckedCreateInput>
    /**
     * In case the PrecioConsultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrecioConsultorioUpdateInput, PrecioConsultorioUncheckedUpdateInput>
  }

  /**
   * PrecioConsultorio delete
   */
  export type PrecioConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter which PrecioConsultorio to delete.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio deleteMany
   */
  export type PrecioConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrecioConsultorios to delete
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to delete.
     */
    limit?: number
  }

  /**
   * PrecioConsultorio without action
   */
  export type PrecioConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model Cobro
   */

  export type AggregateCobro = {
    _count: CobroCountAggregateOutputType | null
    _avg: CobroAvgAggregateOutputType | null
    _sum: CobroSumAggregateOutputType | null
    _min: CobroMinAggregateOutputType | null
    _max: CobroMaxAggregateOutputType | null
  }

  export type CobroAvgAggregateOutputType = {
    monto_total: number | null
  }

  export type CobroSumAggregateOutputType = {
    monto_total: number | null
  }

  export type CobroMinAggregateOutputType = {
    id: string | null
    fecha_cobro: Date | null
    monto_total: number | null
    notas: string | null
    created_at: Date | null
    updated_at: Date | null
    paciente_id: string | null
    usuario_id: string | null
    estado: $Enums.EstadoCobro | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type CobroMaxAggregateOutputType = {
    id: string | null
    fecha_cobro: Date | null
    monto_total: number | null
    notas: string | null
    created_at: Date | null
    updated_at: Date | null
    paciente_id: string | null
    usuario_id: string | null
    estado: $Enums.EstadoCobro | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type CobroCountAggregateOutputType = {
    id: number
    fecha_cobro: number
    monto_total: number
    notas: number
    created_at: number
    updated_at: number
    paciente_id: number
    usuario_id: number
    estado: number
    metodo_pago: number
    _all: number
  }


  export type CobroAvgAggregateInputType = {
    monto_total?: true
  }

  export type CobroSumAggregateInputType = {
    monto_total?: true
  }

  export type CobroMinAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
  }

  export type CobroMaxAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
  }

  export type CobroCountAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
    _all?: true
  }

  export type CobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cobro to aggregate.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cobros
    **/
    _count?: true | CobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CobroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CobroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CobroMaxAggregateInputType
  }

  export type GetCobroAggregateType<T extends CobroAggregateArgs> = {
        [P in keyof T & keyof AggregateCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCobro[P]>
      : GetScalarType<T[P], AggregateCobro[P]>
  }




  export type CobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithAggregationInput | CobroOrderByWithAggregationInput[]
    by: CobroScalarFieldEnum[] | CobroScalarFieldEnum
    having?: CobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CobroCountAggregateInputType | true
    _avg?: CobroAvgAggregateInputType
    _sum?: CobroSumAggregateInputType
    _min?: CobroMinAggregateInputType
    _max?: CobroMaxAggregateInputType
  }

  export type CobroGroupByOutputType = {
    id: string
    fecha_cobro: Date
    monto_total: number
    notas: string | null
    created_at: Date
    updated_at: Date
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago: $Enums.MetodoPago | null
    _count: CobroCountAggregateOutputType | null
    _avg: CobroAvgAggregateOutputType | null
    _sum: CobroSumAggregateOutputType | null
    _min: CobroMinAggregateOutputType | null
    _max: CobroMaxAggregateOutputType | null
  }

  type GetCobroGroupByPayload<T extends CobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CobroGroupByOutputType[P]>
            : GetScalarType<T[P], CobroGroupByOutputType[P]>
        }
      >
    >


  export type CobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    conceptos?: boolean | Cobro$conceptosArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    historial?: boolean | Cobro$historialArgs<ExtArgs>
    metodos_pago?: boolean | Cobro$metodos_pagoArgs<ExtArgs>
    _count?: boolean | CobroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectScalar = {
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
  }

  export type CobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fecha_cobro" | "monto_total" | "notas" | "created_at" | "updated_at" | "paciente_id" | "usuario_id" | "estado" | "metodo_pago", ExtArgs["result"]["cobro"]>
  export type CobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | Cobro$conceptosArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    historial?: boolean | Cobro$historialArgs<ExtArgs>
    metodos_pago?: boolean | Cobro$metodos_pagoArgs<ExtArgs>
    _count?: boolean | CobroCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type CobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cobro"
    objects: {
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
      paciente: Prisma.$PacientePayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      historial: Prisma.$HistorialCobroPayload<ExtArgs>[]
      metodos_pago: Prisma.$MetodoPagoCobroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fecha_cobro: Date
      monto_total: number
      notas: string | null
      created_at: Date
      updated_at: Date
      paciente_id: string
      usuario_id: string
      estado: $Enums.EstadoCobro
      metodo_pago: $Enums.MetodoPago | null
    }, ExtArgs["result"]["cobro"]>
    composites: {}
  }

  type CobroGetPayload<S extends boolean | null | undefined | CobroDefaultArgs> = $Result.GetResult<Prisma.$CobroPayload, S>

  type CobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CobroCountAggregateInputType | true
    }

  export interface CobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cobro'], meta: { name: 'Cobro' } }
    /**
     * Find zero or one Cobro that matches the filter.
     * @param {CobroFindUniqueArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CobroFindUniqueArgs>(args: SelectSubset<T, CobroFindUniqueArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CobroFindUniqueOrThrowArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CobroFindUniqueOrThrowArgs>(args: SelectSubset<T, CobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindFirstArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CobroFindFirstArgs>(args?: SelectSubset<T, CobroFindFirstArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindFirstOrThrowArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CobroFindFirstOrThrowArgs>(args?: SelectSubset<T, CobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cobros
     * const cobros = await prisma.cobro.findMany()
     * 
     * // Get first 10 Cobros
     * const cobros = await prisma.cobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cobroWithIdOnly = await prisma.cobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CobroFindManyArgs>(args?: SelectSubset<T, CobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cobro.
     * @param {CobroCreateArgs} args - Arguments to create a Cobro.
     * @example
     * // Create one Cobro
     * const Cobro = await prisma.cobro.create({
     *   data: {
     *     // ... data to create a Cobro
     *   }
     * })
     * 
     */
    create<T extends CobroCreateArgs>(args: SelectSubset<T, CobroCreateArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cobros.
     * @param {CobroCreateManyArgs} args - Arguments to create many Cobros.
     * @example
     * // Create many Cobros
     * const cobro = await prisma.cobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CobroCreateManyArgs>(args?: SelectSubset<T, CobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cobros and returns the data saved in the database.
     * @param {CobroCreateManyAndReturnArgs} args - Arguments to create many Cobros.
     * @example
     * // Create many Cobros
     * const cobro = await prisma.cobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cobros and only return the `id`
     * const cobroWithIdOnly = await prisma.cobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CobroCreateManyAndReturnArgs>(args?: SelectSubset<T, CobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cobro.
     * @param {CobroDeleteArgs} args - Arguments to delete one Cobro.
     * @example
     * // Delete one Cobro
     * const Cobro = await prisma.cobro.delete({
     *   where: {
     *     // ... filter to delete one Cobro
     *   }
     * })
     * 
     */
    delete<T extends CobroDeleteArgs>(args: SelectSubset<T, CobroDeleteArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cobro.
     * @param {CobroUpdateArgs} args - Arguments to update one Cobro.
     * @example
     * // Update one Cobro
     * const cobro = await prisma.cobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CobroUpdateArgs>(args: SelectSubset<T, CobroUpdateArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cobros.
     * @param {CobroDeleteManyArgs} args - Arguments to filter Cobros to delete.
     * @example
     * // Delete a few Cobros
     * const { count } = await prisma.cobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CobroDeleteManyArgs>(args?: SelectSubset<T, CobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cobros
     * const cobro = await prisma.cobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CobroUpdateManyArgs>(args: SelectSubset<T, CobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cobros and returns the data updated in the database.
     * @param {CobroUpdateManyAndReturnArgs} args - Arguments to update many Cobros.
     * @example
     * // Update many Cobros
     * const cobro = await prisma.cobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cobros and only return the `id`
     * const cobroWithIdOnly = await prisma.cobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CobroUpdateManyAndReturnArgs>(args: SelectSubset<T, CobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cobro.
     * @param {CobroUpsertArgs} args - Arguments to update or create a Cobro.
     * @example
     * // Update or create a Cobro
     * const cobro = await prisma.cobro.upsert({
     *   create: {
     *     // ... data to create a Cobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cobro we want to update
     *   }
     * })
     */
    upsert<T extends CobroUpsertArgs>(args: SelectSubset<T, CobroUpsertArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroCountArgs} args - Arguments to filter Cobros to count.
     * @example
     * // Count the number of Cobros
     * const count = await prisma.cobro.count({
     *   where: {
     *     // ... the filter for the Cobros we want to count
     *   }
     * })
    **/
    count<T extends CobroCountArgs>(
      args?: Subset<T, CobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CobroAggregateArgs>(args: Subset<T, CobroAggregateArgs>): Prisma.PrismaPromise<GetCobroAggregateType<T>>

    /**
     * Group by Cobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CobroGroupByArgs['orderBy'] }
        : { orderBy?: CobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cobro model
   */
  readonly fields: CobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conceptos<T extends Cobro$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    historial<T extends Cobro$historialArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$historialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metodos_pago<T extends Cobro$metodos_pagoArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$metodos_pagoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cobro model
   */
  interface CobroFieldRefs {
    readonly id: FieldRef<"Cobro", 'String'>
    readonly fecha_cobro: FieldRef<"Cobro", 'DateTime'>
    readonly monto_total: FieldRef<"Cobro", 'Float'>
    readonly notas: FieldRef<"Cobro", 'String'>
    readonly created_at: FieldRef<"Cobro", 'DateTime'>
    readonly updated_at: FieldRef<"Cobro", 'DateTime'>
    readonly paciente_id: FieldRef<"Cobro", 'String'>
    readonly usuario_id: FieldRef<"Cobro", 'String'>
    readonly estado: FieldRef<"Cobro", 'EstadoCobro'>
    readonly metodo_pago: FieldRef<"Cobro", 'MetodoPago'>
  }
    

  // Custom InputTypes
  /**
   * Cobro findUnique
   */
  export type CobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro findUniqueOrThrow
   */
  export type CobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro findFirst
   */
  export type CobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cobros.
     */
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro findFirstOrThrow
   */
  export type CobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cobros.
     */
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro findMany
   */
  export type CobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobros to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro create
   */
  export type CobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The data needed to create a Cobro.
     */
    data: XOR<CobroCreateInput, CobroUncheckedCreateInput>
  }

  /**
   * Cobro createMany
   */
  export type CobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cobros.
     */
    data: CobroCreateManyInput | CobroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cobro createManyAndReturn
   */
  export type CobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * The data used to create many Cobros.
     */
    data: CobroCreateManyInput | CobroCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cobro update
   */
  export type CobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The data needed to update a Cobro.
     */
    data: XOR<CobroUpdateInput, CobroUncheckedUpdateInput>
    /**
     * Choose, which Cobro to update.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro updateMany
   */
  export type CobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cobros.
     */
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyInput>
    /**
     * Filter which Cobros to update
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to update.
     */
    limit?: number
  }

  /**
   * Cobro updateManyAndReturn
   */
  export type CobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * The data used to update Cobros.
     */
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyInput>
    /**
     * Filter which Cobros to update
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cobro upsert
   */
  export type CobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The filter to search for the Cobro to update in case it exists.
     */
    where: CobroWhereUniqueInput
    /**
     * In case the Cobro found by the `where` argument doesn't exist, create a new Cobro with this data.
     */
    create: XOR<CobroCreateInput, CobroUncheckedCreateInput>
    /**
     * In case the Cobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CobroUpdateInput, CobroUncheckedUpdateInput>
  }

  /**
   * Cobro delete
   */
  export type CobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter which Cobro to delete.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro deleteMany
   */
  export type CobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cobros to delete
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to delete.
     */
    limit?: number
  }

  /**
   * Cobro.conceptos
   */
  export type Cobro$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Cobro.historial
   */
  export type Cobro$historialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    cursor?: HistorialCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * Cobro.metodos_pago
   */
  export type Cobro$metodos_pagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    where?: MetodoPagoCobroWhereInput
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    cursor?: MetodoPagoCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * Cobro without action
   */
  export type CobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
  }


  /**
   * Model CobroConcepto
   */

  export type AggregateCobroConcepto = {
    _count: CobroConceptoCountAggregateOutputType | null
    _avg: CobroConceptoAvgAggregateOutputType | null
    _sum: CobroConceptoSumAggregateOutputType | null
    _min: CobroConceptoMinAggregateOutputType | null
    _max: CobroConceptoMaxAggregateOutputType | null
  }

  export type CobroConceptoAvgAggregateOutputType = {
    cantidad: number | null
    subtotal: number | null
    precio_unitario: number | null
  }

  export type CobroConceptoSumAggregateOutputType = {
    cantidad: number | null
    subtotal: number | null
    precio_unitario: number | null
  }

  export type CobroConceptoMinAggregateOutputType = {
    id: string | null
    cantidad: number | null
    subtotal: number | null
    created_at: Date | null
    updated_at: Date | null
    cobro_id: string | null
    consultorio_id: string | null
    precio_unitario: number | null
    servicio_id: string | null
  }

  export type CobroConceptoMaxAggregateOutputType = {
    id: string | null
    cantidad: number | null
    subtotal: number | null
    created_at: Date | null
    updated_at: Date | null
    cobro_id: string | null
    consultorio_id: string | null
    precio_unitario: number | null
    servicio_id: string | null
  }

  export type CobroConceptoCountAggregateOutputType = {
    id: number
    cantidad: number
    subtotal: number
    created_at: number
    updated_at: number
    cobro_id: number
    consultorio_id: number
    precio_unitario: number
    servicio_id: number
    _all: number
  }


  export type CobroConceptoAvgAggregateInputType = {
    cantidad?: true
    subtotal?: true
    precio_unitario?: true
  }

  export type CobroConceptoSumAggregateInputType = {
    cantidad?: true
    subtotal?: true
    precio_unitario?: true
  }

  export type CobroConceptoMinAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
  }

  export type CobroConceptoMaxAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
  }

  export type CobroConceptoCountAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
    _all?: true
  }

  export type CobroConceptoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CobroConcepto to aggregate.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CobroConceptos
    **/
    _count?: true | CobroConceptoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CobroConceptoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CobroConceptoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CobroConceptoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CobroConceptoMaxAggregateInputType
  }

  export type GetCobroConceptoAggregateType<T extends CobroConceptoAggregateArgs> = {
        [P in keyof T & keyof AggregateCobroConcepto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCobroConcepto[P]>
      : GetScalarType<T[P], AggregateCobroConcepto[P]>
  }




  export type CobroConceptoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithAggregationInput | CobroConceptoOrderByWithAggregationInput[]
    by: CobroConceptoScalarFieldEnum[] | CobroConceptoScalarFieldEnum
    having?: CobroConceptoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CobroConceptoCountAggregateInputType | true
    _avg?: CobroConceptoAvgAggregateInputType
    _sum?: CobroConceptoSumAggregateInputType
    _min?: CobroConceptoMinAggregateInputType
    _max?: CobroConceptoMaxAggregateInputType
  }

  export type CobroConceptoGroupByOutputType = {
    id: string
    cantidad: number
    subtotal: number
    created_at: Date
    updated_at: Date
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
    _count: CobroConceptoCountAggregateOutputType | null
    _avg: CobroConceptoAvgAggregateOutputType | null
    _sum: CobroConceptoSumAggregateOutputType | null
    _min: CobroConceptoMinAggregateOutputType | null
    _max: CobroConceptoMaxAggregateOutputType | null
  }

  type GetCobroConceptoGroupByPayload<T extends CobroConceptoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CobroConceptoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CobroConceptoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CobroConceptoGroupByOutputType[P]>
            : GetScalarType<T[P], CobroConceptoGroupByOutputType[P]>
        }
      >
    >


  export type CobroConceptoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectScalar = {
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
  }

  export type CobroConceptoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cantidad" | "subtotal" | "created_at" | "updated_at" | "cobro_id" | "consultorio_id" | "precio_unitario" | "servicio_id", ExtArgs["result"]["cobroConcepto"]>
  export type CobroConceptoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type CobroConceptoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type CobroConceptoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }

  export type $CobroConceptoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CobroConcepto"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
      servicio: Prisma.$ServicioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cantidad: number
      subtotal: number
      created_at: Date
      updated_at: Date
      cobro_id: string
      consultorio_id: string
      precio_unitario: number
      servicio_id: string
    }, ExtArgs["result"]["cobroConcepto"]>
    composites: {}
  }

  type CobroConceptoGetPayload<S extends boolean | null | undefined | CobroConceptoDefaultArgs> = $Result.GetResult<Prisma.$CobroConceptoPayload, S>

  type CobroConceptoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CobroConceptoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CobroConceptoCountAggregateInputType | true
    }

  export interface CobroConceptoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CobroConcepto'], meta: { name: 'CobroConcepto' } }
    /**
     * Find zero or one CobroConcepto that matches the filter.
     * @param {CobroConceptoFindUniqueArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CobroConceptoFindUniqueArgs>(args: SelectSubset<T, CobroConceptoFindUniqueArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CobroConcepto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CobroConceptoFindUniqueOrThrowArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CobroConceptoFindUniqueOrThrowArgs>(args: SelectSubset<T, CobroConceptoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CobroConcepto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindFirstArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CobroConceptoFindFirstArgs>(args?: SelectSubset<T, CobroConceptoFindFirstArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CobroConcepto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindFirstOrThrowArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CobroConceptoFindFirstOrThrowArgs>(args?: SelectSubset<T, CobroConceptoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CobroConceptos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CobroConceptos
     * const cobroConceptos = await prisma.cobroConcepto.findMany()
     * 
     * // Get first 10 CobroConceptos
     * const cobroConceptos = await prisma.cobroConcepto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CobroConceptoFindManyArgs>(args?: SelectSubset<T, CobroConceptoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CobroConcepto.
     * @param {CobroConceptoCreateArgs} args - Arguments to create a CobroConcepto.
     * @example
     * // Create one CobroConcepto
     * const CobroConcepto = await prisma.cobroConcepto.create({
     *   data: {
     *     // ... data to create a CobroConcepto
     *   }
     * })
     * 
     */
    create<T extends CobroConceptoCreateArgs>(args: SelectSubset<T, CobroConceptoCreateArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CobroConceptos.
     * @param {CobroConceptoCreateManyArgs} args - Arguments to create many CobroConceptos.
     * @example
     * // Create many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CobroConceptoCreateManyArgs>(args?: SelectSubset<T, CobroConceptoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CobroConceptos and returns the data saved in the database.
     * @param {CobroConceptoCreateManyAndReturnArgs} args - Arguments to create many CobroConceptos.
     * @example
     * // Create many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CobroConceptos and only return the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CobroConceptoCreateManyAndReturnArgs>(args?: SelectSubset<T, CobroConceptoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CobroConcepto.
     * @param {CobroConceptoDeleteArgs} args - Arguments to delete one CobroConcepto.
     * @example
     * // Delete one CobroConcepto
     * const CobroConcepto = await prisma.cobroConcepto.delete({
     *   where: {
     *     // ... filter to delete one CobroConcepto
     *   }
     * })
     * 
     */
    delete<T extends CobroConceptoDeleteArgs>(args: SelectSubset<T, CobroConceptoDeleteArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CobroConcepto.
     * @param {CobroConceptoUpdateArgs} args - Arguments to update one CobroConcepto.
     * @example
     * // Update one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CobroConceptoUpdateArgs>(args: SelectSubset<T, CobroConceptoUpdateArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CobroConceptos.
     * @param {CobroConceptoDeleteManyArgs} args - Arguments to filter CobroConceptos to delete.
     * @example
     * // Delete a few CobroConceptos
     * const { count } = await prisma.cobroConcepto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CobroConceptoDeleteManyArgs>(args?: SelectSubset<T, CobroConceptoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CobroConceptos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CobroConceptoUpdateManyArgs>(args: SelectSubset<T, CobroConceptoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CobroConceptos and returns the data updated in the database.
     * @param {CobroConceptoUpdateManyAndReturnArgs} args - Arguments to update many CobroConceptos.
     * @example
     * // Update many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CobroConceptos and only return the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CobroConceptoUpdateManyAndReturnArgs>(args: SelectSubset<T, CobroConceptoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CobroConcepto.
     * @param {CobroConceptoUpsertArgs} args - Arguments to update or create a CobroConcepto.
     * @example
     * // Update or create a CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.upsert({
     *   create: {
     *     // ... data to create a CobroConcepto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CobroConcepto we want to update
     *   }
     * })
     */
    upsert<T extends CobroConceptoUpsertArgs>(args: SelectSubset<T, CobroConceptoUpsertArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CobroConceptos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoCountArgs} args - Arguments to filter CobroConceptos to count.
     * @example
     * // Count the number of CobroConceptos
     * const count = await prisma.cobroConcepto.count({
     *   where: {
     *     // ... the filter for the CobroConceptos we want to count
     *   }
     * })
    **/
    count<T extends CobroConceptoCountArgs>(
      args?: Subset<T, CobroConceptoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CobroConceptoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CobroConcepto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CobroConceptoAggregateArgs>(args: Subset<T, CobroConceptoAggregateArgs>): Prisma.PrismaPromise<GetCobroConceptoAggregateType<T>>

    /**
     * Group by CobroConcepto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CobroConceptoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CobroConceptoGroupByArgs['orderBy'] }
        : { orderBy?: CobroConceptoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CobroConceptoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCobroConceptoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CobroConcepto model
   */
  readonly fields: CobroConceptoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CobroConcepto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CobroConceptoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    servicio<T extends ServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioDefaultArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CobroConcepto model
   */
  interface CobroConceptoFieldRefs {
    readonly id: FieldRef<"CobroConcepto", 'String'>
    readonly cantidad: FieldRef<"CobroConcepto", 'Int'>
    readonly subtotal: FieldRef<"CobroConcepto", 'Float'>
    readonly created_at: FieldRef<"CobroConcepto", 'DateTime'>
    readonly updated_at: FieldRef<"CobroConcepto", 'DateTime'>
    readonly cobro_id: FieldRef<"CobroConcepto", 'String'>
    readonly consultorio_id: FieldRef<"CobroConcepto", 'String'>
    readonly precio_unitario: FieldRef<"CobroConcepto", 'Float'>
    readonly servicio_id: FieldRef<"CobroConcepto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CobroConcepto findUnique
   */
  export type CobroConceptoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto findUniqueOrThrow
   */
  export type CobroConceptoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto findFirst
   */
  export type CobroConceptoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CobroConceptos.
     */
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto findFirstOrThrow
   */
  export type CobroConceptoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CobroConceptos.
     */
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto findMany
   */
  export type CobroConceptoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConceptos to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto create
   */
  export type CobroConceptoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The data needed to create a CobroConcepto.
     */
    data: XOR<CobroConceptoCreateInput, CobroConceptoUncheckedCreateInput>
  }

  /**
   * CobroConcepto createMany
   */
  export type CobroConceptoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CobroConceptos.
     */
    data: CobroConceptoCreateManyInput | CobroConceptoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CobroConcepto createManyAndReturn
   */
  export type CobroConceptoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * The data used to create many CobroConceptos.
     */
    data: CobroConceptoCreateManyInput | CobroConceptoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CobroConcepto update
   */
  export type CobroConceptoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The data needed to update a CobroConcepto.
     */
    data: XOR<CobroConceptoUpdateInput, CobroConceptoUncheckedUpdateInput>
    /**
     * Choose, which CobroConcepto to update.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto updateMany
   */
  export type CobroConceptoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CobroConceptos.
     */
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyInput>
    /**
     * Filter which CobroConceptos to update
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to update.
     */
    limit?: number
  }

  /**
   * CobroConcepto updateManyAndReturn
   */
  export type CobroConceptoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * The data used to update CobroConceptos.
     */
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyInput>
    /**
     * Filter which CobroConceptos to update
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CobroConcepto upsert
   */
  export type CobroConceptoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The filter to search for the CobroConcepto to update in case it exists.
     */
    where: CobroConceptoWhereUniqueInput
    /**
     * In case the CobroConcepto found by the `where` argument doesn't exist, create a new CobroConcepto with this data.
     */
    create: XOR<CobroConceptoCreateInput, CobroConceptoUncheckedCreateInput>
    /**
     * In case the CobroConcepto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CobroConceptoUpdateInput, CobroConceptoUncheckedUpdateInput>
  }

  /**
   * CobroConcepto delete
   */
  export type CobroConceptoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter which CobroConcepto to delete.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto deleteMany
   */
  export type CobroConceptoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CobroConceptos to delete
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to delete.
     */
    limit?: number
  }

  /**
   * CobroConcepto without action
   */
  export type CobroConceptoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
  }


  /**
   * Model HistorialCobro
   */

  export type AggregateHistorialCobro = {
    _count: HistorialCobroCountAggregateOutputType | null
    _min: HistorialCobroMinAggregateOutputType | null
    _max: HistorialCobroMaxAggregateOutputType | null
  }

  export type HistorialCobroMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    cobro_id: string | null
    tipo_cambio: $Enums.TipoCambio | null
    usuario_id: string | null
  }

  export type HistorialCobroMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    cobro_id: string | null
    tipo_cambio: $Enums.TipoCambio | null
    usuario_id: string | null
  }

  export type HistorialCobroCountAggregateOutputType = {
    id: number
    created_at: number
    cobro_id: number
    detalles_antes: number
    detalles_despues: number
    tipo_cambio: number
    usuario_id: number
    _all: number
  }


  export type HistorialCobroMinAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    tipo_cambio?: true
    usuario_id?: true
  }

  export type HistorialCobroMaxAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    tipo_cambio?: true
    usuario_id?: true
  }

  export type HistorialCobroCountAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    detalles_antes?: true
    detalles_despues?: true
    tipo_cambio?: true
    usuario_id?: true
    _all?: true
  }

  export type HistorialCobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCobro to aggregate.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistorialCobros
    **/
    _count?: true | HistorialCobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistorialCobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistorialCobroMaxAggregateInputType
  }

  export type GetHistorialCobroAggregateType<T extends HistorialCobroAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorialCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorialCobro[P]>
      : GetScalarType<T[P], AggregateHistorialCobro[P]>
  }




  export type HistorialCobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithAggregationInput | HistorialCobroOrderByWithAggregationInput[]
    by: HistorialCobroScalarFieldEnum[] | HistorialCobroScalarFieldEnum
    having?: HistorialCobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistorialCobroCountAggregateInputType | true
    _min?: HistorialCobroMinAggregateInputType
    _max?: HistorialCobroMaxAggregateInputType
  }

  export type HistorialCobroGroupByOutputType = {
    id: string
    created_at: Date
    cobro_id: string
    detalles_antes: JsonValue | null
    detalles_despues: JsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
    _count: HistorialCobroCountAggregateOutputType | null
    _min: HistorialCobroMinAggregateOutputType | null
    _max: HistorialCobroMaxAggregateOutputType | null
  }

  type GetHistorialCobroGroupByPayload<T extends HistorialCobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistorialCobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistorialCobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistorialCobroGroupByOutputType[P]>
            : GetScalarType<T[P], HistorialCobroGroupByOutputType[P]>
        }
      >
    >


  export type HistorialCobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectScalar = {
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
  }

  export type HistorialCobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "cobro_id" | "detalles_antes" | "detalles_despues" | "tipo_cambio" | "usuario_id", ExtArgs["result"]["historialCobro"]>
  export type HistorialCobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type HistorialCobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type HistorialCobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $HistorialCobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistorialCobro"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      cobro_id: string
      detalles_antes: Prisma.JsonValue | null
      detalles_despues: Prisma.JsonValue
      tipo_cambio: $Enums.TipoCambio
      usuario_id: string
    }, ExtArgs["result"]["historialCobro"]>
    composites: {}
  }

  type HistorialCobroGetPayload<S extends boolean | null | undefined | HistorialCobroDefaultArgs> = $Result.GetResult<Prisma.$HistorialCobroPayload, S>

  type HistorialCobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistorialCobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistorialCobroCountAggregateInputType | true
    }

  export interface HistorialCobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistorialCobro'], meta: { name: 'HistorialCobro' } }
    /**
     * Find zero or one HistorialCobro that matches the filter.
     * @param {HistorialCobroFindUniqueArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistorialCobroFindUniqueArgs>(args: SelectSubset<T, HistorialCobroFindUniqueArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistorialCobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistorialCobroFindUniqueOrThrowArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistorialCobroFindUniqueOrThrowArgs>(args: SelectSubset<T, HistorialCobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistorialCobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindFirstArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistorialCobroFindFirstArgs>(args?: SelectSubset<T, HistorialCobroFindFirstArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistorialCobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindFirstOrThrowArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistorialCobroFindFirstOrThrowArgs>(args?: SelectSubset<T, HistorialCobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistorialCobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistorialCobros
     * const historialCobros = await prisma.historialCobro.findMany()
     * 
     * // Get first 10 HistorialCobros
     * const historialCobros = await prisma.historialCobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistorialCobroFindManyArgs>(args?: SelectSubset<T, HistorialCobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistorialCobro.
     * @param {HistorialCobroCreateArgs} args - Arguments to create a HistorialCobro.
     * @example
     * // Create one HistorialCobro
     * const HistorialCobro = await prisma.historialCobro.create({
     *   data: {
     *     // ... data to create a HistorialCobro
     *   }
     * })
     * 
     */
    create<T extends HistorialCobroCreateArgs>(args: SelectSubset<T, HistorialCobroCreateArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistorialCobros.
     * @param {HistorialCobroCreateManyArgs} args - Arguments to create many HistorialCobros.
     * @example
     * // Create many HistorialCobros
     * const historialCobro = await prisma.historialCobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistorialCobroCreateManyArgs>(args?: SelectSubset<T, HistorialCobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HistorialCobros and returns the data saved in the database.
     * @param {HistorialCobroCreateManyAndReturnArgs} args - Arguments to create many HistorialCobros.
     * @example
     * // Create many HistorialCobros
     * const historialCobro = await prisma.historialCobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HistorialCobros and only return the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistorialCobroCreateManyAndReturnArgs>(args?: SelectSubset<T, HistorialCobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HistorialCobro.
     * @param {HistorialCobroDeleteArgs} args - Arguments to delete one HistorialCobro.
     * @example
     * // Delete one HistorialCobro
     * const HistorialCobro = await prisma.historialCobro.delete({
     *   where: {
     *     // ... filter to delete one HistorialCobro
     *   }
     * })
     * 
     */
    delete<T extends HistorialCobroDeleteArgs>(args: SelectSubset<T, HistorialCobroDeleteArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistorialCobro.
     * @param {HistorialCobroUpdateArgs} args - Arguments to update one HistorialCobro.
     * @example
     * // Update one HistorialCobro
     * const historialCobro = await prisma.historialCobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistorialCobroUpdateArgs>(args: SelectSubset<T, HistorialCobroUpdateArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistorialCobros.
     * @param {HistorialCobroDeleteManyArgs} args - Arguments to filter HistorialCobros to delete.
     * @example
     * // Delete a few HistorialCobros
     * const { count } = await prisma.historialCobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistorialCobroDeleteManyArgs>(args?: SelectSubset<T, HistorialCobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistorialCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistorialCobros
     * const historialCobro = await prisma.historialCobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistorialCobroUpdateManyArgs>(args: SelectSubset<T, HistorialCobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistorialCobros and returns the data updated in the database.
     * @param {HistorialCobroUpdateManyAndReturnArgs} args - Arguments to update many HistorialCobros.
     * @example
     * // Update many HistorialCobros
     * const historialCobro = await prisma.historialCobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HistorialCobros and only return the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistorialCobroUpdateManyAndReturnArgs>(args: SelectSubset<T, HistorialCobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HistorialCobro.
     * @param {HistorialCobroUpsertArgs} args - Arguments to update or create a HistorialCobro.
     * @example
     * // Update or create a HistorialCobro
     * const historialCobro = await prisma.historialCobro.upsert({
     *   create: {
     *     // ... data to create a HistorialCobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistorialCobro we want to update
     *   }
     * })
     */
    upsert<T extends HistorialCobroUpsertArgs>(args: SelectSubset<T, HistorialCobroUpsertArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistorialCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroCountArgs} args - Arguments to filter HistorialCobros to count.
     * @example
     * // Count the number of HistorialCobros
     * const count = await prisma.historialCobro.count({
     *   where: {
     *     // ... the filter for the HistorialCobros we want to count
     *   }
     * })
    **/
    count<T extends HistorialCobroCountArgs>(
      args?: Subset<T, HistorialCobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistorialCobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistorialCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistorialCobroAggregateArgs>(args: Subset<T, HistorialCobroAggregateArgs>): Prisma.PrismaPromise<GetHistorialCobroAggregateType<T>>

    /**
     * Group by HistorialCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistorialCobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistorialCobroGroupByArgs['orderBy'] }
        : { orderBy?: HistorialCobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistorialCobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorialCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistorialCobro model
   */
  readonly fields: HistorialCobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistorialCobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistorialCobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistorialCobro model
   */
  interface HistorialCobroFieldRefs {
    readonly id: FieldRef<"HistorialCobro", 'String'>
    readonly created_at: FieldRef<"HistorialCobro", 'DateTime'>
    readonly cobro_id: FieldRef<"HistorialCobro", 'String'>
    readonly detalles_antes: FieldRef<"HistorialCobro", 'Json'>
    readonly detalles_despues: FieldRef<"HistorialCobro", 'Json'>
    readonly tipo_cambio: FieldRef<"HistorialCobro", 'TipoCambio'>
    readonly usuario_id: FieldRef<"HistorialCobro", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HistorialCobro findUnique
   */
  export type HistorialCobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro findUniqueOrThrow
   */
  export type HistorialCobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro findFirst
   */
  export type HistorialCobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCobros.
     */
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro findFirstOrThrow
   */
  export type HistorialCobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCobros.
     */
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro findMany
   */
  export type HistorialCobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobros to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro create
   */
  export type HistorialCobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The data needed to create a HistorialCobro.
     */
    data: XOR<HistorialCobroCreateInput, HistorialCobroUncheckedCreateInput>
  }

  /**
   * HistorialCobro createMany
   */
  export type HistorialCobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistorialCobros.
     */
    data: HistorialCobroCreateManyInput | HistorialCobroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistorialCobro createManyAndReturn
   */
  export type HistorialCobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * The data used to create many HistorialCobros.
     */
    data: HistorialCobroCreateManyInput | HistorialCobroCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistorialCobro update
   */
  export type HistorialCobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The data needed to update a HistorialCobro.
     */
    data: XOR<HistorialCobroUpdateInput, HistorialCobroUncheckedUpdateInput>
    /**
     * Choose, which HistorialCobro to update.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro updateMany
   */
  export type HistorialCobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistorialCobros.
     */
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyInput>
    /**
     * Filter which HistorialCobros to update
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to update.
     */
    limit?: number
  }

  /**
   * HistorialCobro updateManyAndReturn
   */
  export type HistorialCobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * The data used to update HistorialCobros.
     */
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyInput>
    /**
     * Filter which HistorialCobros to update
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistorialCobro upsert
   */
  export type HistorialCobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The filter to search for the HistorialCobro to update in case it exists.
     */
    where: HistorialCobroWhereUniqueInput
    /**
     * In case the HistorialCobro found by the `where` argument doesn't exist, create a new HistorialCobro with this data.
     */
    create: XOR<HistorialCobroCreateInput, HistorialCobroUncheckedCreateInput>
    /**
     * In case the HistorialCobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistorialCobroUpdateInput, HistorialCobroUncheckedUpdateInput>
  }

  /**
   * HistorialCobro delete
   */
  export type HistorialCobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter which HistorialCobro to delete.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro deleteMany
   */
  export type HistorialCobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCobros to delete
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to delete.
     */
    limit?: number
  }

  /**
   * HistorialCobro without action
   */
  export type HistorialCobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
  }


  /**
   * Model Servicio
   */

  export type AggregateServicio = {
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  export type ServicioAvgAggregateOutputType = {
    precio_base: number | null
  }

  export type ServicioSumAggregateOutputType = {
    precio_base: number | null
  }

  export type ServicioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    precio_base: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    precio_base: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    precio_base: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServicioAvgAggregateInputType = {
    precio_base?: true
  }

  export type ServicioSumAggregateInputType = {
    precio_base?: true
  }

  export type ServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicio to aggregate.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicios
    **/
    _count?: true | ServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioMaxAggregateInputType
  }

  export type GetServicioAggregateType<T extends ServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicio[P]>
      : GetScalarType<T[P], AggregateServicio[P]>
  }




  export type ServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithAggregationInput | ServicioOrderByWithAggregationInput[]
    by: ServicioScalarFieldEnum[] | ServicioScalarFieldEnum
    having?: ServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioCountAggregateInputType | true
    _avg?: ServicioAvgAggregateInputType
    _sum?: ServicioSumAggregateInputType
    _min?: ServicioMinAggregateInputType
    _max?: ServicioMaxAggregateInputType
  }

  export type ServicioGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string | null
    precio_base: number
    created_at: Date
    updated_at: Date
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  type GetServicioGroupByPayload<T extends ServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioGroupByOutputType[P]>
        }
      >
    >


  export type ServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
    conceptos?: boolean | Servicio$conceptosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ServicioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "precio_base" | "created_at" | "updated_at", ExtArgs["result"]["servicio"]>
  export type ServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | Servicio$conceptosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServicioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicio"
    objects: {
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string | null
      precio_base: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["servicio"]>
    composites: {}
  }

  type ServicioGetPayload<S extends boolean | null | undefined | ServicioDefaultArgs> = $Result.GetResult<Prisma.$ServicioPayload, S>

  type ServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicioCountAggregateInputType | true
    }

  export interface ServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicio'], meta: { name: 'Servicio' } }
    /**
     * Find zero or one Servicio that matches the filter.
     * @param {ServicioFindUniqueArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicioFindUniqueArgs>(args: SelectSubset<T, ServicioFindUniqueArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Servicio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicioFindUniqueOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicioFindFirstArgs>(args?: SelectSubset<T, ServicioFindFirstArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicio.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioWithIdOnly = await prisma.servicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicioFindManyArgs>(args?: SelectSubset<T, ServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Servicio.
     * @param {ServicioCreateArgs} args - Arguments to create a Servicio.
     * @example
     * // Create one Servicio
     * const Servicio = await prisma.servicio.create({
     *   data: {
     *     // ... data to create a Servicio
     *   }
     * })
     * 
     */
    create<T extends ServicioCreateArgs>(args: SelectSubset<T, ServicioCreateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Servicios.
     * @param {ServicioCreateManyArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicioCreateManyArgs>(args?: SelectSubset<T, ServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servicios and returns the data saved in the database.
     * @param {ServicioCreateManyAndReturnArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Servicio.
     * @param {ServicioDeleteArgs} args - Arguments to delete one Servicio.
     * @example
     * // Delete one Servicio
     * const Servicio = await prisma.servicio.delete({
     *   where: {
     *     // ... filter to delete one Servicio
     *   }
     * })
     * 
     */
    delete<T extends ServicioDeleteArgs>(args: SelectSubset<T, ServicioDeleteArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Servicio.
     * @param {ServicioUpdateArgs} args - Arguments to update one Servicio.
     * @example
     * // Update one Servicio
     * const servicio = await prisma.servicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicioUpdateArgs>(args: SelectSubset<T, ServicioUpdateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Servicios.
     * @param {ServicioDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicioDeleteManyArgs>(args?: SelectSubset<T, ServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicioUpdateManyArgs>(args: SelectSubset<T, ServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios and returns the data updated in the database.
     * @param {ServicioUpdateManyAndReturnArgs} args - Arguments to update many Servicios.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServicioUpdateManyAndReturnArgs>(args: SelectSubset<T, ServicioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Servicio.
     * @param {ServicioUpsertArgs} args - Arguments to update or create a Servicio.
     * @example
     * // Update or create a Servicio
     * const servicio = await prisma.servicio.upsert({
     *   create: {
     *     // ... data to create a Servicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicio we want to update
     *   }
     * })
     */
    upsert<T extends ServicioUpsertArgs>(args: SelectSubset<T, ServicioUpsertArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicio.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends ServicioCountArgs>(
      args?: Subset<T, ServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioAggregateArgs>(args: Subset<T, ServicioAggregateArgs>): Prisma.PrismaPromise<GetServicioAggregateType<T>>

    /**
     * Group by Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioGroupByArgs['orderBy'] }
        : { orderBy?: ServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicio model
   */
  readonly fields: ServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conceptos<T extends Servicio$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servicio model
   */
  interface ServicioFieldRefs {
    readonly id: FieldRef<"Servicio", 'String'>
    readonly nombre: FieldRef<"Servicio", 'String'>
    readonly descripcion: FieldRef<"Servicio", 'String'>
    readonly precio_base: FieldRef<"Servicio", 'Float'>
    readonly created_at: FieldRef<"Servicio", 'DateTime'>
    readonly updated_at: FieldRef<"Servicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Servicio findUnique
   */
  export type ServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findUniqueOrThrow
   */
  export type ServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findFirst
   */
  export type ServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findFirstOrThrow
   */
  export type ServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findMany
   */
  export type ServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicios to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio create
   */
  export type ServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicio.
     */
    data: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
  }

  /**
   * Servicio createMany
   */
  export type ServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servicio createManyAndReturn
   */
  export type ServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servicio update
   */
  export type ServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicio.
     */
    data: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
    /**
     * Choose, which Servicio to update.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio updateMany
   */
  export type ServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
  }

  /**
   * Servicio updateManyAndReturn
   */
  export type ServicioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
  }

  /**
   * Servicio upsert
   */
  export type ServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicio to update in case it exists.
     */
    where: ServicioWhereUniqueInput
    /**
     * In case the Servicio found by the `where` argument doesn't exist, create a new Servicio with this data.
     */
    create: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
    /**
     * In case the Servicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
  }

  /**
   * Servicio delete
   */
  export type ServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter which Servicio to delete.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio deleteMany
   */
  export type ServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicios to delete
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to delete.
     */
    limit?: number
  }

  /**
   * Servicio.conceptos
   */
  export type Servicio$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Servicio without action
   */
  export type ServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
  }


  /**
   * Model MetodoPagoCobro
   */

  export type AggregateMetodoPagoCobro = {
    _count: MetodoPagoCobroCountAggregateOutputType | null
    _avg: MetodoPagoCobroAvgAggregateOutputType | null
    _sum: MetodoPagoCobroSumAggregateOutputType | null
    _min: MetodoPagoCobroMinAggregateOutputType | null
    _max: MetodoPagoCobroMaxAggregateOutputType | null
  }

  export type MetodoPagoCobroAvgAggregateOutputType = {
    monto: number | null
  }

  export type MetodoPagoCobroSumAggregateOutputType = {
    monto: number | null
  }

  export type MetodoPagoCobroMinAggregateOutputType = {
    id: string | null
    cobro_id: string | null
    metodo_pago: $Enums.MetodoPago | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MetodoPagoCobroMaxAggregateOutputType = {
    id: string | null
    cobro_id: string | null
    metodo_pago: $Enums.MetodoPago | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MetodoPagoCobroCountAggregateOutputType = {
    id: number
    cobro_id: number
    metodo_pago: number
    monto: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type MetodoPagoCobroAvgAggregateInputType = {
    monto?: true
  }

  export type MetodoPagoCobroSumAggregateInputType = {
    monto?: true
  }

  export type MetodoPagoCobroMinAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type MetodoPagoCobroMaxAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type MetodoPagoCobroCountAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type MetodoPagoCobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPagoCobro to aggregate.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetodoPagoCobros
    **/
    _count?: true | MetodoPagoCobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetodoPagoCobroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetodoPagoCobroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetodoPagoCobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetodoPagoCobroMaxAggregateInputType
  }

  export type GetMetodoPagoCobroAggregateType<T extends MetodoPagoCobroAggregateArgs> = {
        [P in keyof T & keyof AggregateMetodoPagoCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetodoPagoCobro[P]>
      : GetScalarType<T[P], AggregateMetodoPagoCobro[P]>
  }




  export type MetodoPagoCobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetodoPagoCobroWhereInput
    orderBy?: MetodoPagoCobroOrderByWithAggregationInput | MetodoPagoCobroOrderByWithAggregationInput[]
    by: MetodoPagoCobroScalarFieldEnum[] | MetodoPagoCobroScalarFieldEnum
    having?: MetodoPagoCobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetodoPagoCobroCountAggregateInputType | true
    _avg?: MetodoPagoCobroAvgAggregateInputType
    _sum?: MetodoPagoCobroSumAggregateInputType
    _min?: MetodoPagoCobroMinAggregateInputType
    _max?: MetodoPagoCobroMaxAggregateInputType
  }

  export type MetodoPagoCobroGroupByOutputType = {
    id: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at: Date
    updated_at: Date
    _count: MetodoPagoCobroCountAggregateOutputType | null
    _avg: MetodoPagoCobroAvgAggregateOutputType | null
    _sum: MetodoPagoCobroSumAggregateOutputType | null
    _min: MetodoPagoCobroMinAggregateOutputType | null
    _max: MetodoPagoCobroMaxAggregateOutputType | null
  }

  type GetMetodoPagoCobroGroupByPayload<T extends MetodoPagoCobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetodoPagoCobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetodoPagoCobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetodoPagoCobroGroupByOutputType[P]>
            : GetScalarType<T[P], MetodoPagoCobroGroupByOutputType[P]>
        }
      >
    >


  export type MetodoPagoCobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectScalar = {
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type MetodoPagoCobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cobro_id" | "metodo_pago" | "monto" | "created_at" | "updated_at", ExtArgs["result"]["metodoPagoCobro"]>
  export type MetodoPagoCobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }
  export type MetodoPagoCobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }
  export type MetodoPagoCobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }

  export type $MetodoPagoCobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetodoPagoCobro"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cobro_id: string
      metodo_pago: $Enums.MetodoPago
      monto: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["metodoPagoCobro"]>
    composites: {}
  }

  type MetodoPagoCobroGetPayload<S extends boolean | null | undefined | MetodoPagoCobroDefaultArgs> = $Result.GetResult<Prisma.$MetodoPagoCobroPayload, S>

  type MetodoPagoCobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetodoPagoCobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetodoPagoCobroCountAggregateInputType | true
    }

  export interface MetodoPagoCobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetodoPagoCobro'], meta: { name: 'MetodoPagoCobro' } }
    /**
     * Find zero or one MetodoPagoCobro that matches the filter.
     * @param {MetodoPagoCobroFindUniqueArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetodoPagoCobroFindUniqueArgs>(args: SelectSubset<T, MetodoPagoCobroFindUniqueArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetodoPagoCobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetodoPagoCobroFindUniqueOrThrowArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetodoPagoCobroFindUniqueOrThrowArgs>(args: SelectSubset<T, MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetodoPagoCobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindFirstArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetodoPagoCobroFindFirstArgs>(args?: SelectSubset<T, MetodoPagoCobroFindFirstArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetodoPagoCobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindFirstOrThrowArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetodoPagoCobroFindFirstOrThrowArgs>(args?: SelectSubset<T, MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetodoPagoCobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetodoPagoCobros
     * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany()
     * 
     * // Get first 10 MetodoPagoCobros
     * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetodoPagoCobroFindManyArgs>(args?: SelectSubset<T, MetodoPagoCobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetodoPagoCobro.
     * @param {MetodoPagoCobroCreateArgs} args - Arguments to create a MetodoPagoCobro.
     * @example
     * // Create one MetodoPagoCobro
     * const MetodoPagoCobro = await prisma.metodoPagoCobro.create({
     *   data: {
     *     // ... data to create a MetodoPagoCobro
     *   }
     * })
     * 
     */
    create<T extends MetodoPagoCobroCreateArgs>(args: SelectSubset<T, MetodoPagoCobroCreateArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetodoPagoCobros.
     * @param {MetodoPagoCobroCreateManyArgs} args - Arguments to create many MetodoPagoCobros.
     * @example
     * // Create many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetodoPagoCobroCreateManyArgs>(args?: SelectSubset<T, MetodoPagoCobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetodoPagoCobros and returns the data saved in the database.
     * @param {MetodoPagoCobroCreateManyAndReturnArgs} args - Arguments to create many MetodoPagoCobros.
     * @example
     * // Create many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetodoPagoCobros and only return the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetodoPagoCobroCreateManyAndReturnArgs>(args?: SelectSubset<T, MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetodoPagoCobro.
     * @param {MetodoPagoCobroDeleteArgs} args - Arguments to delete one MetodoPagoCobro.
     * @example
     * // Delete one MetodoPagoCobro
     * const MetodoPagoCobro = await prisma.metodoPagoCobro.delete({
     *   where: {
     *     // ... filter to delete one MetodoPagoCobro
     *   }
     * })
     * 
     */
    delete<T extends MetodoPagoCobroDeleteArgs>(args: SelectSubset<T, MetodoPagoCobroDeleteArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetodoPagoCobro.
     * @param {MetodoPagoCobroUpdateArgs} args - Arguments to update one MetodoPagoCobro.
     * @example
     * // Update one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetodoPagoCobroUpdateArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetodoPagoCobros.
     * @param {MetodoPagoCobroDeleteManyArgs} args - Arguments to filter MetodoPagoCobros to delete.
     * @example
     * // Delete a few MetodoPagoCobros
     * const { count } = await prisma.metodoPagoCobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetodoPagoCobroDeleteManyArgs>(args?: SelectSubset<T, MetodoPagoCobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagoCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetodoPagoCobroUpdateManyArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagoCobros and returns the data updated in the database.
     * @param {MetodoPagoCobroUpdateManyAndReturnArgs} args - Arguments to update many MetodoPagoCobros.
     * @example
     * // Update many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetodoPagoCobros and only return the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetodoPagoCobroUpdateManyAndReturnArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetodoPagoCobro.
     * @param {MetodoPagoCobroUpsertArgs} args - Arguments to update or create a MetodoPagoCobro.
     * @example
     * // Update or create a MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.upsert({
     *   create: {
     *     // ... data to create a MetodoPagoCobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetodoPagoCobro we want to update
     *   }
     * })
     */
    upsert<T extends MetodoPagoCobroUpsertArgs>(args: SelectSubset<T, MetodoPagoCobroUpsertArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetodoPagoCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroCountArgs} args - Arguments to filter MetodoPagoCobros to count.
     * @example
     * // Count the number of MetodoPagoCobros
     * const count = await prisma.metodoPagoCobro.count({
     *   where: {
     *     // ... the filter for the MetodoPagoCobros we want to count
     *   }
     * })
    **/
    count<T extends MetodoPagoCobroCountArgs>(
      args?: Subset<T, MetodoPagoCobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetodoPagoCobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetodoPagoCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetodoPagoCobroAggregateArgs>(args: Subset<T, MetodoPagoCobroAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoCobroAggregateType<T>>

    /**
     * Group by MetodoPagoCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetodoPagoCobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetodoPagoCobroGroupByArgs['orderBy'] }
        : { orderBy?: MetodoPagoCobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetodoPagoCobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetodoPagoCobro model
   */
  readonly fields: MetodoPagoCobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetodoPagoCobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetodoPagoCobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetodoPagoCobro model
   */
  interface MetodoPagoCobroFieldRefs {
    readonly id: FieldRef<"MetodoPagoCobro", 'String'>
    readonly cobro_id: FieldRef<"MetodoPagoCobro", 'String'>
    readonly metodo_pago: FieldRef<"MetodoPagoCobro", 'MetodoPago'>
    readonly monto: FieldRef<"MetodoPagoCobro", 'Float'>
    readonly created_at: FieldRef<"MetodoPagoCobro", 'DateTime'>
    readonly updated_at: FieldRef<"MetodoPagoCobro", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MetodoPagoCobro findUnique
   */
  export type MetodoPagoCobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro findUniqueOrThrow
   */
  export type MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro findFirst
   */
  export type MetodoPagoCobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagoCobros.
     */
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro findFirstOrThrow
   */
  export type MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagoCobros.
     */
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro findMany
   */
  export type MetodoPagoCobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobros to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro create
   */
  export type MetodoPagoCobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The data needed to create a MetodoPagoCobro.
     */
    data: XOR<MetodoPagoCobroCreateInput, MetodoPagoCobroUncheckedCreateInput>
  }

  /**
   * MetodoPagoCobro createMany
   */
  export type MetodoPagoCobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetodoPagoCobros.
     */
    data: MetodoPagoCobroCreateManyInput | MetodoPagoCobroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetodoPagoCobro createManyAndReturn
   */
  export type MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * The data used to create many MetodoPagoCobros.
     */
    data: MetodoPagoCobroCreateManyInput | MetodoPagoCobroCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetodoPagoCobro update
   */
  export type MetodoPagoCobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The data needed to update a MetodoPagoCobro.
     */
    data: XOR<MetodoPagoCobroUpdateInput, MetodoPagoCobroUncheckedUpdateInput>
    /**
     * Choose, which MetodoPagoCobro to update.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro updateMany
   */
  export type MetodoPagoCobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetodoPagoCobros.
     */
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagoCobros to update
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to update.
     */
    limit?: number
  }

  /**
   * MetodoPagoCobro updateManyAndReturn
   */
  export type MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * The data used to update MetodoPagoCobros.
     */
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagoCobros to update
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetodoPagoCobro upsert
   */
  export type MetodoPagoCobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The filter to search for the MetodoPagoCobro to update in case it exists.
     */
    where: MetodoPagoCobroWhereUniqueInput
    /**
     * In case the MetodoPagoCobro found by the `where` argument doesn't exist, create a new MetodoPagoCobro with this data.
     */
    create: XOR<MetodoPagoCobroCreateInput, MetodoPagoCobroUncheckedCreateInput>
    /**
     * In case the MetodoPagoCobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetodoPagoCobroUpdateInput, MetodoPagoCobroUncheckedUpdateInput>
  }

  /**
   * MetodoPagoCobro delete
   */
  export type MetodoPagoCobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter which MetodoPagoCobro to delete.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro deleteMany
   */
  export type MetodoPagoCobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPagoCobros to delete
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to delete.
     */
    limit?: number
  }

  /**
   * MetodoPagoCobro without action
   */
  export type MetodoPagoCobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
  }


  /**
   * Model Cita
   */

  export type AggregateCita = {
    _count: CitaCountAggregateOutputType | null
    _min: CitaMinAggregateOutputType | null
    _max: CitaMaxAggregateOutputType | null
  }

  export type CitaMinAggregateOutputType = {
    id: string | null
    paciente_id: string | null
    usuario_id: string | null
    consultorio_id: string | null
    fecha_inicio: Date | null
    fecha_fin: Date | null
    titulo: string | null
    descripcion: string | null
    estado: $Enums.EstadoCita | null
    color: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CitaMaxAggregateOutputType = {
    id: string | null
    paciente_id: string | null
    usuario_id: string | null
    consultorio_id: string | null
    fecha_inicio: Date | null
    fecha_fin: Date | null
    titulo: string | null
    descripcion: string | null
    estado: $Enums.EstadoCita | null
    color: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CitaCountAggregateOutputType = {
    id: number
    paciente_id: number
    usuario_id: number
    consultorio_id: number
    fecha_inicio: number
    fecha_fin: number
    titulo: number
    descripcion: number
    estado: number
    color: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CitaMinAggregateInputType = {
    id?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    fecha_inicio?: true
    fecha_fin?: true
    titulo?: true
    descripcion?: true
    estado?: true
    color?: true
    created_at?: true
    updated_at?: true
  }

  export type CitaMaxAggregateInputType = {
    id?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    fecha_inicio?: true
    fecha_fin?: true
    titulo?: true
    descripcion?: true
    estado?: true
    color?: true
    created_at?: true
    updated_at?: true
  }

  export type CitaCountAggregateInputType = {
    id?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    fecha_inicio?: true
    fecha_fin?: true
    titulo?: true
    descripcion?: true
    estado?: true
    color?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CitaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cita to aggregate.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Citas
    **/
    _count?: true | CitaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitaMaxAggregateInputType
  }

  export type GetCitaAggregateType<T extends CitaAggregateArgs> = {
        [P in keyof T & keyof AggregateCita]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCita[P]>
      : GetScalarType<T[P], AggregateCita[P]>
  }




  export type CitaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithAggregationInput | CitaOrderByWithAggregationInput[]
    by: CitaScalarFieldEnum[] | CitaScalarFieldEnum
    having?: CitaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitaCountAggregateInputType | true
    _min?: CitaMinAggregateInputType
    _max?: CitaMaxAggregateInputType
  }

  export type CitaGroupByOutputType = {
    id: string
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    fecha_inicio: Date
    fecha_fin: Date
    titulo: string
    descripcion: string | null
    estado: $Enums.EstadoCita
    color: string | null
    created_at: Date
    updated_at: Date
    _count: CitaCountAggregateOutputType | null
    _min: CitaMinAggregateOutputType | null
    _max: CitaMaxAggregateOutputType | null
  }

  type GetCitaGroupByPayload<T extends CitaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitaGroupByOutputType[P]>
            : GetScalarType<T[P], CitaGroupByOutputType[P]>
        }
      >
    >


  export type CitaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    fecha_inicio?: boolean
    fecha_fin?: boolean
    titulo?: boolean
    descripcion?: boolean
    estado?: boolean
    color?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cita"]>

  export type CitaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    fecha_inicio?: boolean
    fecha_fin?: boolean
    titulo?: boolean
    descripcion?: boolean
    estado?: boolean
    color?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cita"]>

  export type CitaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    fecha_inicio?: boolean
    fecha_fin?: boolean
    titulo?: boolean
    descripcion?: boolean
    estado?: boolean
    color?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cita"]>

  export type CitaSelectScalar = {
    id?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    fecha_inicio?: boolean
    fecha_fin?: boolean
    titulo?: boolean
    descripcion?: boolean
    estado?: boolean
    color?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CitaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "paciente_id" | "usuario_id" | "consultorio_id" | "fecha_inicio" | "fecha_fin" | "titulo" | "descripcion" | "estado" | "color" | "created_at" | "updated_at", ExtArgs["result"]["cita"]>
  export type CitaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type CitaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type CitaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }

  export type $CitaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cita"
    objects: {
      paciente: Prisma.$PacientePayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      paciente_id: string
      usuario_id: string
      consultorio_id: string
      fecha_inicio: Date
      fecha_fin: Date
      titulo: string
      descripcion: string | null
      estado: $Enums.EstadoCita
      color: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["cita"]>
    composites: {}
  }

  type CitaGetPayload<S extends boolean | null | undefined | CitaDefaultArgs> = $Result.GetResult<Prisma.$CitaPayload, S>

  type CitaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CitaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CitaCountAggregateInputType | true
    }

  export interface CitaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cita'], meta: { name: 'Cita' } }
    /**
     * Find zero or one Cita that matches the filter.
     * @param {CitaFindUniqueArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CitaFindUniqueArgs>(args: SelectSubset<T, CitaFindUniqueArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cita that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CitaFindUniqueOrThrowArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CitaFindUniqueOrThrowArgs>(args: SelectSubset<T, CitaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cita that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindFirstArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CitaFindFirstArgs>(args?: SelectSubset<T, CitaFindFirstArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cita that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindFirstOrThrowArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CitaFindFirstOrThrowArgs>(args?: SelectSubset<T, CitaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Citas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Citas
     * const citas = await prisma.cita.findMany()
     * 
     * // Get first 10 Citas
     * const citas = await prisma.cita.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const citaWithIdOnly = await prisma.cita.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CitaFindManyArgs>(args?: SelectSubset<T, CitaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cita.
     * @param {CitaCreateArgs} args - Arguments to create a Cita.
     * @example
     * // Create one Cita
     * const Cita = await prisma.cita.create({
     *   data: {
     *     // ... data to create a Cita
     *   }
     * })
     * 
     */
    create<T extends CitaCreateArgs>(args: SelectSubset<T, CitaCreateArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Citas.
     * @param {CitaCreateManyArgs} args - Arguments to create many Citas.
     * @example
     * // Create many Citas
     * const cita = await prisma.cita.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CitaCreateManyArgs>(args?: SelectSubset<T, CitaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Citas and returns the data saved in the database.
     * @param {CitaCreateManyAndReturnArgs} args - Arguments to create many Citas.
     * @example
     * // Create many Citas
     * const cita = await prisma.cita.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Citas and only return the `id`
     * const citaWithIdOnly = await prisma.cita.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CitaCreateManyAndReturnArgs>(args?: SelectSubset<T, CitaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cita.
     * @param {CitaDeleteArgs} args - Arguments to delete one Cita.
     * @example
     * // Delete one Cita
     * const Cita = await prisma.cita.delete({
     *   where: {
     *     // ... filter to delete one Cita
     *   }
     * })
     * 
     */
    delete<T extends CitaDeleteArgs>(args: SelectSubset<T, CitaDeleteArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cita.
     * @param {CitaUpdateArgs} args - Arguments to update one Cita.
     * @example
     * // Update one Cita
     * const cita = await prisma.cita.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CitaUpdateArgs>(args: SelectSubset<T, CitaUpdateArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Citas.
     * @param {CitaDeleteManyArgs} args - Arguments to filter Citas to delete.
     * @example
     * // Delete a few Citas
     * const { count } = await prisma.cita.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CitaDeleteManyArgs>(args?: SelectSubset<T, CitaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Citas
     * const cita = await prisma.cita.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CitaUpdateManyArgs>(args: SelectSubset<T, CitaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citas and returns the data updated in the database.
     * @param {CitaUpdateManyAndReturnArgs} args - Arguments to update many Citas.
     * @example
     * // Update many Citas
     * const cita = await prisma.cita.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Citas and only return the `id`
     * const citaWithIdOnly = await prisma.cita.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CitaUpdateManyAndReturnArgs>(args: SelectSubset<T, CitaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cita.
     * @param {CitaUpsertArgs} args - Arguments to update or create a Cita.
     * @example
     * // Update or create a Cita
     * const cita = await prisma.cita.upsert({
     *   create: {
     *     // ... data to create a Cita
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cita we want to update
     *   }
     * })
     */
    upsert<T extends CitaUpsertArgs>(args: SelectSubset<T, CitaUpsertArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaCountArgs} args - Arguments to filter Citas to count.
     * @example
     * // Count the number of Citas
     * const count = await prisma.cita.count({
     *   where: {
     *     // ... the filter for the Citas we want to count
     *   }
     * })
    **/
    count<T extends CitaCountArgs>(
      args?: Subset<T, CitaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitaAggregateArgs>(args: Subset<T, CitaAggregateArgs>): Prisma.PrismaPromise<GetCitaAggregateType<T>>

    /**
     * Group by Cita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CitaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CitaGroupByArgs['orderBy'] }
        : { orderBy?: CitaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CitaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cita model
   */
  readonly fields: CitaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cita.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CitaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cita model
   */
  interface CitaFieldRefs {
    readonly id: FieldRef<"Cita", 'String'>
    readonly paciente_id: FieldRef<"Cita", 'String'>
    readonly usuario_id: FieldRef<"Cita", 'String'>
    readonly consultorio_id: FieldRef<"Cita", 'String'>
    readonly fecha_inicio: FieldRef<"Cita", 'DateTime'>
    readonly fecha_fin: FieldRef<"Cita", 'DateTime'>
    readonly titulo: FieldRef<"Cita", 'String'>
    readonly descripcion: FieldRef<"Cita", 'String'>
    readonly estado: FieldRef<"Cita", 'EstadoCita'>
    readonly color: FieldRef<"Cita", 'String'>
    readonly created_at: FieldRef<"Cita", 'DateTime'>
    readonly updated_at: FieldRef<"Cita", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cita findUnique
   */
  export type CitaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita findUniqueOrThrow
   */
  export type CitaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita findFirst
   */
  export type CitaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citas.
     */
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita findFirstOrThrow
   */
  export type CitaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citas.
     */
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita findMany
   */
  export type CitaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Citas to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita create
   */
  export type CitaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The data needed to create a Cita.
     */
    data: XOR<CitaCreateInput, CitaUncheckedCreateInput>
  }

  /**
   * Cita createMany
   */
  export type CitaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Citas.
     */
    data: CitaCreateManyInput | CitaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cita createManyAndReturn
   */
  export type CitaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * The data used to create many Citas.
     */
    data: CitaCreateManyInput | CitaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cita update
   */
  export type CitaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The data needed to update a Cita.
     */
    data: XOR<CitaUpdateInput, CitaUncheckedUpdateInput>
    /**
     * Choose, which Cita to update.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita updateMany
   */
  export type CitaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Citas.
     */
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyInput>
    /**
     * Filter which Citas to update
     */
    where?: CitaWhereInput
    /**
     * Limit how many Citas to update.
     */
    limit?: number
  }

  /**
   * Cita updateManyAndReturn
   */
  export type CitaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * The data used to update Citas.
     */
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyInput>
    /**
     * Filter which Citas to update
     */
    where?: CitaWhereInput
    /**
     * Limit how many Citas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cita upsert
   */
  export type CitaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The filter to search for the Cita to update in case it exists.
     */
    where: CitaWhereUniqueInput
    /**
     * In case the Cita found by the `where` argument doesn't exist, create a new Cita with this data.
     */
    create: XOR<CitaCreateInput, CitaUncheckedCreateInput>
    /**
     * In case the Cita was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CitaUpdateInput, CitaUncheckedUpdateInput>
  }

  /**
   * Cita delete
   */
  export type CitaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter which Cita to delete.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita deleteMany
   */
  export type CitaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Citas to delete
     */
    where?: CitaWhereInput
    /**
     * Limit how many Citas to delete.
     */
    limit?: number
  }

  /**
   * Cita without action
   */
  export type CitaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PacienteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    fecha_nacimiento: 'fecha_nacimiento',
    genero: 'genero',
    direccion: 'direccion',
    telefono: 'telefono',
    email: 'email',
    documento_identidad: 'documento_identidad',
    created_at: 'created_at',
    updated_at: 'updated_at',
    apellido: 'apellido'
  };

  export type PacienteScalarFieldEnum = (typeof PacienteScalarFieldEnum)[keyof typeof PacienteScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    email: 'email',
    telefono: 'telefono',
    created_at: 'created_at',
    updated_at: 'updated_at',
    rol: 'rol'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ConsultorioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ConsultorioScalarFieldEnum = (typeof ConsultorioScalarFieldEnum)[keyof typeof ConsultorioScalarFieldEnum]


  export const PrecioConsultorioScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    concepto: 'concepto',
    consultorio_id: 'consultorio_id',
    precio: 'precio'
  };

  export type PrecioConsultorioScalarFieldEnum = (typeof PrecioConsultorioScalarFieldEnum)[keyof typeof PrecioConsultorioScalarFieldEnum]


  export const CobroScalarFieldEnum: {
    id: 'id',
    fecha_cobro: 'fecha_cobro',
    monto_total: 'monto_total',
    notas: 'notas',
    created_at: 'created_at',
    updated_at: 'updated_at',
    paciente_id: 'paciente_id',
    usuario_id: 'usuario_id',
    estado: 'estado',
    metodo_pago: 'metodo_pago'
  };

  export type CobroScalarFieldEnum = (typeof CobroScalarFieldEnum)[keyof typeof CobroScalarFieldEnum]


  export const CobroConceptoScalarFieldEnum: {
    id: 'id',
    cantidad: 'cantidad',
    subtotal: 'subtotal',
    created_at: 'created_at',
    updated_at: 'updated_at',
    cobro_id: 'cobro_id',
    consultorio_id: 'consultorio_id',
    precio_unitario: 'precio_unitario',
    servicio_id: 'servicio_id'
  };

  export type CobroConceptoScalarFieldEnum = (typeof CobroConceptoScalarFieldEnum)[keyof typeof CobroConceptoScalarFieldEnum]


  export const HistorialCobroScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    cobro_id: 'cobro_id',
    detalles_antes: 'detalles_antes',
    detalles_despues: 'detalles_despues',
    tipo_cambio: 'tipo_cambio',
    usuario_id: 'usuario_id'
  };

  export type HistorialCobroScalarFieldEnum = (typeof HistorialCobroScalarFieldEnum)[keyof typeof HistorialCobroScalarFieldEnum]


  export const ServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    precio_base: 'precio_base',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServicioScalarFieldEnum = (typeof ServicioScalarFieldEnum)[keyof typeof ServicioScalarFieldEnum]


  export const MetodoPagoCobroScalarFieldEnum: {
    id: 'id',
    cobro_id: 'cobro_id',
    metodo_pago: 'metodo_pago',
    monto: 'monto',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type MetodoPagoCobroScalarFieldEnum = (typeof MetodoPagoCobroScalarFieldEnum)[keyof typeof MetodoPagoCobroScalarFieldEnum]


  export const CitaScalarFieldEnum: {
    id: 'id',
    paciente_id: 'paciente_id',
    usuario_id: 'usuario_id',
    consultorio_id: 'consultorio_id',
    fecha_inicio: 'fecha_inicio',
    fecha_fin: 'fecha_fin',
    titulo: 'titulo',
    descripcion: 'descripcion',
    estado: 'estado',
    color: 'color',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CitaScalarFieldEnum = (typeof CitaScalarFieldEnum)[keyof typeof CitaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Rol'
   */
  export type EnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol'>
    


  /**
   * Reference to a field of type 'Rol[]'
   */
  export type ListEnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'EstadoCobro'
   */
  export type EnumEstadoCobroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCobro'>
    


  /**
   * Reference to a field of type 'EstadoCobro[]'
   */
  export type ListEnumEstadoCobroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCobro[]'>
    


  /**
   * Reference to a field of type 'MetodoPago'
   */
  export type EnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago'>
    


  /**
   * Reference to a field of type 'MetodoPago[]'
   */
  export type ListEnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'TipoCambio'
   */
  export type EnumTipoCambioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCambio'>
    


  /**
   * Reference to a field of type 'TipoCambio[]'
   */
  export type ListEnumTipoCambioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCambio[]'>
    


  /**
   * Reference to a field of type 'EstadoCita'
   */
  export type EnumEstadoCitaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCita'>
    


  /**
   * Reference to a field of type 'EstadoCita[]'
   */
  export type ListEnumEstadoCitaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCita[]'>
    
  /**
   * Deep Input Types
   */


  export type PacienteWhereInput = {
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    id?: StringFilter<"Paciente"> | string
    nombre?: StringFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringFilter<"Paciente"> | string
    email?: StringFilter<"Paciente"> | string
    documento_identidad?: StringNullableFilter<"Paciente"> | string | null
    created_at?: DateTimeFilter<"Paciente"> | Date | string
    updated_at?: DateTimeFilter<"Paciente"> | Date | string
    apellido?: StringFilter<"Paciente"> | string
    cobros?: CobroListRelationFilter
    citas?: CitaListRelationFilter
  }

  export type PacienteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
    cobros?: CobroOrderByRelationAggregateInput
    citas?: CitaOrderByRelationAggregateInput
  }

  export type PacienteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    nombre?: StringFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringFilter<"Paciente"> | string
    email?: StringFilter<"Paciente"> | string
    documento_identidad?: StringNullableFilter<"Paciente"> | string | null
    created_at?: DateTimeFilter<"Paciente"> | Date | string
    updated_at?: DateTimeFilter<"Paciente"> | Date | string
    apellido?: StringFilter<"Paciente"> | string
    cobros?: CobroListRelationFilter
    citas?: CitaListRelationFilter
  }, "id">

  export type PacienteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
    _count?: PacienteCountOrderByAggregateInput
    _max?: PacienteMaxOrderByAggregateInput
    _min?: PacienteMinOrderByAggregateInput
  }

  export type PacienteScalarWhereWithAggregatesInput = {
    AND?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    OR?: PacienteScalarWhereWithAggregatesInput[]
    NOT?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Paciente"> | string
    nombre?: StringWithAggregatesFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    genero?: StringWithAggregatesFilter<"Paciente"> | string
    direccion?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    telefono?: StringWithAggregatesFilter<"Paciente"> | string
    email?: StringWithAggregatesFilter<"Paciente"> | string
    documento_identidad?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    apellido?: StringWithAggregatesFilter<"Paciente"> | string
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    telefono?: StringFilter<"Usuario"> | string
    created_at?: DateTimeFilter<"Usuario"> | Date | string
    updated_at?: DateTimeFilter<"Usuario"> | Date | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    cobros?: CobroListRelationFilter
    historial?: HistorialCobroListRelationFilter
    citas?: CitaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    cobros?: CobroOrderByRelationAggregateInput
    historial?: HistorialCobroOrderByRelationAggregateInput
    citas?: CitaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    telefono?: StringFilter<"Usuario"> | string
    created_at?: DateTimeFilter<"Usuario"> | Date | string
    updated_at?: DateTimeFilter<"Usuario"> | Date | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    cobros?: CobroListRelationFilter
    historial?: HistorialCobroListRelationFilter
    citas?: CitaListRelationFilter
  }, "id">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    telefono?: StringWithAggregatesFilter<"Usuario"> | string
    created_at?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    rol?: EnumRolWithAggregatesFilter<"Usuario"> | $Enums.Rol
  }

  export type ConsultorioWhereInput = {
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    id?: StringFilter<"Consultorio"> | string
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringFilter<"Consultorio"> | string
    created_at?: DateTimeFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeFilter<"Consultorio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
    precios?: PrecioConsultorioListRelationFilter
    citas?: CitaListRelationFilter
  }

  export type ConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    conceptos?: CobroConceptoOrderByRelationAggregateInput
    precios?: PrecioConsultorioOrderByRelationAggregateInput
    citas?: CitaOrderByRelationAggregateInput
  }

  export type ConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringFilter<"Consultorio"> | string
    created_at?: DateTimeFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeFilter<"Consultorio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
    precios?: PrecioConsultorioListRelationFilter
    citas?: CitaListRelationFilter
  }, "id">

  export type ConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ConsultorioCountOrderByAggregateInput
    _max?: ConsultorioMaxOrderByAggregateInput
    _min?: ConsultorioMinOrderByAggregateInput
  }

  export type ConsultorioScalarWhereWithAggregatesInput = {
    AND?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    OR?: ConsultorioScalarWhereWithAggregatesInput[]
    NOT?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Consultorio"> | string
    nombre?: StringWithAggregatesFilter<"Consultorio"> | string
    direccion?: StringWithAggregatesFilter<"Consultorio"> | string
    created_at?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
  }

  export type PrecioConsultorioWhereInput = {
    AND?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    OR?: PrecioConsultorioWhereInput[]
    NOT?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    id?: StringFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }

  export type PrecioConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
    consultorio?: ConsultorioOrderByWithRelationInput
  }

  export type PrecioConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    OR?: PrecioConsultorioWhereInput[]
    NOT?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }, "id">

  export type PrecioConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
    _count?: PrecioConsultorioCountOrderByAggregateInput
    _avg?: PrecioConsultorioAvgOrderByAggregateInput
    _max?: PrecioConsultorioMaxOrderByAggregateInput
    _min?: PrecioConsultorioMinOrderByAggregateInput
    _sum?: PrecioConsultorioSumOrderByAggregateInput
  }

  export type PrecioConsultorioScalarWhereWithAggregatesInput = {
    AND?: PrecioConsultorioScalarWhereWithAggregatesInput | PrecioConsultorioScalarWhereWithAggregatesInput[]
    OR?: PrecioConsultorioScalarWhereWithAggregatesInput[]
    NOT?: PrecioConsultorioScalarWhereWithAggregatesInput | PrecioConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeWithAggregatesFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    precio?: FloatWithAggregatesFilter<"PrecioConsultorio"> | number
  }

  export type CobroWhereInput = {
    AND?: CobroWhereInput | CobroWhereInput[]
    OR?: CobroWhereInput[]
    NOT?: CobroWhereInput | CobroWhereInput[]
    id?: StringFilter<"Cobro"> | string
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
    conceptos?: CobroConceptoListRelationFilter
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    historial?: HistorialCobroListRelationFilter
    metodos_pago?: MetodoPagoCobroListRelationFilter
  }

  export type CobroOrderByWithRelationInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrderInput | SortOrder
    conceptos?: CobroConceptoOrderByRelationAggregateInput
    paciente?: PacienteOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
    historial?: HistorialCobroOrderByRelationAggregateInput
    metodos_pago?: MetodoPagoCobroOrderByRelationAggregateInput
  }

  export type CobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CobroWhereInput | CobroWhereInput[]
    OR?: CobroWhereInput[]
    NOT?: CobroWhereInput | CobroWhereInput[]
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
    conceptos?: CobroConceptoListRelationFilter
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    historial?: HistorialCobroListRelationFilter
    metodos_pago?: MetodoPagoCobroListRelationFilter
  }, "id">

  export type CobroOrderByWithAggregationInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrderInput | SortOrder
    _count?: CobroCountOrderByAggregateInput
    _avg?: CobroAvgOrderByAggregateInput
    _max?: CobroMaxOrderByAggregateInput
    _min?: CobroMinOrderByAggregateInput
    _sum?: CobroSumOrderByAggregateInput
  }

  export type CobroScalarWhereWithAggregatesInput = {
    AND?: CobroScalarWhereWithAggregatesInput | CobroScalarWhereWithAggregatesInput[]
    OR?: CobroScalarWhereWithAggregatesInput[]
    NOT?: CobroScalarWhereWithAggregatesInput | CobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cobro"> | string
    fecha_cobro?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    monto_total?: FloatWithAggregatesFilter<"Cobro"> | number
    notas?: StringNullableWithAggregatesFilter<"Cobro"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    paciente_id?: StringWithAggregatesFilter<"Cobro"> | string
    usuario_id?: StringWithAggregatesFilter<"Cobro"> | string
    estado?: EnumEstadoCobroWithAggregatesFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableWithAggregatesFilter<"Cobro"> | $Enums.MetodoPago | null
  }

  export type CobroConceptoWhereInput = {
    AND?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    OR?: CobroConceptoWhereInput[]
    NOT?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    id?: StringFilter<"CobroConcepto"> | string
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    servicio?: XOR<ServicioScalarRelationFilter, ServicioWhereInput>
  }

  export type CobroConceptoOrderByWithRelationInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
    cobro?: CobroOrderByWithRelationInput
    consultorio?: ConsultorioOrderByWithRelationInput
    servicio?: ServicioOrderByWithRelationInput
  }

  export type CobroConceptoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    OR?: CobroConceptoWhereInput[]
    NOT?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    servicio?: XOR<ServicioScalarRelationFilter, ServicioWhereInput>
  }, "id">

  export type CobroConceptoOrderByWithAggregationInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
    _count?: CobroConceptoCountOrderByAggregateInput
    _avg?: CobroConceptoAvgOrderByAggregateInput
    _max?: CobroConceptoMaxOrderByAggregateInput
    _min?: CobroConceptoMinOrderByAggregateInput
    _sum?: CobroConceptoSumOrderByAggregateInput
  }

  export type CobroConceptoScalarWhereWithAggregatesInput = {
    AND?: CobroConceptoScalarWhereWithAggregatesInput | CobroConceptoScalarWhereWithAggregatesInput[]
    OR?: CobroConceptoScalarWhereWithAggregatesInput[]
    NOT?: CobroConceptoScalarWhereWithAggregatesInput | CobroConceptoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    cantidad?: IntWithAggregatesFilter<"CobroConcepto"> | number
    subtotal?: FloatWithAggregatesFilter<"CobroConcepto"> | number
    created_at?: DateTimeWithAggregatesFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    consultorio_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    precio_unitario?: FloatWithAggregatesFilter<"CobroConcepto"> | number
    servicio_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
  }

  export type HistorialCobroWhereInput = {
    AND?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    OR?: HistorialCobroWhereInput[]
    NOT?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    id?: StringFilter<"HistorialCobro"> | string
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: JsonNullableFilter<"HistorialCobro">
    detalles_despues?: JsonFilter<"HistorialCobro">
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type HistorialCobroOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrderInput | SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
    cobro?: CobroOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type HistorialCobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    OR?: HistorialCobroWhereInput[]
    NOT?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: JsonNullableFilter<"HistorialCobro">
    detalles_despues?: JsonFilter<"HistorialCobro">
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type HistorialCobroOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrderInput | SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
    _count?: HistorialCobroCountOrderByAggregateInput
    _max?: HistorialCobroMaxOrderByAggregateInput
    _min?: HistorialCobroMinOrderByAggregateInput
  }

  export type HistorialCobroScalarWhereWithAggregatesInput = {
    AND?: HistorialCobroScalarWhereWithAggregatesInput | HistorialCobroScalarWhereWithAggregatesInput[]
    OR?: HistorialCobroScalarWhereWithAggregatesInput[]
    NOT?: HistorialCobroScalarWhereWithAggregatesInput | HistorialCobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HistorialCobro"> | string
    created_at?: DateTimeWithAggregatesFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringWithAggregatesFilter<"HistorialCobro"> | string
    detalles_antes?: JsonNullableWithAggregatesFilter<"HistorialCobro">
    detalles_despues?: JsonWithAggregatesFilter<"HistorialCobro">
    tipo_cambio?: EnumTipoCambioWithAggregatesFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringWithAggregatesFilter<"HistorialCobro"> | string
  }

  export type ServicioWhereInput = {
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    id?: StringFilter<"Servicio"> | string
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio_base?: FloatFilter<"Servicio"> | number
    created_at?: DateTimeFilter<"Servicio"> | Date | string
    updated_at?: DateTimeFilter<"Servicio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
  }

  export type ServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    conceptos?: CobroConceptoOrderByRelationAggregateInput
  }

  export type ServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio_base?: FloatFilter<"Servicio"> | number
    created_at?: DateTimeFilter<"Servicio"> | Date | string
    updated_at?: DateTimeFilter<"Servicio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
  }, "id">

  export type ServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ServicioCountOrderByAggregateInput
    _avg?: ServicioAvgOrderByAggregateInput
    _max?: ServicioMaxOrderByAggregateInput
    _min?: ServicioMinOrderByAggregateInput
    _sum?: ServicioSumOrderByAggregateInput
  }

  export type ServicioScalarWhereWithAggregatesInput = {
    AND?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    OR?: ServicioScalarWhereWithAggregatesInput[]
    NOT?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Servicio"> | string
    nombre?: StringWithAggregatesFilter<"Servicio"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Servicio"> | string | null
    precio_base?: FloatWithAggregatesFilter<"Servicio"> | number
    created_at?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
  }

  export type MetodoPagoCobroWhereInput = {
    AND?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    OR?: MetodoPagoCobroWhereInput[]
    NOT?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    id?: StringFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
  }

  export type MetodoPagoCobroOrderByWithRelationInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro?: CobroOrderByWithRelationInput
  }

  export type MetodoPagoCobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    OR?: MetodoPagoCobroWhereInput[]
    NOT?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
  }, "id">

  export type MetodoPagoCobroOrderByWithAggregationInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: MetodoPagoCobroCountOrderByAggregateInput
    _avg?: MetodoPagoCobroAvgOrderByAggregateInput
    _max?: MetodoPagoCobroMaxOrderByAggregateInput
    _min?: MetodoPagoCobroMinOrderByAggregateInput
    _sum?: MetodoPagoCobroSumOrderByAggregateInput
  }

  export type MetodoPagoCobroScalarWhereWithAggregatesInput = {
    AND?: MetodoPagoCobroScalarWhereWithAggregatesInput | MetodoPagoCobroScalarWhereWithAggregatesInput[]
    OR?: MetodoPagoCobroScalarWhereWithAggregatesInput[]
    NOT?: MetodoPagoCobroScalarWhereWithAggregatesInput | MetodoPagoCobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringWithAggregatesFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoWithAggregatesFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatWithAggregatesFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeWithAggregatesFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"MetodoPagoCobro"> | Date | string
  }

  export type CitaWhereInput = {
    AND?: CitaWhereInput | CitaWhereInput[]
    OR?: CitaWhereInput[]
    NOT?: CitaWhereInput | CitaWhereInput[]
    id?: StringFilter<"Cita"> | string
    paciente_id?: StringFilter<"Cita"> | string
    usuario_id?: StringFilter<"Cita"> | string
    consultorio_id?: StringFilter<"Cita"> | string
    fecha_inicio?: DateTimeFilter<"Cita"> | Date | string
    fecha_fin?: DateTimeFilter<"Cita"> | Date | string
    titulo?: StringFilter<"Cita"> | string
    descripcion?: StringNullableFilter<"Cita"> | string | null
    estado?: EnumEstadoCitaFilter<"Cita"> | $Enums.EstadoCita
    color?: StringNullableFilter<"Cita"> | string | null
    created_at?: DateTimeFilter<"Cita"> | Date | string
    updated_at?: DateTimeFilter<"Cita"> | Date | string
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }

  export type CitaOrderByWithRelationInput = {
    id?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    fecha_inicio?: SortOrder
    fecha_fin?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente?: PacienteOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
    consultorio?: ConsultorioOrderByWithRelationInput
  }

  export type CitaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CitaWhereInput | CitaWhereInput[]
    OR?: CitaWhereInput[]
    NOT?: CitaWhereInput | CitaWhereInput[]
    paciente_id?: StringFilter<"Cita"> | string
    usuario_id?: StringFilter<"Cita"> | string
    consultorio_id?: StringFilter<"Cita"> | string
    fecha_inicio?: DateTimeFilter<"Cita"> | Date | string
    fecha_fin?: DateTimeFilter<"Cita"> | Date | string
    titulo?: StringFilter<"Cita"> | string
    descripcion?: StringNullableFilter<"Cita"> | string | null
    estado?: EnumEstadoCitaFilter<"Cita"> | $Enums.EstadoCita
    color?: StringNullableFilter<"Cita"> | string | null
    created_at?: DateTimeFilter<"Cita"> | Date | string
    updated_at?: DateTimeFilter<"Cita"> | Date | string
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }, "id">

  export type CitaOrderByWithAggregationInput = {
    id?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    fecha_inicio?: SortOrder
    fecha_fin?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CitaCountOrderByAggregateInput
    _max?: CitaMaxOrderByAggregateInput
    _min?: CitaMinOrderByAggregateInput
  }

  export type CitaScalarWhereWithAggregatesInput = {
    AND?: CitaScalarWhereWithAggregatesInput | CitaScalarWhereWithAggregatesInput[]
    OR?: CitaScalarWhereWithAggregatesInput[]
    NOT?: CitaScalarWhereWithAggregatesInput | CitaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cita"> | string
    paciente_id?: StringWithAggregatesFilter<"Cita"> | string
    usuario_id?: StringWithAggregatesFilter<"Cita"> | string
    consultorio_id?: StringWithAggregatesFilter<"Cita"> | string
    fecha_inicio?: DateTimeWithAggregatesFilter<"Cita"> | Date | string
    fecha_fin?: DateTimeWithAggregatesFilter<"Cita"> | Date | string
    titulo?: StringWithAggregatesFilter<"Cita"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Cita"> | string | null
    estado?: EnumEstadoCitaWithAggregatesFilter<"Cita"> | $Enums.EstadoCita
    color?: StringNullableWithAggregatesFilter<"Cita"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Cita"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Cita"> | Date | string
  }

  export type PacienteCreateInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroCreateNestedManyWithoutPacienteInput
    citas?: CitaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroUncheckedCreateNestedManyWithoutPacienteInput
    citas?: CitaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUpdateManyWithoutPacienteNestedInput
    citas?: CitaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUncheckedUpdateManyWithoutPacienteNestedInput
    citas?: CitaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteCreateManyInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
  }

  export type PacienteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type PacienteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
    citas?: CitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
    citas?: CitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
  }

  export type ConsultorioCreateInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
    citas?: CitaCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
    citas?: CitaUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioCreateManyInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrecioConsultorioCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
    consultorio: ConsultorioCreateNestedOneWithoutPreciosInput
  }

  export type PrecioConsultorioUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    consultorio_id: string
    precio: number
  }

  export type PrecioConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    consultorio?: ConsultorioUpdateOneRequiredWithoutPreciosNestedInput
  }

  export type PrecioConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    consultorio_id: string
    precio: number
  }

  export type PrecioConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroCreateInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroCreateManyInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type CobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type CobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type CobroConceptoCreateInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoCreateManyInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroConceptoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroCreateInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    cobro: CobroCreateNestedOneWithoutHistorialInput
    usuario: UsuarioCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    cobro?: CobroUpdateOneRequiredWithoutHistorialNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroCreateManyInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type HistorialCobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type ServicioCreateInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroCreateInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro: CobroCreateNestedOneWithoutMetodos_pagoInput
  }

  export type MetodoPagoCobroUncheckedCreateInput = {
    id?: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro?: CobroUpdateOneRequiredWithoutMetodos_pagoNestedInput
  }

  export type MetodoPagoCobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroCreateManyInput = {
    id?: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaCreateInput = {
    id?: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente: PacienteCreateNestedOneWithoutCitasInput
    usuario: UsuarioCreateNestedOneWithoutCitasInput
    consultorio: ConsultorioCreateNestedOneWithoutCitasInput
  }

  export type CitaUncheckedCreateInput = {
    id?: string
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CitaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutCitasNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type CitaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaCreateManyInput = {
    id?: string
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CitaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CobroListRelationFilter = {
    every?: CobroWhereInput
    some?: CobroWhereInput
    none?: CobroWhereInput
  }

  export type CitaListRelationFilter = {
    every?: CitaWhereInput
    some?: CitaWhereInput
    none?: CitaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CitaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PacienteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type PacienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type PacienteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type HistorialCobroListRelationFilter = {
    every?: HistorialCobroWhereInput
    some?: HistorialCobroWhereInput
    none?: HistorialCobroWhereInput
  }

  export type HistorialCobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
  }

  export type EnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type CobroConceptoListRelationFilter = {
    every?: CobroConceptoWhereInput
    some?: CobroConceptoWhereInput
    none?: CobroConceptoWhereInput
  }

  export type PrecioConsultorioListRelationFilter = {
    every?: PrecioConsultorioWhereInput
    some?: PrecioConsultorioWhereInput
    none?: PrecioConsultorioWhereInput
  }

  export type CobroConceptoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrecioConsultorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ConsultorioScalarRelationFilter = {
    is?: ConsultorioWhereInput
    isNot?: ConsultorioWhereInput
  }

  export type PrecioConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioAvgOrderByAggregateInput = {
    precio?: SortOrder
  }

  export type PrecioConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioSumOrderByAggregateInput = {
    precio?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumEstadoCobroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCobroFilter<$PrismaModel> | $Enums.EstadoCobro
  }

  export type EnumMetodoPagoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMetodoPagoNullableFilter<$PrismaModel> | $Enums.MetodoPago | null
  }

  export type PacienteScalarRelationFilter = {
    is?: PacienteWhereInput
    isNot?: PacienteWhereInput
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type MetodoPagoCobroListRelationFilter = {
    every?: MetodoPagoCobroWhereInput
    some?: MetodoPagoCobroWhereInput
    none?: MetodoPagoCobroWhereInput
  }

  export type MetodoPagoCobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CobroCountOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroAvgOrderByAggregateInput = {
    monto_total?: SortOrder
  }

  export type CobroMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroMinOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroSumOrderByAggregateInput = {
    monto_total?: SortOrder
  }

  export type EnumEstadoCobroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCobro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCobroFilter<$PrismaModel>
    _max?: NestedEnumEstadoCobroFilter<$PrismaModel>
  }

  export type EnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CobroScalarRelationFilter = {
    is?: CobroWhereInput
    isNot?: CobroWhereInput
  }

  export type ServicioScalarRelationFilter = {
    is?: ServicioWhereInput
    isNot?: ServicioWhereInput
  }

  export type CobroConceptoCountOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoAvgOrderByAggregateInput = {
    cantidad?: SortOrder
    subtotal?: SortOrder
    precio_unitario?: SortOrder
  }

  export type CobroConceptoMaxOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoMinOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoSumOrderByAggregateInput = {
    cantidad?: SortOrder
    subtotal?: SortOrder
    precio_unitario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }

  export type HistorialCobroCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }

  export type HistorialCobroMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }

  export type HistorialCobroMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type ServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioAvgOrderByAggregateInput = {
    precio_base?: SortOrder
  }

  export type ServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioSumOrderByAggregateInput = {
    precio_base?: SortOrder
  }

  export type EnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type MetodoPagoCobroCountOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroAvgOrderByAggregateInput = {
    monto?: SortOrder
  }

  export type MetodoPagoCobroMaxOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroMinOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroSumOrderByAggregateInput = {
    monto?: SortOrder
  }

  export type EnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type EnumEstadoCitaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCitaFilter<$PrismaModel> | $Enums.EstadoCita
  }

  export type CitaCountOrderByAggregateInput = {
    id?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    fecha_inicio?: SortOrder
    fecha_fin?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    color?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CitaMaxOrderByAggregateInput = {
    id?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    fecha_inicio?: SortOrder
    fecha_fin?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    color?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CitaMinOrderByAggregateInput = {
    id?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    fecha_inicio?: SortOrder
    fecha_fin?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    color?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumEstadoCitaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCita
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCitaFilter<$PrismaModel>
    _max?: NestedEnumEstadoCitaFilter<$PrismaModel>
  }

  export type CobroCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type CitaCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput> | CitaCreateWithoutPacienteInput[] | CitaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutPacienteInput | CitaCreateOrConnectWithoutPacienteInput[]
    createMany?: CitaCreateManyPacienteInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CobroUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type CitaUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput> | CitaCreateWithoutPacienteInput[] | CitaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutPacienteInput | CitaCreateOrConnectWithoutPacienteInput[]
    createMany?: CitaCreateManyPacienteInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CobroUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutPacienteInput | CobroUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutPacienteInput | CobroUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutPacienteInput | CobroUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type CitaUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput> | CitaCreateWithoutPacienteInput[] | CitaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutPacienteInput | CitaCreateOrConnectWithoutPacienteInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutPacienteInput | CitaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CitaCreateManyPacienteInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutPacienteInput | CitaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutPacienteInput | CitaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CobroUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutPacienteInput | CobroUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutPacienteInput | CobroUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutPacienteInput | CobroUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type CitaUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput> | CitaCreateWithoutPacienteInput[] | CitaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutPacienteInput | CitaCreateOrConnectWithoutPacienteInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutPacienteInput | CitaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CitaCreateManyPacienteInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutPacienteInput | CitaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutPacienteInput | CitaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CobroCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type HistorialCobroCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type CitaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput> | CitaCreateWithoutUsuarioInput[] | CitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutUsuarioInput | CitaCreateOrConnectWithoutUsuarioInput[]
    createMany?: CitaCreateManyUsuarioInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CobroUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type CitaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput> | CitaCreateWithoutUsuarioInput[] | CitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutUsuarioInput | CitaCreateOrConnectWithoutUsuarioInput[]
    createMany?: CitaCreateManyUsuarioInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type EnumRolFieldUpdateOperationsInput = {
    set?: $Enums.Rol
  }

  export type CobroUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutUsuarioInput | CobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutUsuarioInput | CobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutUsuarioInput | CobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type HistorialCobroUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutUsuarioInput | HistorialCobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type CitaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput> | CitaCreateWithoutUsuarioInput[] | CitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutUsuarioInput | CitaCreateOrConnectWithoutUsuarioInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutUsuarioInput | CitaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CitaCreateManyUsuarioInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutUsuarioInput | CitaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutUsuarioInput | CitaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CobroUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutUsuarioInput | CobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutUsuarioInput | CobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutUsuarioInput | CobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutUsuarioInput | HistorialCobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type CitaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput> | CitaCreateWithoutUsuarioInput[] | CitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutUsuarioInput | CitaCreateOrConnectWithoutUsuarioInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutUsuarioInput | CitaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CitaCreateManyUsuarioInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutUsuarioInput | CitaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutUsuarioInput | CitaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CobroConceptoCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PrecioConsultorioCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
  }

  export type CitaCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput> | CitaCreateWithoutConsultorioInput[] | CitaUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutConsultorioInput | CitaCreateOrConnectWithoutConsultorioInput[]
    createMany?: CitaCreateManyConsultorioInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
  }

  export type CitaUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput> | CitaCreateWithoutConsultorioInput[] | CitaUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutConsultorioInput | CitaCreateOrConnectWithoutConsultorioInput[]
    createMany?: CitaCreateManyConsultorioInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CobroConceptoUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutConsultorioInput | CobroConceptoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PrecioConsultorioUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    upsert?: PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    set?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    disconnect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    delete?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    update?: PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput | PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
  }

  export type CitaUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput> | CitaCreateWithoutConsultorioInput[] | CitaUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutConsultorioInput | CitaCreateOrConnectWithoutConsultorioInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutConsultorioInput | CitaUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CitaCreateManyConsultorioInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutConsultorioInput | CitaUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutConsultorioInput | CitaUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutConsultorioInput | CobroConceptoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    upsert?: PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    set?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    disconnect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    delete?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    update?: PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput | PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
  }

  export type CitaUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput> | CitaCreateWithoutConsultorioInput[] | CitaUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutConsultorioInput | CitaCreateOrConnectWithoutConsultorioInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutConsultorioInput | CitaUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CitaCreateManyConsultorioInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutConsultorioInput | CitaUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutConsultorioInput | CitaUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type ConsultorioCreateNestedOneWithoutPreciosInput = {
    create?: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutPreciosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConsultorioUpdateOneRequiredWithoutPreciosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutPreciosInput
    upsert?: ConsultorioUpsertWithoutPreciosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutPreciosInput, ConsultorioUpdateWithoutPreciosInput>, ConsultorioUncheckedUpdateWithoutPreciosInput>
  }

  export type CobroConceptoCreateNestedManyWithoutCobroInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PacienteCreateNestedOneWithoutCobrosInput = {
    create?: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCobrosInput
    connect?: PacienteWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutCobrosInput = {
    create?: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCobrosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type HistorialCobroCreateNestedManyWithoutCobroInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type MetodoPagoCobroCreateNestedManyWithoutCobroInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type HistorialCobroUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
  }

  export type EnumEstadoCobroFieldUpdateOperationsInput = {
    set?: $Enums.EstadoCobro
  }

  export type NullableEnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago | null
  }

  export type CobroConceptoUpdateManyWithoutCobroNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutCobroInput | CobroConceptoUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutCobroInput | CobroConceptoUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutCobroInput | CobroConceptoUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PacienteUpdateOneRequiredWithoutCobrosNestedInput = {
    create?: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCobrosInput
    upsert?: PacienteUpsertWithoutCobrosInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutCobrosInput, PacienteUpdateWithoutCobrosInput>, PacienteUncheckedUpdateWithoutCobrosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutCobrosNestedInput = {
    create?: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCobrosInput
    upsert?: UsuarioUpsertWithoutCobrosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCobrosInput, UsuarioUpdateWithoutCobrosInput>, UsuarioUncheckedUpdateWithoutCobrosInput>
  }

  export type HistorialCobroUpdateManyWithoutCobroNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutCobroInput | HistorialCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutCobroInput | HistorialCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutCobroInput | HistorialCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type MetodoPagoCobroUpdateManyWithoutCobroNestedInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    upsert?: MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    set?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    disconnect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    delete?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    update?: MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput | MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutCobroInput | CobroConceptoUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutCobroInput | CobroConceptoUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutCobroInput | CobroConceptoUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutCobroInput | HistorialCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutCobroInput | HistorialCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutCobroInput | HistorialCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    upsert?: MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    set?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    disconnect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    delete?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    update?: MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput | MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
  }

  export type CobroCreateNestedOneWithoutConceptosInput = {
    create?: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: CobroCreateOrConnectWithoutConceptosInput
    connect?: CobroWhereUniqueInput
  }

  export type ConsultorioCreateNestedOneWithoutConceptosInput = {
    create?: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutConceptosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type ServicioCreateNestedOneWithoutConceptosInput = {
    create?: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutConceptosInput
    connect?: ServicioWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CobroUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: CobroCreateOrConnectWithoutConceptosInput
    upsert?: CobroUpsertWithoutConceptosInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutConceptosInput, CobroUpdateWithoutConceptosInput>, CobroUncheckedUpdateWithoutConceptosInput>
  }

  export type ConsultorioUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutConceptosInput
    upsert?: ConsultorioUpsertWithoutConceptosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutConceptosInput, ConsultorioUpdateWithoutConceptosInput>, ConsultorioUncheckedUpdateWithoutConceptosInput>
  }

  export type ServicioUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutConceptosInput
    upsert?: ServicioUpsertWithoutConceptosInput
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutConceptosInput, ServicioUpdateWithoutConceptosInput>, ServicioUncheckedUpdateWithoutConceptosInput>
  }

  export type CobroCreateNestedOneWithoutHistorialInput = {
    create?: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: CobroCreateOrConnectWithoutHistorialInput
    connect?: CobroWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutHistorialInput = {
    create?: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutHistorialInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumTipoCambioFieldUpdateOperationsInput = {
    set?: $Enums.TipoCambio
  }

  export type CobroUpdateOneRequiredWithoutHistorialNestedInput = {
    create?: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: CobroCreateOrConnectWithoutHistorialInput
    upsert?: CobroUpsertWithoutHistorialInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutHistorialInput, CobroUpdateWithoutHistorialInput>, CobroUncheckedUpdateWithoutHistorialInput>
  }

  export type UsuarioUpdateOneRequiredWithoutHistorialNestedInput = {
    create?: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutHistorialInput
    upsert?: UsuarioUpsertWithoutHistorialInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutHistorialInput, UsuarioUpdateWithoutHistorialInput>, UsuarioUncheckedUpdateWithoutHistorialInput>
  }

  export type CobroConceptoCreateNestedManyWithoutServicioInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type CobroConceptoUpdateManyWithoutServicioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutServicioInput | CobroConceptoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutServicioInput | CobroConceptoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutServicioInput | CobroConceptoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutServicioInput | CobroConceptoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutServicioInput | CobroConceptoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutServicioInput | CobroConceptoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type CobroCreateNestedOneWithoutMetodos_pagoInput = {
    create?: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    connectOrCreate?: CobroCreateOrConnectWithoutMetodos_pagoInput
    connect?: CobroWhereUniqueInput
  }

  export type EnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago
  }

  export type CobroUpdateOneRequiredWithoutMetodos_pagoNestedInput = {
    create?: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    connectOrCreate?: CobroCreateOrConnectWithoutMetodos_pagoInput
    upsert?: CobroUpsertWithoutMetodos_pagoInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutMetodos_pagoInput, CobroUpdateWithoutMetodos_pagoInput>, CobroUncheckedUpdateWithoutMetodos_pagoInput>
  }

  export type PacienteCreateNestedOneWithoutCitasInput = {
    create?: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCitasInput
    connect?: PacienteWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutCitasInput = {
    create?: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCitasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ConsultorioCreateNestedOneWithoutCitasInput = {
    create?: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutCitasInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type EnumEstadoCitaFieldUpdateOperationsInput = {
    set?: $Enums.EstadoCita
  }

  export type PacienteUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCitasInput
    upsert?: PacienteUpsertWithoutCitasInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutCitasInput, PacienteUpdateWithoutCitasInput>, PacienteUncheckedUpdateWithoutCitasInput>
  }

  export type UsuarioUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCitasInput
    upsert?: UsuarioUpsertWithoutCitasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCitasInput, UsuarioUpdateWithoutCitasInput>, UsuarioUncheckedUpdateWithoutCitasInput>
  }

  export type ConsultorioUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutCitasInput
    upsert?: ConsultorioUpsertWithoutCitasInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutCitasInput, ConsultorioUpdateWithoutCitasInput>, ConsultorioUncheckedUpdateWithoutCitasInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type NestedEnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumEstadoCobroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCobroFilter<$PrismaModel> | $Enums.EstadoCobro
  }

  export type NestedEnumMetodoPagoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMetodoPagoNullableFilter<$PrismaModel> | $Enums.MetodoPago | null
  }

  export type NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCobro[] | ListEnumEstadoCobroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCobro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCobroFilter<$PrismaModel>
    _max?: NestedEnumEstadoCobroFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type NestedEnumEstadoCitaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCitaFilter<$PrismaModel> | $Enums.EstadoCita
  }

  export type NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCita[] | ListEnumEstadoCitaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCita
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCitaFilter<$PrismaModel>
    _max?: NestedEnumEstadoCitaFilter<$PrismaModel>
  }

  export type CobroCreateWithoutPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput>
  }

  export type CobroCreateManyPacienteInputEnvelope = {
    data: CobroCreateManyPacienteInput | CobroCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type CitaCreateWithoutPacienteInput = {
    id?: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    usuario: UsuarioCreateNestedOneWithoutCitasInput
    consultorio: ConsultorioCreateNestedOneWithoutCitasInput
  }

  export type CitaUncheckedCreateWithoutPacienteInput = {
    id?: string
    usuario_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CitaCreateOrConnectWithoutPacienteInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput>
  }

  export type CitaCreateManyPacienteInputEnvelope = {
    data: CitaCreateManyPacienteInput | CitaCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type CobroUpsertWithWhereUniqueWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    update: XOR<CobroUpdateWithoutPacienteInput, CobroUncheckedUpdateWithoutPacienteInput>
    create: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput>
  }

  export type CobroUpdateWithWhereUniqueWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    data: XOR<CobroUpdateWithoutPacienteInput, CobroUncheckedUpdateWithoutPacienteInput>
  }

  export type CobroUpdateManyWithWhereWithoutPacienteInput = {
    where: CobroScalarWhereInput
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyWithoutPacienteInput>
  }

  export type CobroScalarWhereInput = {
    AND?: CobroScalarWhereInput | CobroScalarWhereInput[]
    OR?: CobroScalarWhereInput[]
    NOT?: CobroScalarWhereInput | CobroScalarWhereInput[]
    id?: StringFilter<"Cobro"> | string
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
  }

  export type CitaUpsertWithWhereUniqueWithoutPacienteInput = {
    where: CitaWhereUniqueInput
    update: XOR<CitaUpdateWithoutPacienteInput, CitaUncheckedUpdateWithoutPacienteInput>
    create: XOR<CitaCreateWithoutPacienteInput, CitaUncheckedCreateWithoutPacienteInput>
  }

  export type CitaUpdateWithWhereUniqueWithoutPacienteInput = {
    where: CitaWhereUniqueInput
    data: XOR<CitaUpdateWithoutPacienteInput, CitaUncheckedUpdateWithoutPacienteInput>
  }

  export type CitaUpdateManyWithWhereWithoutPacienteInput = {
    where: CitaScalarWhereInput
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyWithoutPacienteInput>
  }

  export type CitaScalarWhereInput = {
    AND?: CitaScalarWhereInput | CitaScalarWhereInput[]
    OR?: CitaScalarWhereInput[]
    NOT?: CitaScalarWhereInput | CitaScalarWhereInput[]
    id?: StringFilter<"Cita"> | string
    paciente_id?: StringFilter<"Cita"> | string
    usuario_id?: StringFilter<"Cita"> | string
    consultorio_id?: StringFilter<"Cita"> | string
    fecha_inicio?: DateTimeFilter<"Cita"> | Date | string
    fecha_fin?: DateTimeFilter<"Cita"> | Date | string
    titulo?: StringFilter<"Cita"> | string
    descripcion?: StringNullableFilter<"Cita"> | string | null
    estado?: EnumEstadoCitaFilter<"Cita"> | $Enums.EstadoCita
    color?: StringNullableFilter<"Cita"> | string | null
    created_at?: DateTimeFilter<"Cita"> | Date | string
    updated_at?: DateTimeFilter<"Cita"> | Date | string
  }

  export type CobroCreateWithoutUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput>
  }

  export type CobroCreateManyUsuarioInputEnvelope = {
    data: CobroCreateManyUsuarioInput | CobroCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type HistorialCobroCreateWithoutUsuarioInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    cobro: CobroCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateWithoutUsuarioInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
  }

  export type HistorialCobroCreateOrConnectWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    create: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialCobroCreateManyUsuarioInputEnvelope = {
    data: HistorialCobroCreateManyUsuarioInput | HistorialCobroCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CitaCreateWithoutUsuarioInput = {
    id?: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente: PacienteCreateNestedOneWithoutCitasInput
    consultorio: ConsultorioCreateNestedOneWithoutCitasInput
  }

  export type CitaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    paciente_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CitaCreateOrConnectWithoutUsuarioInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput>
  }

  export type CitaCreateManyUsuarioInputEnvelope = {
    data: CitaCreateManyUsuarioInput | CitaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CobroUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    update: XOR<CobroUpdateWithoutUsuarioInput, CobroUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput>
  }

  export type CobroUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    data: XOR<CobroUpdateWithoutUsuarioInput, CobroUncheckedUpdateWithoutUsuarioInput>
  }

  export type CobroUpdateManyWithWhereWithoutUsuarioInput = {
    where: CobroScalarWhereInput
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    update: XOR<HistorialCobroUpdateWithoutUsuarioInput, HistorialCobroUncheckedUpdateWithoutUsuarioInput>
    create: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    data: XOR<HistorialCobroUpdateWithoutUsuarioInput, HistorialCobroUncheckedUpdateWithoutUsuarioInput>
  }

  export type HistorialCobroUpdateManyWithWhereWithoutUsuarioInput = {
    where: HistorialCobroScalarWhereInput
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type HistorialCobroScalarWhereInput = {
    AND?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
    OR?: HistorialCobroScalarWhereInput[]
    NOT?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
    id?: StringFilter<"HistorialCobro"> | string
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: JsonNullableFilter<"HistorialCobro">
    detalles_despues?: JsonFilter<"HistorialCobro">
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
  }

  export type CitaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CitaWhereUniqueInput
    update: XOR<CitaUpdateWithoutUsuarioInput, CitaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CitaCreateWithoutUsuarioInput, CitaUncheckedCreateWithoutUsuarioInput>
  }

  export type CitaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CitaWhereUniqueInput
    data: XOR<CitaUpdateWithoutUsuarioInput, CitaUncheckedUpdateWithoutUsuarioInput>
  }

  export type CitaUpdateManyWithWhereWithoutUsuarioInput = {
    where: CitaScalarWhereInput
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type CobroConceptoCreateWithoutConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoCreateOrConnectWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput>
  }

  export type CobroConceptoCreateManyConsultorioInputEnvelope = {
    data: CobroConceptoCreateManyConsultorioInput | CobroConceptoCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type PrecioConsultorioCreateWithoutConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type PrecioConsultorioUncheckedCreateWithoutConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type PrecioConsultorioCreateOrConnectWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    create: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput>
  }

  export type PrecioConsultorioCreateManyConsultorioInputEnvelope = {
    data: PrecioConsultorioCreateManyConsultorioInput | PrecioConsultorioCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type CitaCreateWithoutConsultorioInput = {
    id?: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente: PacienteCreateNestedOneWithoutCitasInput
    usuario: UsuarioCreateNestedOneWithoutCitasInput
  }

  export type CitaUncheckedCreateWithoutConsultorioInput = {
    id?: string
    paciente_id: string
    usuario_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CitaCreateOrConnectWithoutConsultorioInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput>
  }

  export type CitaCreateManyConsultorioInputEnvelope = {
    data: CitaCreateManyConsultorioInput | CitaCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutConsultorioInput, CobroConceptoUncheckedUpdateWithoutConsultorioInput>
    create: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutConsultorioInput, CobroConceptoUncheckedUpdateWithoutConsultorioInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutConsultorioInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type CobroConceptoScalarWhereInput = {
    AND?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
    OR?: CobroConceptoScalarWhereInput[]
    NOT?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
    id?: StringFilter<"CobroConcepto"> | string
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
  }

  export type PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    update: XOR<PrecioConsultorioUpdateWithoutConsultorioInput, PrecioConsultorioUncheckedUpdateWithoutConsultorioInput>
    create: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput>
  }

  export type PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    data: XOR<PrecioConsultorioUpdateWithoutConsultorioInput, PrecioConsultorioUncheckedUpdateWithoutConsultorioInput>
  }

  export type PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput = {
    where: PrecioConsultorioScalarWhereInput
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type PrecioConsultorioScalarWhereInput = {
    AND?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
    OR?: PrecioConsultorioScalarWhereInput[]
    NOT?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
    id?: StringFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
  }

  export type CitaUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: CitaWhereUniqueInput
    update: XOR<CitaUpdateWithoutConsultorioInput, CitaUncheckedUpdateWithoutConsultorioInput>
    create: XOR<CitaCreateWithoutConsultorioInput, CitaUncheckedCreateWithoutConsultorioInput>
  }

  export type CitaUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: CitaWhereUniqueInput
    data: XOR<CitaUpdateWithoutConsultorioInput, CitaUncheckedUpdateWithoutConsultorioInput>
  }

  export type CitaUpdateManyWithWhereWithoutConsultorioInput = {
    where: CitaScalarWhereInput
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type ConsultorioCreateWithoutPreciosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    citas?: CitaCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutPreciosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    citas?: CitaUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutPreciosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
  }

  export type ConsultorioUpsertWithoutPreciosInput = {
    update: XOR<ConsultorioUpdateWithoutPreciosInput, ConsultorioUncheckedUpdateWithoutPreciosInput>
    create: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutPreciosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutPreciosInput, ConsultorioUncheckedUpdateWithoutPreciosInput>
  }

  export type ConsultorioUpdateWithoutPreciosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutPreciosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type CobroConceptoCreateWithoutCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoCreateOrConnectWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput>
  }

  export type CobroConceptoCreateManyCobroInputEnvelope = {
    data: CobroConceptoCreateManyCobroInput | CobroConceptoCreateManyCobroInput[]
    skipDuplicates?: boolean
  }

  export type PacienteCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: CitaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: CitaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCobrosInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
  }

  export type UsuarioCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
    citas?: CitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
    citas?: CitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCobrosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
  }

  export type HistorialCobroCreateWithoutCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario: UsuarioCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateWithoutCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroCreateOrConnectWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    create: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput>
  }

  export type HistorialCobroCreateManyCobroInputEnvelope = {
    data: HistorialCobroCreateManyCobroInput | HistorialCobroCreateManyCobroInput[]
    skipDuplicates?: boolean
  }

  export type MetodoPagoCobroCreateWithoutCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUncheckedCreateWithoutCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroCreateOrConnectWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    create: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput>
  }

  export type MetodoPagoCobroCreateManyCobroInputEnvelope = {
    data: MetodoPagoCobroCreateManyCobroInput | MetodoPagoCobroCreateManyCobroInput[]
    skipDuplicates?: boolean
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutCobroInput, CobroConceptoUncheckedUpdateWithoutCobroInput>
    create: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutCobroInput, CobroConceptoUncheckedUpdateWithoutCobroInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutCobroInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutCobroInput>
  }

  export type PacienteUpsertWithoutCobrosInput = {
    update: XOR<PacienteUpdateWithoutCobrosInput, PacienteUncheckedUpdateWithoutCobrosInput>
    create: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutCobrosInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutCobrosInput, PacienteUncheckedUpdateWithoutCobrosInput>
  }

  export type PacienteUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: CitaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: CitaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type UsuarioUpsertWithoutCobrosInput = {
    update: XOR<UsuarioUpdateWithoutCobrosInput, UsuarioUncheckedUpdateWithoutCobrosInput>
    create: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCobrosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCobrosInput, UsuarioUncheckedUpdateWithoutCobrosInput>
  }

  export type UsuarioUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type HistorialCobroUpsertWithWhereUniqueWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    update: XOR<HistorialCobroUpdateWithoutCobroInput, HistorialCobroUncheckedUpdateWithoutCobroInput>
    create: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput>
  }

  export type HistorialCobroUpdateWithWhereUniqueWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    data: XOR<HistorialCobroUpdateWithoutCobroInput, HistorialCobroUncheckedUpdateWithoutCobroInput>
  }

  export type HistorialCobroUpdateManyWithWhereWithoutCobroInput = {
    where: HistorialCobroScalarWhereInput
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyWithoutCobroInput>
  }

  export type MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    update: XOR<MetodoPagoCobroUpdateWithoutCobroInput, MetodoPagoCobroUncheckedUpdateWithoutCobroInput>
    create: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput>
  }

  export type MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    data: XOR<MetodoPagoCobroUpdateWithoutCobroInput, MetodoPagoCobroUncheckedUpdateWithoutCobroInput>
  }

  export type MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput = {
    where: MetodoPagoCobroScalarWhereInput
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyWithoutCobroInput>
  }

  export type MetodoPagoCobroScalarWhereInput = {
    AND?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
    OR?: MetodoPagoCobroScalarWhereInput[]
    NOT?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
    id?: StringFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
  }

  export type CobroCreateWithoutConceptosInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutConceptosInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutConceptosInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
  }

  export type ConsultorioCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
    citas?: CitaCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
    citas?: CitaUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutConceptosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
  }

  export type ServicioCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioUncheckedCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioCreateOrConnectWithoutConceptosInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
  }

  export type CobroUpsertWithoutConceptosInput = {
    update: XOR<CobroUpdateWithoutConceptosInput, CobroUncheckedUpdateWithoutConceptosInput>
    create: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutConceptosInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutConceptosInput, CobroUncheckedUpdateWithoutConceptosInput>
  }

  export type CobroUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type ConsultorioUpsertWithoutConceptosInput = {
    update: XOR<ConsultorioUpdateWithoutConceptosInput, ConsultorioUncheckedUpdateWithoutConceptosInput>
    create: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutConceptosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutConceptosInput, ConsultorioUncheckedUpdateWithoutConceptosInput>
  }

  export type ConsultorioUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ServicioUpsertWithoutConceptosInput = {
    update: XOR<ServicioUpdateWithoutConceptosInput, ServicioUncheckedUpdateWithoutConceptosInput>
    create: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutConceptosInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutConceptosInput, ServicioUncheckedUpdateWithoutConceptosInput>
  }

  export type ServicioUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroCreateWithoutHistorialInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutHistorialInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutHistorialInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
  }

  export type UsuarioCreateWithoutHistorialInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    citas?: CitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutHistorialInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    citas?: CitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutHistorialInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
  }

  export type CobroUpsertWithoutHistorialInput = {
    update: XOR<CobroUpdateWithoutHistorialInput, CobroUncheckedUpdateWithoutHistorialInput>
    create: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutHistorialInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutHistorialInput, CobroUncheckedUpdateWithoutHistorialInput>
  }

  export type CobroUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type UsuarioUpsertWithoutHistorialInput = {
    update: XOR<UsuarioUpdateWithoutHistorialInput, UsuarioUncheckedUpdateWithoutHistorialInput>
    create: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutHistorialInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutHistorialInput, UsuarioUncheckedUpdateWithoutHistorialInput>
  }

  export type UsuarioUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    citas?: CitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CobroConceptoCreateWithoutServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
  }

  export type CobroConceptoCreateOrConnectWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput>
  }

  export type CobroConceptoCreateManyServicioInputEnvelope = {
    data: CobroConceptoCreateManyServicioInput | CobroConceptoCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutServicioInput, CobroConceptoUncheckedUpdateWithoutServicioInput>
    create: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutServicioInput, CobroConceptoUncheckedUpdateWithoutServicioInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutServicioInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutServicioInput>
  }

  export type CobroCreateWithoutMetodos_pagoInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutMetodos_pagoInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutMetodos_pagoInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
  }

  export type CobroUpsertWithoutMetodos_pagoInput = {
    update: XOR<CobroUpdateWithoutMetodos_pagoInput, CobroUncheckedUpdateWithoutMetodos_pagoInput>
    create: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutMetodos_pagoInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutMetodos_pagoInput, CobroUncheckedUpdateWithoutMetodos_pagoInput>
  }

  export type CobroUpdateWithoutMetodos_pagoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutMetodos_pagoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type PacienteCreateWithoutCitasInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCitasInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
  }

  export type UsuarioCreateWithoutCitasInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCitasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
  }

  export type ConsultorioCreateWithoutCitasInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutCitasInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
  }

  export type PacienteUpsertWithoutCitasInput = {
    update: XOR<PacienteUpdateWithoutCitasInput, PacienteUncheckedUpdateWithoutCitasInput>
    create: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutCitasInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutCitasInput, PacienteUncheckedUpdateWithoutCitasInput>
  }

  export type PacienteUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type UsuarioUpsertWithoutCitasInput = {
    update: XOR<UsuarioUpdateWithoutCitasInput, UsuarioUncheckedUpdateWithoutCitasInput>
    create: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCitasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCitasInput, UsuarioUncheckedUpdateWithoutCitasInput>
  }

  export type UsuarioUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ConsultorioUpsertWithoutCitasInput = {
    update: XOR<ConsultorioUpdateWithoutCitasInput, ConsultorioUncheckedUpdateWithoutCitasInput>
    create: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutCitasInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutCitasInput, ConsultorioUncheckedUpdateWithoutCitasInput>
  }

  export type ConsultorioUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type CobroCreateManyPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type CitaCreateManyPacienteInput = {
    id?: string
    usuario_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CobroUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type CitaUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type CitaUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroCreateManyUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type HistorialCobroCreateManyUsuarioInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
  }

  export type CitaCreateManyUsuarioInput = {
    id?: string
    paciente_id: string
    consultorio_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CobroUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type HistorialCobroUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    cobro?: CobroUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type HistorialCobroUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type CitaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutCitasNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type CitaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroConceptoCreateManyConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type PrecioConsultorioCreateManyConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type CitaCreateManyConsultorioInput = {
    id?: string
    paciente_id: string
    usuario_id: string
    fecha_inicio: Date | string
    fecha_fin: Date | string
    titulo: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    color?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CobroConceptoUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrecioConsultorioUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type CitaUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutCitasNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type CitaUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitaUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroConceptoCreateManyCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type HistorialCobroCreateManyCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues: JsonNullValueInput | InputJsonValue
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type MetodoPagoCobroCreateManyCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CobroConceptoUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario?: UsuarioUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableJsonNullValueInput | InputJsonValue
    detalles_despues?: JsonNullValueInput | InputJsonValue
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type MetodoPagoCobroUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroConceptoCreateManyServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
  }

  export type CobroConceptoUpdateWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroConceptoUncheckedUpdateManyWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}