#!/bin/bash

# Script para gestionar respaldos de la base de datos
BACKUP_DIR="/Users/paul/Bravo/backups"
LOG_FILE="$BACKUP_DIR/backup.log"

echo "üóÑÔ∏è  GESTOR DE RESPALDOS - BRAVO SYSTEM"
echo "======================================"

# Funci√≥n para mostrar respaldos disponibles
show_backups() {
    echo ""
    echo "üìÅ RESPALDOS DISPONIBLES:"
    echo "------------------------"
    if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR/*.sql.gz 2>/dev/null)" ]; then
        ls -lh "$BACKUP_DIR"/*.sql.gz | awk '{print $9, $5, $6, $7, $8}' | while read file size date time; do
            filename=$(basename "$file")
            echo "üìÑ $filename ($size) - $date $time"
        done
    else
        echo "‚ùå No hay respaldos disponibles"
    fi
}

# Funci√≥n para crear respaldo manual
create_backup() {
    echo ""
    echo "üîÑ Creando respaldo manual..."
    /Users/paul/Bravo/backup-script.sh
    echo "‚úÖ Respaldo completado"
}

# Funci√≥n para mostrar logs
show_logs() {
    echo ""
    echo "üìã √öLTIMOS LOGS DE RESPALDO:"
    echo "---------------------------"
    if [ -f "$LOG_FILE" ]; then
        tail -20 "$LOG_FILE"
    else
        echo "‚ùå No hay archivo de log disponible"
    fi
}

# Funci√≥n para restaurar respaldo
restore_backup() {
    echo ""
    echo "üîÑ RESTAURAR RESPALDO"
    echo "---------------------"
    
    # Mostrar respaldos disponibles
    echo "Respaldos disponibles:"
    ls -1 "$BACKUP_DIR"/*.sql.gz 2>/dev/null | nl
    
    if [ $? -ne 0 ]; then
        echo "‚ùå No hay respaldos disponibles"
        return
    fi
    
    echo ""
    read -p "Selecciona el n√∫mero del respaldo a restaurar: " backup_num
    
    # Obtener el archivo seleccionado
    backup_file=$(ls -1 "$BACKUP_DIR"/*.sql.gz 2>/dev/null | sed -n "${backup_num}p")
    
    if [ -z "$backup_file" ]; then
        echo "‚ùå N√∫mero de respaldo inv√°lido"
        return
    fi
    
    echo ""
    echo "‚ö†Ô∏è  ADVERTENCIA: Esto sobrescribir√° la base de datos actual"
    read -p "¬øEst√°s seguro? (s√≠/no): " confirm
    
    if [ "$confirm" = "s√≠" ] || [ "$confirm" = "si" ] || [ "$confirm" = "yes" ]; then
        echo "üîÑ Restaurando respaldo: $(basename "$backup_file")"
        
        # Descomprimir y restaurar
        gunzip -c "$backup_file" | psql postgresql://postgres:Garuesgay1808@db.xfcmnlysnptclkgxfeab.supabase.co:5432/postgres
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Respaldo restaurado exitosamente"
        else
            echo "‚ùå Error al restaurar el respaldo"
        fi
    else
        echo "‚ùå Restauraci√≥n cancelada"
    fi
}

# Funci√≥n para verificar estado del cron
check_cron() {
    echo ""
    echo "‚è∞ ESTADO DEL CRON JOB:"
    echo "----------------------"
    
    cron_job=$(crontab -l 2>/dev/null | grep backup-script.sh)
    
    if [ -n "$cron_job" ]; then
        echo "‚úÖ Cron job configurado:"
        echo "   $cron_job"
    else
        echo "‚ùå No hay cron job configurado"
    fi
    
    # Verificar si cron est√° ejecut√°ndose
    if pgrep -x "cron" > /dev/null; then
        echo "‚úÖ Servicio cron activo"
    else
        echo "‚ùå Servicio cron no est√° ejecut√°ndose"
    fi
}

# Men√∫ principal
while true; do
    echo ""
    echo "üîß OPCIONES DISPONIBLES:"
    echo "1. Ver respaldos disponibles"
    echo "2. Crear respaldo manual"
    echo "3. Ver logs de respaldo"
    echo "4. Restaurar respaldo"
    echo "5. Verificar estado del cron"
    echo "6. Salir"
    echo ""
    read -p "Selecciona una opci√≥n (1-6): " choice
    
    case $choice in
        1) show_backups ;;
        2) create_backup ;;
        3) show_logs ;;
        4) restore_backup ;;
        5) check_cron ;;
        6) echo "üëã ¬°Hasta luego!"; exit 0 ;;
        *) echo "‚ùå Opci√≥n inv√°lida" ;;
    esac
done 