
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.PacienteScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  fecha_nacimiento: 'fecha_nacimiento',
  genero: 'genero',
  direccion: 'direccion',
  telefono: 'telefono',
  email: 'email',
  documento_identidad: 'documento_identidad',
  created_at: 'created_at',
  updated_at: 'updated_at',
  apellido: 'apellido'
};

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  email: 'email',
  telefono: 'telefono',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rol: 'rol',
  consultorio_id: 'consultorio_id'
};

exports.Prisma.ConsultorioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  direccion: 'direccion',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PrecioConsultorioScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  concepto: 'concepto',
  consultorio_id: 'consultorio_id',
  precio: 'precio'
};

exports.Prisma.CobroScalarFieldEnum = {
  id: 'id',
  fecha_cobro: 'fecha_cobro',
  monto_total: 'monto_total',
  notas: 'notas',
  created_at: 'created_at',
  updated_at: 'updated_at',
  paciente_id: 'paciente_id',
  usuario_id: 'usuario_id',
  estado: 'estado',
  metodo_pago: 'metodo_pago'
};

exports.Prisma.CobroConceptoScalarFieldEnum = {
  id: 'id',
  cantidad: 'cantidad',
  subtotal: 'subtotal',
  created_at: 'created_at',
  updated_at: 'updated_at',
  cobro_id: 'cobro_id',
  consultorio_id: 'consultorio_id',
  precio_unitario: 'precio_unitario',
  servicio_id: 'servicio_id'
};

exports.Prisma.HistorialCobroScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  cobro_id: 'cobro_id',
  detalles_antes: 'detalles_antes',
  detalles_despues: 'detalles_despues',
  tipo_cambio: 'tipo_cambio',
  usuario_id: 'usuario_id'
};

exports.Prisma.ServicioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio_base: 'precio_base',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MetodoPagoCobroScalarFieldEnum = {
  id: 'id',
  cobro_id: 'cobro_id',
  metodo_pago: 'metodo_pago',
  monto: 'monto',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AllergenScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  alxoidType: 'alxoidType',
  isAlxoidExclusive: 'isAlxoidExclusive'
};

exports.Prisma.InventoryUsageScalarFieldEnum = {
  id: 'id',
  nombrePaciente: 'nombrePaciente',
  pacienteId: 'pacienteId',
  tipoTratamiento: 'tipoTratamiento',
  observaciones: 'observaciones',
  tuvoReaccion: 'tuvoReaccion',
  descripcionReaccion: 'descripcionReaccion',
  createdAt: 'createdAt',
  sedeId: 'sedeId',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.InventoryUsageDetailScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  doses: 'doses',
  frascoLevel: 'frascoLevel',
  inventoryUsageId: 'inventoryUsageId',
  movementId: 'movementId',
  productId: 'productId',
  quantity: 'quantity',
  totalCost: 'totalCost',
  unitCost: 'unitCost',
  units: 'units',
  updatedAt: 'updatedAt'
};

exports.Prisma.MovementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sedeId: 'sedeId',
  productId: 'productId',
  type: 'type',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  batchNumber: 'batchNumber',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  unit: 'unit',
  description: 'description',
  costPerUnit: 'costPerUnit',
  minStockLevel: 'minStockLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  category: 'category'
};

exports.Prisma.ProductAllergenScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  allergenId: 'allergenId',
  mlPerDose: 'mlPerDose',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductExpirationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  sedeId: 'sedeId',
  batchNumber: 'batchNumber',
  expiryDate: 'expiryDate',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SedeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockBySedeScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  sedeId: 'sedeId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  invoiceNumber: 'invoiceNumber',
  amountSupplied: 'amountSupplied',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  sedeId: 'sedeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CitasScalarFieldEnum = {
  id: 'id',
  descripcion: 'descripcion',
  estado: 'estado',
  paciente_id: 'paciente_id',
  usuario_id: 'usuario_id',
  consultorio_id: 'consultorio_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  color: 'color',
  fecha_fin: 'fecha_fin',
  fecha_inicio: 'fecha_inicio'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Rol = exports.$Enums.Rol = {
  DOCTOR: 'DOCTOR',
  SECRETARIA: 'SECRETARIA',
  ADMINISTRADOR: 'ADMINISTRADOR'
};

exports.EstadoCobro = exports.$Enums.EstadoCobro = {
  PENDIENTE: 'PENDIENTE',
  COMPLETADO: 'COMPLETADO',
  CANCELADO: 'CANCELADO'
};

exports.MetodoPago = exports.$Enums.MetodoPago = {
  EFECTIVO: 'EFECTIVO',
  TARJETA_DEBITO: 'TARJETA_DEBITO',
  TARJETA_CREDITO: 'TARJETA_CREDITO',
  TRANSFERENCIA: 'TRANSFERENCIA',
  OTRO: 'OTRO'
};

exports.TipoCambio = exports.$Enums.TipoCambio = {
  CREACION: 'CREACION',
  EDICION: 'EDICION',
  ELIMINACION: 'ELIMINACION'
};

exports.AlxoidType = exports.$Enums.AlxoidType = {
  A: 'A',
  B: 'B'
};

exports.TipoTratamiento = exports.$Enums.TipoTratamiento = {
  INMUNOTERAPIA: 'INMUNOTERAPIA',
  PRUEBAS: 'PRUEBAS',
  GAMMAGLOBULINA: 'GAMMAGLOBULINA',
  VACUNAS_PEDIATRICAS: 'VACUNAS_PEDIATRICAS',
  MEDICAMENTOS_EXTRAS: 'MEDICAMENTOS_EXTRAS',
  CONSULTA: 'CONSULTA'
};

exports.MovementType = exports.$Enums.MovementType = {
  ENTRY: 'ENTRY',
  EXIT: 'EXIT'
};

exports.ProductType = exports.$Enums.ProductType = {
  SIMPLE: 'SIMPLE',
  COMPLEX: 'COMPLEX'
};

exports.ProductUnit = exports.$Enums.ProductUnit = {
  ML: 'ML',
  PIECE: 'PIECE'
};

exports.UserRole = exports.$Enums.UserRole = {
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  SECRETARY: 'SECRETARY'
};

exports.EstadoCita = exports.$Enums.EstadoCita = {
  PROGRAMADA: 'PROGRAMADA',
  EN_CURSO: 'EN_CURSO',
  COMPLETADA: 'COMPLETADA',
  CANCELADA: 'CANCELADA',
  NO_ASISTIO: 'NO_ASISTIO'
};

exports.Prisma.ModelName = {
  Paciente: 'Paciente',
  Usuario: 'Usuario',
  Consultorio: 'Consultorio',
  PrecioConsultorio: 'PrecioConsultorio',
  Cobro: 'Cobro',
  CobroConcepto: 'CobroConcepto',
  HistorialCobro: 'HistorialCobro',
  Servicio: 'Servicio',
  MetodoPagoCobro: 'MetodoPagoCobro',
  Allergen: 'Allergen',
  InventoryUsage: 'InventoryUsage',
  InventoryUsageDetail: 'InventoryUsageDetail',
  Movement: 'Movement',
  Product: 'Product',
  ProductAllergen: 'ProductAllergen',
  ProductExpiration: 'ProductExpiration',
  Sede: 'Sede',
  StockBySede: 'StockBySede',
  Supplier: 'Supplier',
  User: 'User',
  citas: 'citas'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
