
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Paciente
 * 
 */
export type Paciente = $Result.DefaultSelection<Prisma.$PacientePayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Consultorio
 * 
 */
export type Consultorio = $Result.DefaultSelection<Prisma.$ConsultorioPayload>
/**
 * Model PrecioConsultorio
 * 
 */
export type PrecioConsultorio = $Result.DefaultSelection<Prisma.$PrecioConsultorioPayload>
/**
 * Model Cobro
 * 
 */
export type Cobro = $Result.DefaultSelection<Prisma.$CobroPayload>
/**
 * Model CobroConcepto
 * 
 */
export type CobroConcepto = $Result.DefaultSelection<Prisma.$CobroConceptoPayload>
/**
 * Model HistorialCobro
 * 
 */
export type HistorialCobro = $Result.DefaultSelection<Prisma.$HistorialCobroPayload>
/**
 * Model Servicio
 * 
 */
export type Servicio = $Result.DefaultSelection<Prisma.$ServicioPayload>
/**
 * Model MetodoPagoCobro
 * 
 */
export type MetodoPagoCobro = $Result.DefaultSelection<Prisma.$MetodoPagoCobroPayload>
/**
 * Model Allergen
 * 
 */
export type Allergen = $Result.DefaultSelection<Prisma.$AllergenPayload>
/**
 * Model InventoryUsage
 * 
 */
export type InventoryUsage = $Result.DefaultSelection<Prisma.$InventoryUsagePayload>
/**
 * Model InventoryUsageDetail
 * 
 */
export type InventoryUsageDetail = $Result.DefaultSelection<Prisma.$InventoryUsageDetailPayload>
/**
 * Model Movement
 * 
 */
export type Movement = $Result.DefaultSelection<Prisma.$MovementPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductAllergen
 * 
 */
export type ProductAllergen = $Result.DefaultSelection<Prisma.$ProductAllergenPayload>
/**
 * Model ProductExpiration
 * 
 */
export type ProductExpiration = $Result.DefaultSelection<Prisma.$ProductExpirationPayload>
/**
 * Model Sede
 * 
 */
export type Sede = $Result.DefaultSelection<Prisma.$SedePayload>
/**
 * Model StockBySede
 * 
 */
export type StockBySede = $Result.DefaultSelection<Prisma.$StockBySedePayload>
/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model citas
 * 
 */
export type citas = $Result.DefaultSelection<Prisma.$citasPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MetodoPago: {
  EFECTIVO: 'EFECTIVO',
  TARJETA_DEBITO: 'TARJETA_DEBITO',
  TARJETA_CREDITO: 'TARJETA_CREDITO',
  TRANSFERENCIA: 'TRANSFERENCIA',
  OTRO: 'OTRO'
};

export type MetodoPago = (typeof MetodoPago)[keyof typeof MetodoPago]


export const EstadoCobro: {
  PENDIENTE: 'PENDIENTE',
  COMPLETADO: 'COMPLETADO',
  CANCELADO: 'CANCELADO'
};

export type EstadoCobro = (typeof EstadoCobro)[keyof typeof EstadoCobro]


export const Rol: {
  DOCTOR: 'DOCTOR',
  SECRETARIA: 'SECRETARIA',
  ADMINISTRADOR: 'ADMINISTRADOR'
};

export type Rol = (typeof Rol)[keyof typeof Rol]


export const TipoCambio: {
  CREACION: 'CREACION',
  EDICION: 'EDICION',
  ELIMINACION: 'ELIMINACION'
};

export type TipoCambio = (typeof TipoCambio)[keyof typeof TipoCambio]


export const AlxoidType: {
  A: 'A',
  B: 'B'
};

export type AlxoidType = (typeof AlxoidType)[keyof typeof AlxoidType]


export const EstadoCita: {
  PROGRAMADA: 'PROGRAMADA',
  EN_CURSO: 'EN_CURSO',
  COMPLETADA: 'COMPLETADA',
  CANCELADA: 'CANCELADA',
  NO_ASISTIO: 'NO_ASISTIO'
};

export type EstadoCita = (typeof EstadoCita)[keyof typeof EstadoCita]


export const MovementType: {
  ENTRY: 'ENTRY',
  EXIT: 'EXIT'
};

export type MovementType = (typeof MovementType)[keyof typeof MovementType]


export const ProductType: {
  SIMPLE: 'SIMPLE',
  COMPLEX: 'COMPLEX'
};

export type ProductType = (typeof ProductType)[keyof typeof ProductType]


export const ProductUnit: {
  ML: 'ML',
  PIECE: 'PIECE'
};

export type ProductUnit = (typeof ProductUnit)[keyof typeof ProductUnit]


export const TipoTratamiento: {
  INMUNOTERAPIA: 'INMUNOTERAPIA',
  PRUEBAS: 'PRUEBAS',
  GAMMAGLOBULINA: 'GAMMAGLOBULINA',
  VACUNAS_PEDIATRICAS: 'VACUNAS_PEDIATRICAS',
  MEDICAMENTOS_EXTRAS: 'MEDICAMENTOS_EXTRAS',
  CONSULTA: 'CONSULTA'
};

export type TipoTratamiento = (typeof TipoTratamiento)[keyof typeof TipoTratamiento]


export const UserRole: {
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  SECRETARY: 'SECRETARY'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type MetodoPago = $Enums.MetodoPago

export const MetodoPago: typeof $Enums.MetodoPago

export type EstadoCobro = $Enums.EstadoCobro

export const EstadoCobro: typeof $Enums.EstadoCobro

export type Rol = $Enums.Rol

export const Rol: typeof $Enums.Rol

export type TipoCambio = $Enums.TipoCambio

export const TipoCambio: typeof $Enums.TipoCambio

export type AlxoidType = $Enums.AlxoidType

export const AlxoidType: typeof $Enums.AlxoidType

export type EstadoCita = $Enums.EstadoCita

export const EstadoCita: typeof $Enums.EstadoCita

export type MovementType = $Enums.MovementType

export const MovementType: typeof $Enums.MovementType

export type ProductType = $Enums.ProductType

export const ProductType: typeof $Enums.ProductType

export type ProductUnit = $Enums.ProductUnit

export const ProductUnit: typeof $Enums.ProductUnit

export type TipoTratamiento = $Enums.TipoTratamiento

export const TipoTratamiento: typeof $Enums.TipoTratamiento

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pacientes
 * const pacientes = await prisma.paciente.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pacientes
   * const pacientes = await prisma.paciente.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.paciente`: Exposes CRUD operations for the **Paciente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pacientes
    * const pacientes = await prisma.paciente.findMany()
    * ```
    */
  get paciente(): Prisma.PacienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consultorio`: Exposes CRUD operations for the **Consultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultorios
    * const consultorios = await prisma.consultorio.findMany()
    * ```
    */
  get consultorio(): Prisma.ConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.precioConsultorio`: Exposes CRUD operations for the **PrecioConsultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrecioConsultorios
    * const precioConsultorios = await prisma.precioConsultorio.findMany()
    * ```
    */
  get precioConsultorio(): Prisma.PrecioConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cobro`: Exposes CRUD operations for the **Cobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cobros
    * const cobros = await prisma.cobro.findMany()
    * ```
    */
  get cobro(): Prisma.CobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cobroConcepto`: Exposes CRUD operations for the **CobroConcepto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CobroConceptos
    * const cobroConceptos = await prisma.cobroConcepto.findMany()
    * ```
    */
  get cobroConcepto(): Prisma.CobroConceptoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historialCobro`: Exposes CRUD operations for the **HistorialCobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistorialCobros
    * const historialCobros = await prisma.historialCobro.findMany()
    * ```
    */
  get historialCobro(): Prisma.HistorialCobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servicio`: Exposes CRUD operations for the **Servicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicio.findMany()
    * ```
    */
  get servicio(): Prisma.ServicioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metodoPagoCobro`: Exposes CRUD operations for the **MetodoPagoCobro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetodoPagoCobros
    * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany()
    * ```
    */
  get metodoPagoCobro(): Prisma.MetodoPagoCobroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.allergen`: Exposes CRUD operations for the **Allergen** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergens
    * const allergens = await prisma.allergen.findMany()
    * ```
    */
  get allergen(): Prisma.AllergenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryUsage`: Exposes CRUD operations for the **InventoryUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryUsages
    * const inventoryUsages = await prisma.inventoryUsage.findMany()
    * ```
    */
  get inventoryUsage(): Prisma.InventoryUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryUsageDetail`: Exposes CRUD operations for the **InventoryUsageDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryUsageDetails
    * const inventoryUsageDetails = await prisma.inventoryUsageDetail.findMany()
    * ```
    */
  get inventoryUsageDetail(): Prisma.InventoryUsageDetailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.movement`: Exposes CRUD operations for the **Movement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movements
    * const movements = await prisma.movement.findMany()
    * ```
    */
  get movement(): Prisma.MovementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productAllergen`: Exposes CRUD operations for the **ProductAllergen** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductAllergens
    * const productAllergens = await prisma.productAllergen.findMany()
    * ```
    */
  get productAllergen(): Prisma.ProductAllergenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productExpiration`: Exposes CRUD operations for the **ProductExpiration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductExpirations
    * const productExpirations = await prisma.productExpiration.findMany()
    * ```
    */
  get productExpiration(): Prisma.ProductExpirationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sede`: Exposes CRUD operations for the **Sede** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sedes
    * const sedes = await prisma.sede.findMany()
    * ```
    */
  get sede(): Prisma.SedeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stockBySede`: Exposes CRUD operations for the **StockBySede** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockBySedes
    * const stockBySedes = await prisma.stockBySede.findMany()
    * ```
    */
  get stockBySede(): Prisma.StockBySedeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.citas`: Exposes CRUD operations for the **citas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Citas
    * const citas = await prisma.citas.findMany()
    * ```
    */
  get citas(): Prisma.citasDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.0
   * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Paciente: 'Paciente',
    Usuario: 'Usuario',
    Consultorio: 'Consultorio',
    PrecioConsultorio: 'PrecioConsultorio',
    Cobro: 'Cobro',
    CobroConcepto: 'CobroConcepto',
    HistorialCobro: 'HistorialCobro',
    Servicio: 'Servicio',
    MetodoPagoCobro: 'MetodoPagoCobro',
    Allergen: 'Allergen',
    InventoryUsage: 'InventoryUsage',
    InventoryUsageDetail: 'InventoryUsageDetail',
    Movement: 'Movement',
    Product: 'Product',
    ProductAllergen: 'ProductAllergen',
    ProductExpiration: 'ProductExpiration',
    Sede: 'Sede',
    StockBySede: 'StockBySede',
    Supplier: 'Supplier',
    User: 'User',
    citas: 'citas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "paciente" | "usuario" | "consultorio" | "precioConsultorio" | "cobro" | "cobroConcepto" | "historialCobro" | "servicio" | "metodoPagoCobro" | "allergen" | "inventoryUsage" | "inventoryUsageDetail" | "movement" | "product" | "productAllergen" | "productExpiration" | "sede" | "stockBySede" | "supplier" | "user" | "citas"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Paciente: {
        payload: Prisma.$PacientePayload<ExtArgs>
        fields: Prisma.PacienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PacienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PacienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findFirst: {
            args: Prisma.PacienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PacienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findMany: {
            args: Prisma.PacienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          create: {
            args: Prisma.PacienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          createMany: {
            args: Prisma.PacienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PacienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          delete: {
            args: Prisma.PacienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          update: {
            args: Prisma.PacienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          deleteMany: {
            args: Prisma.PacienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PacienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PacienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          upsert: {
            args: Prisma.PacienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          aggregate: {
            args: Prisma.PacienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaciente>
          }
          groupBy: {
            args: Prisma.PacienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PacienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PacienteCountArgs<ExtArgs>
            result: $Utils.Optional<PacienteCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Consultorio: {
        payload: Prisma.$ConsultorioPayload<ExtArgs>
        fields: Prisma.ConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findFirst: {
            args: Prisma.ConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findMany: {
            args: Prisma.ConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          create: {
            args: Prisma.ConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          createMany: {
            args: Prisma.ConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          delete: {
            args: Prisma.ConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          update: {
            args: Prisma.ConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.ConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.ConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          aggregate: {
            args: Prisma.ConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultorio>
          }
          groupBy: {
            args: Prisma.ConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioCountAggregateOutputType> | number
          }
        }
      }
      PrecioConsultorio: {
        payload: Prisma.$PrecioConsultorioPayload<ExtArgs>
        fields: Prisma.PrecioConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrecioConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          findFirst: {
            args: Prisma.PrecioConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrecioConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          findMany: {
            args: Prisma.PrecioConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          create: {
            args: Prisma.PrecioConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          createMany: {
            args: Prisma.PrecioConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrecioConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          delete: {
            args: Prisma.PrecioConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          update: {
            args: Prisma.PrecioConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.PrecioConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrecioConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.PrecioConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrecioConsultorioPayload>
          }
          aggregate: {
            args: Prisma.PrecioConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrecioConsultorio>
          }
          groupBy: {
            args: Prisma.PrecioConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrecioConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrecioConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<PrecioConsultorioCountAggregateOutputType> | number
          }
        }
      }
      Cobro: {
        payload: Prisma.$CobroPayload<ExtArgs>
        fields: Prisma.CobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          findFirst: {
            args: Prisma.CobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          findMany: {
            args: Prisma.CobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          create: {
            args: Prisma.CobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          createMany: {
            args: Prisma.CobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          delete: {
            args: Prisma.CobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          update: {
            args: Prisma.CobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          deleteMany: {
            args: Prisma.CobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>[]
          }
          upsert: {
            args: Prisma.CobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroPayload>
          }
          aggregate: {
            args: Prisma.CobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCobro>
          }
          groupBy: {
            args: Prisma.CobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<CobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.CobroCountArgs<ExtArgs>
            result: $Utils.Optional<CobroCountAggregateOutputType> | number
          }
        }
      }
      CobroConcepto: {
        payload: Prisma.$CobroConceptoPayload<ExtArgs>
        fields: Prisma.CobroConceptoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CobroConceptoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CobroConceptoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          findFirst: {
            args: Prisma.CobroConceptoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CobroConceptoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          findMany: {
            args: Prisma.CobroConceptoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          create: {
            args: Prisma.CobroConceptoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          createMany: {
            args: Prisma.CobroConceptoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CobroConceptoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          delete: {
            args: Prisma.CobroConceptoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          update: {
            args: Prisma.CobroConceptoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          deleteMany: {
            args: Prisma.CobroConceptoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CobroConceptoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CobroConceptoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>[]
          }
          upsert: {
            args: Prisma.CobroConceptoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CobroConceptoPayload>
          }
          aggregate: {
            args: Prisma.CobroConceptoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCobroConcepto>
          }
          groupBy: {
            args: Prisma.CobroConceptoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CobroConceptoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CobroConceptoCountArgs<ExtArgs>
            result: $Utils.Optional<CobroConceptoCountAggregateOutputType> | number
          }
        }
      }
      HistorialCobro: {
        payload: Prisma.$HistorialCobroPayload<ExtArgs>
        fields: Prisma.HistorialCobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistorialCobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistorialCobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          findFirst: {
            args: Prisma.HistorialCobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistorialCobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          findMany: {
            args: Prisma.HistorialCobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          create: {
            args: Prisma.HistorialCobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          createMany: {
            args: Prisma.HistorialCobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistorialCobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          delete: {
            args: Prisma.HistorialCobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          update: {
            args: Prisma.HistorialCobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          deleteMany: {
            args: Prisma.HistorialCobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistorialCobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistorialCobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>[]
          }
          upsert: {
            args: Prisma.HistorialCobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCobroPayload>
          }
          aggregate: {
            args: Prisma.HistorialCobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorialCobro>
          }
          groupBy: {
            args: Prisma.HistorialCobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistorialCobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistorialCobroCountArgs<ExtArgs>
            result: $Utils.Optional<HistorialCobroCountAggregateOutputType> | number
          }
        }
      }
      Servicio: {
        payload: Prisma.$ServicioPayload<ExtArgs>
        fields: Prisma.ServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findFirst: {
            args: Prisma.ServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findMany: {
            args: Prisma.ServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          create: {
            args: Prisma.ServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          createMany: {
            args: Prisma.ServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          delete: {
            args: Prisma.ServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          update: {
            args: Prisma.ServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          deleteMany: {
            args: Prisma.ServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServicioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          upsert: {
            args: Prisma.ServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          aggregate: {
            args: Prisma.ServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicio>
          }
          groupBy: {
            args: Prisma.ServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ServicioCountAggregateOutputType> | number
          }
        }
      }
      MetodoPagoCobro: {
        payload: Prisma.$MetodoPagoCobroPayload<ExtArgs>
        fields: Prisma.MetodoPagoCobroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetodoPagoCobroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          findFirst: {
            args: Prisma.MetodoPagoCobroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          findMany: {
            args: Prisma.MetodoPagoCobroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          create: {
            args: Prisma.MetodoPagoCobroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          createMany: {
            args: Prisma.MetodoPagoCobroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          delete: {
            args: Prisma.MetodoPagoCobroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          update: {
            args: Prisma.MetodoPagoCobroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          deleteMany: {
            args: Prisma.MetodoPagoCobroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetodoPagoCobroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>[]
          }
          upsert: {
            args: Prisma.MetodoPagoCobroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoCobroPayload>
          }
          aggregate: {
            args: Prisma.MetodoPagoCobroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetodoPagoCobro>
          }
          groupBy: {
            args: Prisma.MetodoPagoCobroGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetodoPagoCobroGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetodoPagoCobroCountArgs<ExtArgs>
            result: $Utils.Optional<MetodoPagoCobroCountAggregateOutputType> | number
          }
        }
      }
      Allergen: {
        payload: Prisma.$AllergenPayload<ExtArgs>
        fields: Prisma.AllergenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllergenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllergenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          findFirst: {
            args: Prisma.AllergenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllergenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          findMany: {
            args: Prisma.AllergenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>[]
          }
          create: {
            args: Prisma.AllergenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          createMany: {
            args: Prisma.AllergenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllergenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>[]
          }
          delete: {
            args: Prisma.AllergenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          update: {
            args: Prisma.AllergenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          deleteMany: {
            args: Prisma.AllergenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllergenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AllergenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>[]
          }
          upsert: {
            args: Prisma.AllergenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergenPayload>
          }
          aggregate: {
            args: Prisma.AllergenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllergen>
          }
          groupBy: {
            args: Prisma.AllergenGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllergenGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllergenCountArgs<ExtArgs>
            result: $Utils.Optional<AllergenCountAggregateOutputType> | number
          }
        }
      }
      InventoryUsage: {
        payload: Prisma.$InventoryUsagePayload<ExtArgs>
        fields: Prisma.InventoryUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          findFirst: {
            args: Prisma.InventoryUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          findMany: {
            args: Prisma.InventoryUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>[]
          }
          create: {
            args: Prisma.InventoryUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          createMany: {
            args: Prisma.InventoryUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>[]
          }
          delete: {
            args: Prisma.InventoryUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          update: {
            args: Prisma.InventoryUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          deleteMany: {
            args: Prisma.InventoryUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>[]
          }
          upsert: {
            args: Prisma.InventoryUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsagePayload>
          }
          aggregate: {
            args: Prisma.InventoryUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryUsage>
          }
          groupBy: {
            args: Prisma.InventoryUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryUsageCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryUsageCountAggregateOutputType> | number
          }
        }
      }
      InventoryUsageDetail: {
        payload: Prisma.$InventoryUsageDetailPayload<ExtArgs>
        fields: Prisma.InventoryUsageDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryUsageDetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryUsageDetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          findFirst: {
            args: Prisma.InventoryUsageDetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryUsageDetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          findMany: {
            args: Prisma.InventoryUsageDetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>[]
          }
          create: {
            args: Prisma.InventoryUsageDetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          createMany: {
            args: Prisma.InventoryUsageDetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryUsageDetailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>[]
          }
          delete: {
            args: Prisma.InventoryUsageDetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          update: {
            args: Prisma.InventoryUsageDetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          deleteMany: {
            args: Prisma.InventoryUsageDetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUsageDetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryUsageDetailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>[]
          }
          upsert: {
            args: Prisma.InventoryUsageDetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryUsageDetailPayload>
          }
          aggregate: {
            args: Prisma.InventoryUsageDetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryUsageDetail>
          }
          groupBy: {
            args: Prisma.InventoryUsageDetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryUsageDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryUsageDetailCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryUsageDetailCountAggregateOutputType> | number
          }
        }
      }
      Movement: {
        payload: Prisma.$MovementPayload<ExtArgs>
        fields: Prisma.MovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          findFirst: {
            args: Prisma.MovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          findMany: {
            args: Prisma.MovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>[]
          }
          create: {
            args: Prisma.MovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          createMany: {
            args: Prisma.MovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>[]
          }
          delete: {
            args: Prisma.MovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          update: {
            args: Prisma.MovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          deleteMany: {
            args: Prisma.MovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MovementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>[]
          }
          upsert: {
            args: Prisma.MovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          aggregate: {
            args: Prisma.MovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovement>
          }
          groupBy: {
            args: Prisma.MovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovementCountArgs<ExtArgs>
            result: $Utils.Optional<MovementCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductAllergen: {
        payload: Prisma.$ProductAllergenPayload<ExtArgs>
        fields: Prisma.ProductAllergenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductAllergenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductAllergenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          findFirst: {
            args: Prisma.ProductAllergenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductAllergenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          findMany: {
            args: Prisma.ProductAllergenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>[]
          }
          create: {
            args: Prisma.ProductAllergenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          createMany: {
            args: Prisma.ProductAllergenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductAllergenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>[]
          }
          delete: {
            args: Prisma.ProductAllergenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          update: {
            args: Prisma.ProductAllergenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          deleteMany: {
            args: Prisma.ProductAllergenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductAllergenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductAllergenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>[]
          }
          upsert: {
            args: Prisma.ProductAllergenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAllergenPayload>
          }
          aggregate: {
            args: Prisma.ProductAllergenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductAllergen>
          }
          groupBy: {
            args: Prisma.ProductAllergenGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductAllergenGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductAllergenCountArgs<ExtArgs>
            result: $Utils.Optional<ProductAllergenCountAggregateOutputType> | number
          }
        }
      }
      ProductExpiration: {
        payload: Prisma.$ProductExpirationPayload<ExtArgs>
        fields: Prisma.ProductExpirationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductExpirationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductExpirationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          findFirst: {
            args: Prisma.ProductExpirationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductExpirationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          findMany: {
            args: Prisma.ProductExpirationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>[]
          }
          create: {
            args: Prisma.ProductExpirationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          createMany: {
            args: Prisma.ProductExpirationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductExpirationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>[]
          }
          delete: {
            args: Prisma.ProductExpirationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          update: {
            args: Prisma.ProductExpirationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          deleteMany: {
            args: Prisma.ProductExpirationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductExpirationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductExpirationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>[]
          }
          upsert: {
            args: Prisma.ProductExpirationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductExpirationPayload>
          }
          aggregate: {
            args: Prisma.ProductExpirationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductExpiration>
          }
          groupBy: {
            args: Prisma.ProductExpirationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductExpirationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductExpirationCountArgs<ExtArgs>
            result: $Utils.Optional<ProductExpirationCountAggregateOutputType> | number
          }
        }
      }
      Sede: {
        payload: Prisma.$SedePayload<ExtArgs>
        fields: Prisma.SedeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SedeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SedeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          findFirst: {
            args: Prisma.SedeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SedeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          findMany: {
            args: Prisma.SedeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          create: {
            args: Prisma.SedeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          createMany: {
            args: Prisma.SedeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SedeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          delete: {
            args: Prisma.SedeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          update: {
            args: Prisma.SedeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          deleteMany: {
            args: Prisma.SedeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SedeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SedeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          upsert: {
            args: Prisma.SedeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          aggregate: {
            args: Prisma.SedeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSede>
          }
          groupBy: {
            args: Prisma.SedeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SedeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SedeCountArgs<ExtArgs>
            result: $Utils.Optional<SedeCountAggregateOutputType> | number
          }
        }
      }
      StockBySede: {
        payload: Prisma.$StockBySedePayload<ExtArgs>
        fields: Prisma.StockBySedeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockBySedeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockBySedeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          findFirst: {
            args: Prisma.StockBySedeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockBySedeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          findMany: {
            args: Prisma.StockBySedeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>[]
          }
          create: {
            args: Prisma.StockBySedeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          createMany: {
            args: Prisma.StockBySedeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockBySedeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>[]
          }
          delete: {
            args: Prisma.StockBySedeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          update: {
            args: Prisma.StockBySedeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          deleteMany: {
            args: Prisma.StockBySedeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockBySedeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockBySedeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>[]
          }
          upsert: {
            args: Prisma.StockBySedeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockBySedePayload>
          }
          aggregate: {
            args: Prisma.StockBySedeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockBySede>
          }
          groupBy: {
            args: Prisma.StockBySedeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockBySedeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockBySedeCountArgs<ExtArgs>
            result: $Utils.Optional<StockBySedeCountAggregateOutputType> | number
          }
        }
      }
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SupplierUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      citas: {
        payload: Prisma.$citasPayload<ExtArgs>
        fields: Prisma.citasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.citasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.citasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          findFirst: {
            args: Prisma.citasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.citasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          findMany: {
            args: Prisma.citasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>[]
          }
          create: {
            args: Prisma.citasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          createMany: {
            args: Prisma.citasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.citasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>[]
          }
          delete: {
            args: Prisma.citasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          update: {
            args: Prisma.citasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          deleteMany: {
            args: Prisma.citasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.citasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.citasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>[]
          }
          upsert: {
            args: Prisma.citasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$citasPayload>
          }
          aggregate: {
            args: Prisma.CitasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCitas>
          }
          groupBy: {
            args: Prisma.citasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CitasGroupByOutputType>[]
          }
          count: {
            args: Prisma.citasCountArgs<ExtArgs>
            result: $Utils.Optional<CitasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    paciente?: PacienteOmit
    usuario?: UsuarioOmit
    consultorio?: ConsultorioOmit
    precioConsultorio?: PrecioConsultorioOmit
    cobro?: CobroOmit
    cobroConcepto?: CobroConceptoOmit
    historialCobro?: HistorialCobroOmit
    servicio?: ServicioOmit
    metodoPagoCobro?: MetodoPagoCobroOmit
    allergen?: AllergenOmit
    inventoryUsage?: InventoryUsageOmit
    inventoryUsageDetail?: InventoryUsageDetailOmit
    movement?: MovementOmit
    product?: ProductOmit
    productAllergen?: ProductAllergenOmit
    productExpiration?: ProductExpirationOmit
    sede?: SedeOmit
    stockBySede?: StockBySedeOmit
    supplier?: SupplierOmit
    user?: UserOmit
    citas?: citasOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PacienteCountOutputType
   */

  export type PacienteCountOutputType = {
    citas: number
    cobros: number
    InventoryUsage: number
  }

  export type PacienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | PacienteCountOutputTypeCountCitasArgs
    cobros?: boolean | PacienteCountOutputTypeCountCobrosArgs
    InventoryUsage?: boolean | PacienteCountOutputTypeCountInventoryUsageArgs
  }

  // Custom InputTypes
  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PacienteCountOutputType
     */
    select?: PacienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: citasWhereInput
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountCobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountInventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    citas: number
    cobros: number
    historial: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | UsuarioCountOutputTypeCountCitasArgs
    cobros?: boolean | UsuarioCountOutputTypeCountCobrosArgs
    historial?: boolean | UsuarioCountOutputTypeCountHistorialArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: citasWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountHistorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
  }


  /**
   * Count Type ConsultorioCountOutputType
   */

  export type ConsultorioCountOutputType = {
    citas: number
    conceptos: number
    precios: number
    usuarios: number
  }

  export type ConsultorioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | ConsultorioCountOutputTypeCountCitasArgs
    conceptos?: boolean | ConsultorioCountOutputTypeCountConceptosArgs
    precios?: boolean | ConsultorioCountOutputTypeCountPreciosArgs
    usuarios?: boolean | ConsultorioCountOutputTypeCountUsuariosArgs
  }

  // Custom InputTypes
  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultorioCountOutputType
     */
    select?: ConsultorioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: citasWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountPreciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrecioConsultorioWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
  }


  /**
   * Count Type CobroCountOutputType
   */

  export type CobroCountOutputType = {
    conceptos: number
    historial: number
    metodos_pago: number
  }

  export type CobroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | CobroCountOutputTypeCountConceptosArgs
    historial?: boolean | CobroCountOutputTypeCountHistorialArgs
    metodos_pago?: boolean | CobroCountOutputTypeCountMetodos_pagoArgs
  }

  // Custom InputTypes
  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroCountOutputType
     */
    select?: CobroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountHistorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
  }

  /**
   * CobroCountOutputType without action
   */
  export type CobroCountOutputTypeCountMetodos_pagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetodoPagoCobroWhereInput
  }


  /**
   * Count Type ServicioCountOutputType
   */

  export type ServicioCountOutputType = {
    conceptos: number
  }

  export type ServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | ServicioCountOutputTypeCountConceptosArgs
  }

  // Custom InputTypes
  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioCountOutputType
     */
    select?: ServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountConceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
  }


  /**
   * Count Type AllergenCountOutputType
   */

  export type AllergenCountOutputType = {
    ProductAllergen: number
  }

  export type AllergenCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProductAllergen?: boolean | AllergenCountOutputTypeCountProductAllergenArgs
  }

  // Custom InputTypes
  /**
   * AllergenCountOutputType without action
   */
  export type AllergenCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllergenCountOutputType
     */
    select?: AllergenCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AllergenCountOutputType without action
   */
  export type AllergenCountOutputTypeCountProductAllergenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAllergenWhereInput
  }


  /**
   * Count Type InventoryUsageCountOutputType
   */

  export type InventoryUsageCountOutputType = {
    InventoryUsageDetail: number
  }

  export type InventoryUsageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsageDetail?: boolean | InventoryUsageCountOutputTypeCountInventoryUsageDetailArgs
  }

  // Custom InputTypes
  /**
   * InventoryUsageCountOutputType without action
   */
  export type InventoryUsageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageCountOutputType
     */
    select?: InventoryUsageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryUsageCountOutputType without action
   */
  export type InventoryUsageCountOutputTypeCountInventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageDetailWhereInput
  }


  /**
   * Count Type MovementCountOutputType
   */

  export type MovementCountOutputType = {
    InventoryUsageDetail: number
  }

  export type MovementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsageDetail?: boolean | MovementCountOutputTypeCountInventoryUsageDetailArgs
  }

  // Custom InputTypes
  /**
   * MovementCountOutputType without action
   */
  export type MovementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovementCountOutputType
     */
    select?: MovementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MovementCountOutputType without action
   */
  export type MovementCountOutputTypeCountInventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageDetailWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    InventoryUsageDetail: number
    Movement: number
    ProductAllergen: number
    ProductExpiration: number
    StockBySede: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsageDetail?: boolean | ProductCountOutputTypeCountInventoryUsageDetailArgs
    Movement?: boolean | ProductCountOutputTypeCountMovementArgs
    ProductAllergen?: boolean | ProductCountOutputTypeCountProductAllergenArgs
    ProductExpiration?: boolean | ProductCountOutputTypeCountProductExpirationArgs
    StockBySede?: boolean | ProductCountOutputTypeCountStockBySedeArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountInventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageDetailWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductAllergenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAllergenWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductExpirationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductExpirationWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountStockBySedeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockBySedeWhereInput
  }


  /**
   * Count Type SedeCountOutputType
   */

  export type SedeCountOutputType = {
    InventoryUsage: number
    Movement: number
    ProductExpiration: number
    StockBySede: number
    User: number
  }

  export type SedeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | SedeCountOutputTypeCountInventoryUsageArgs
    Movement?: boolean | SedeCountOutputTypeCountMovementArgs
    ProductExpiration?: boolean | SedeCountOutputTypeCountProductExpirationArgs
    StockBySede?: boolean | SedeCountOutputTypeCountStockBySedeArgs
    User?: boolean | SedeCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SedeCountOutputType
     */
    select?: SedeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountInventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageWhereInput
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountProductExpirationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductExpirationWhereInput
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountStockBySedeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockBySedeWhereInput
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    InventoryUsage: number
    Movement: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | UserCountOutputTypeCountInventoryUsageArgs
    Movement?: boolean | UserCountOutputTypeCountMovementArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Paciente
   */

  export type AggregatePaciente = {
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  export type PacienteMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    fecha_nacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    documento_identidad: string | null
    created_at: Date | null
    updated_at: Date | null
    apellido: string | null
  }

  export type PacienteMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    fecha_nacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    documento_identidad: string | null
    created_at: Date | null
    updated_at: Date | null
    apellido: string | null
  }

  export type PacienteCountAggregateOutputType = {
    id: number
    nombre: number
    fecha_nacimiento: number
    genero: number
    direccion: number
    telefono: number
    email: number
    documento_identidad: number
    created_at: number
    updated_at: number
    apellido: number
    _all: number
  }


  export type PacienteMinAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
  }

  export type PacienteMaxAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
  }

  export type PacienteCountAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    email?: true
    documento_identidad?: true
    created_at?: true
    updated_at?: true
    apellido?: true
    _all?: true
  }

  export type PacienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paciente to aggregate.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pacientes
    **/
    _count?: true | PacienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PacienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PacienteMaxAggregateInputType
  }

  export type GetPacienteAggregateType<T extends PacienteAggregateArgs> = {
        [P in keyof T & keyof AggregatePaciente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaciente[P]>
      : GetScalarType<T[P], AggregatePaciente[P]>
  }




  export type PacienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithAggregationInput | PacienteOrderByWithAggregationInput[]
    by: PacienteScalarFieldEnum[] | PacienteScalarFieldEnum
    having?: PacienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PacienteCountAggregateInputType | true
    _min?: PacienteMinAggregateInputType
    _max?: PacienteMaxAggregateInputType
  }

  export type PacienteGroupByOutputType = {
    id: string
    nombre: string
    fecha_nacimiento: Date
    genero: string
    direccion: string | null
    telefono: string
    email: string
    documento_identidad: string | null
    created_at: Date
    updated_at: Date
    apellido: string
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  type GetPacienteGroupByPayload<T extends PacienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PacienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PacienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PacienteGroupByOutputType[P]>
            : GetScalarType<T[P], PacienteGroupByOutputType[P]>
        }
      >
    >


  export type PacienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
    citas?: boolean | Paciente$citasArgs<ExtArgs>
    cobros?: boolean | Paciente$cobrosArgs<ExtArgs>
    InventoryUsage?: boolean | Paciente$InventoryUsageArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectScalar = {
    id?: boolean
    nombre?: boolean
    fecha_nacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    documento_identidad?: boolean
    created_at?: boolean
    updated_at?: boolean
    apellido?: boolean
  }

  export type PacienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "fecha_nacimiento" | "genero" | "direccion" | "telefono" | "email" | "documento_identidad" | "created_at" | "updated_at" | "apellido", ExtArgs["result"]["paciente"]>
  export type PacienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | Paciente$citasArgs<ExtArgs>
    cobros?: boolean | Paciente$cobrosArgs<ExtArgs>
    InventoryUsage?: boolean | Paciente$InventoryUsageArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PacienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PacienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PacientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paciente"
    objects: {
      citas: Prisma.$citasPayload<ExtArgs>[]
      cobros: Prisma.$CobroPayload<ExtArgs>[]
      InventoryUsage: Prisma.$InventoryUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      fecha_nacimiento: Date
      genero: string
      direccion: string | null
      telefono: string
      email: string
      documento_identidad: string | null
      created_at: Date
      updated_at: Date
      apellido: string
    }, ExtArgs["result"]["paciente"]>
    composites: {}
  }

  type PacienteGetPayload<S extends boolean | null | undefined | PacienteDefaultArgs> = $Result.GetResult<Prisma.$PacientePayload, S>

  type PacienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PacienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PacienteCountAggregateInputType | true
    }

  export interface PacienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paciente'], meta: { name: 'Paciente' } }
    /**
     * Find zero or one Paciente that matches the filter.
     * @param {PacienteFindUniqueArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PacienteFindUniqueArgs>(args: SelectSubset<T, PacienteFindUniqueArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paciente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PacienteFindUniqueOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PacienteFindUniqueOrThrowArgs>(args: SelectSubset<T, PacienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PacienteFindFirstArgs>(args?: SelectSubset<T, PacienteFindFirstArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PacienteFindFirstOrThrowArgs>(args?: SelectSubset<T, PacienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pacientes
     * const pacientes = await prisma.paciente.findMany()
     * 
     * // Get first 10 Pacientes
     * const pacientes = await prisma.paciente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pacienteWithIdOnly = await prisma.paciente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PacienteFindManyArgs>(args?: SelectSubset<T, PacienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paciente.
     * @param {PacienteCreateArgs} args - Arguments to create a Paciente.
     * @example
     * // Create one Paciente
     * const Paciente = await prisma.paciente.create({
     *   data: {
     *     // ... data to create a Paciente
     *   }
     * })
     * 
     */
    create<T extends PacienteCreateArgs>(args: SelectSubset<T, PacienteCreateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pacientes.
     * @param {PacienteCreateManyArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PacienteCreateManyArgs>(args?: SelectSubset<T, PacienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pacientes and returns the data saved in the database.
     * @param {PacienteCreateManyAndReturnArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PacienteCreateManyAndReturnArgs>(args?: SelectSubset<T, PacienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Paciente.
     * @param {PacienteDeleteArgs} args - Arguments to delete one Paciente.
     * @example
     * // Delete one Paciente
     * const Paciente = await prisma.paciente.delete({
     *   where: {
     *     // ... filter to delete one Paciente
     *   }
     * })
     * 
     */
    delete<T extends PacienteDeleteArgs>(args: SelectSubset<T, PacienteDeleteArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paciente.
     * @param {PacienteUpdateArgs} args - Arguments to update one Paciente.
     * @example
     * // Update one Paciente
     * const paciente = await prisma.paciente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PacienteUpdateArgs>(args: SelectSubset<T, PacienteUpdateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pacientes.
     * @param {PacienteDeleteManyArgs} args - Arguments to filter Pacientes to delete.
     * @example
     * // Delete a few Pacientes
     * const { count } = await prisma.paciente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PacienteDeleteManyArgs>(args?: SelectSubset<T, PacienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PacienteUpdateManyArgs>(args: SelectSubset<T, PacienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes and returns the data updated in the database.
     * @param {PacienteUpdateManyAndReturnArgs} args - Arguments to update many Pacientes.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PacienteUpdateManyAndReturnArgs>(args: SelectSubset<T, PacienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Paciente.
     * @param {PacienteUpsertArgs} args - Arguments to update or create a Paciente.
     * @example
     * // Update or create a Paciente
     * const paciente = await prisma.paciente.upsert({
     *   create: {
     *     // ... data to create a Paciente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paciente we want to update
     *   }
     * })
     */
    upsert<T extends PacienteUpsertArgs>(args: SelectSubset<T, PacienteUpsertArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteCountArgs} args - Arguments to filter Pacientes to count.
     * @example
     * // Count the number of Pacientes
     * const count = await prisma.paciente.count({
     *   where: {
     *     // ... the filter for the Pacientes we want to count
     *   }
     * })
    **/
    count<T extends PacienteCountArgs>(
      args?: Subset<T, PacienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PacienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PacienteAggregateArgs>(args: Subset<T, PacienteAggregateArgs>): Prisma.PrismaPromise<GetPacienteAggregateType<T>>

    /**
     * Group by Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PacienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PacienteGroupByArgs['orderBy'] }
        : { orderBy?: PacienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PacienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPacienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paciente model
   */
  readonly fields: PacienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paciente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PacienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    citas<T extends Paciente$citasArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cobros<T extends Paciente$cobrosArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$cobrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    InventoryUsage<T extends Paciente$InventoryUsageArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$InventoryUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paciente model
   */
  interface PacienteFieldRefs {
    readonly id: FieldRef<"Paciente", 'String'>
    readonly nombre: FieldRef<"Paciente", 'String'>
    readonly fecha_nacimiento: FieldRef<"Paciente", 'DateTime'>
    readonly genero: FieldRef<"Paciente", 'String'>
    readonly direccion: FieldRef<"Paciente", 'String'>
    readonly telefono: FieldRef<"Paciente", 'String'>
    readonly email: FieldRef<"Paciente", 'String'>
    readonly documento_identidad: FieldRef<"Paciente", 'String'>
    readonly created_at: FieldRef<"Paciente", 'DateTime'>
    readonly updated_at: FieldRef<"Paciente", 'DateTime'>
    readonly apellido: FieldRef<"Paciente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Paciente findUnique
   */
  export type PacienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findUniqueOrThrow
   */
  export type PacienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findFirst
   */
  export type PacienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findFirstOrThrow
   */
  export type PacienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findMany
   */
  export type PacienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Pacientes to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente create
   */
  export type PacienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Paciente.
     */
    data: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
  }

  /**
   * Paciente createMany
   */
  export type PacienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
  }

  /**
   * Paciente createManyAndReturn
   */
  export type PacienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
  }

  /**
   * Paciente update
   */
  export type PacienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Paciente.
     */
    data: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
    /**
     * Choose, which Paciente to update.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente updateMany
   */
  export type PacienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente updateManyAndReturn
   */
  export type PacienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente upsert
   */
  export type PacienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Paciente to update in case it exists.
     */
    where: PacienteWhereUniqueInput
    /**
     * In case the Paciente found by the `where` argument doesn't exist, create a new Paciente with this data.
     */
    create: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
    /**
     * In case the Paciente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
  }

  /**
   * Paciente delete
   */
  export type PacienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter which Paciente to delete.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente deleteMany
   */
  export type PacienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pacientes to delete
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to delete.
     */
    limit?: number
  }

  /**
   * Paciente.citas
   */
  export type Paciente$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    where?: citasWhereInput
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    cursor?: citasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * Paciente.cobros
   */
  export type Paciente$cobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    cursor?: CobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Paciente.InventoryUsage
   */
  export type Paciente$InventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    where?: InventoryUsageWhereInput
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    cursor?: InventoryUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * Paciente without action
   */
  export type PacienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    apellido: string | null
    email: string | null
    telefono: string | null
    created_at: Date | null
    updated_at: Date | null
    rol: $Enums.Rol | null
    consultorio_id: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    apellido: string | null
    email: string | null
    telefono: string | null
    created_at: Date | null
    updated_at: Date | null
    rol: $Enums.Rol | null
    consultorio_id: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    email: number
    telefono: number
    created_at: number
    updated_at: number
    rol: number
    consultorio_id: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
    consultorio_id?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
    consultorio_id?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    created_at?: true
    updated_at?: true
    rol?: true
    consultorio_id?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at: Date
    updated_at: Date
    rol: $Enums.Rol
    consultorio_id: string
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
    consultorio_id?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    citas?: boolean | Usuario$citasArgs<ExtArgs>
    cobros?: boolean | Usuario$cobrosArgs<ExtArgs>
    historial?: boolean | Usuario$historialArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
    consultorio_id?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
    consultorio_id?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    created_at?: boolean
    updated_at?: boolean
    rol?: boolean
    consultorio_id?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "apellido" | "email" | "telefono" | "created_at" | "updated_at" | "rol" | "consultorio_id", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    citas?: boolean | Usuario$citasArgs<ExtArgs>
    cobros?: boolean | Usuario$cobrosArgs<ExtArgs>
    historial?: boolean | Usuario$historialArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
      citas: Prisma.$citasPayload<ExtArgs>[]
      cobros: Prisma.$CobroPayload<ExtArgs>[]
      historial: Prisma.$HistorialCobroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      apellido: string
      email: string
      telefono: string
      created_at: Date
      updated_at: Date
      rol: $Enums.Rol
      consultorio_id: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    citas<T extends Usuario$citasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cobros<T extends Usuario$cobrosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$cobrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historial<T extends Usuario$historialArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$historialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly apellido: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly telefono: FieldRef<"Usuario", 'String'>
    readonly created_at: FieldRef<"Usuario", 'DateTime'>
    readonly updated_at: FieldRef<"Usuario", 'DateTime'>
    readonly rol: FieldRef<"Usuario", 'Rol'>
    readonly consultorio_id: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.citas
   */
  export type Usuario$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    where?: citasWhereInput
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    cursor?: citasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * Usuario.cobros
   */
  export type Usuario$cobrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    cursor?: CobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Usuario.historial
   */
  export type Usuario$historialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    cursor?: HistorialCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Consultorio
   */

  export type AggregateConsultorio = {
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  export type ConsultorioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultorioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultorioCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ConsultorioMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultorioMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultorioCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorio to aggregate.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultorios
    **/
    _count?: true | ConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultorioMaxAggregateInputType
  }

  export type GetConsultorioAggregateType<T extends ConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultorio[P]>
      : GetScalarType<T[P], AggregateConsultorio[P]>
  }




  export type ConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithAggregationInput | ConsultorioOrderByWithAggregationInput[]
    by: ConsultorioScalarFieldEnum[] | ConsultorioScalarFieldEnum
    having?: ConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultorioCountAggregateInputType | true
    _min?: ConsultorioMinAggregateInputType
    _max?: ConsultorioMaxAggregateInputType
  }

  export type ConsultorioGroupByOutputType = {
    id: string
    nombre: string
    direccion: string
    created_at: Date
    updated_at: Date
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  type GetConsultorioGroupByPayload<T extends ConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type ConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
    citas?: boolean | Consultorio$citasArgs<ExtArgs>
    conceptos?: boolean | Consultorio$conceptosArgs<ExtArgs>
    precios?: boolean | Consultorio$preciosArgs<ExtArgs>
    usuarios?: boolean | Consultorio$usuariosArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "direccion" | "created_at" | "updated_at", ExtArgs["result"]["consultorio"]>
  export type ConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | Consultorio$citasArgs<ExtArgs>
    conceptos?: boolean | Consultorio$conceptosArgs<ExtArgs>
    precios?: boolean | Consultorio$preciosArgs<ExtArgs>
    usuarios?: boolean | Consultorio$usuariosArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultorio"
    objects: {
      citas: Prisma.$citasPayload<ExtArgs>[]
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
      precios: Prisma.$PrecioConsultorioPayload<ExtArgs>[]
      usuarios: Prisma.$UsuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      direccion: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["consultorio"]>
    composites: {}
  }

  type ConsultorioGetPayload<S extends boolean | null | undefined | ConsultorioDefaultArgs> = $Result.GetResult<Prisma.$ConsultorioPayload, S>

  type ConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsultorioCountAggregateInputType | true
    }

  export interface ConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultorio'], meta: { name: 'Consultorio' } }
    /**
     * Find zero or one Consultorio that matches the filter.
     * @param {ConsultorioFindUniqueArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultorioFindUniqueArgs>(args: SelectSubset<T, ConsultorioFindUniqueArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsultorioFindUniqueOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultorioFindFirstArgs>(args?: SelectSubset<T, ConsultorioFindFirstArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultorios
     * const consultorios = await prisma.consultorio.findMany()
     * 
     * // Get first 10 Consultorios
     * const consultorios = await prisma.consultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultorioFindManyArgs>(args?: SelectSubset<T, ConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consultorio.
     * @param {ConsultorioCreateArgs} args - Arguments to create a Consultorio.
     * @example
     * // Create one Consultorio
     * const Consultorio = await prisma.consultorio.create({
     *   data: {
     *     // ... data to create a Consultorio
     *   }
     * })
     * 
     */
    create<T extends ConsultorioCreateArgs>(args: SelectSubset<T, ConsultorioCreateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consultorios.
     * @param {ConsultorioCreateManyArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultorioCreateManyArgs>(args?: SelectSubset<T, ConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consultorios and returns the data saved in the database.
     * @param {ConsultorioCreateManyAndReturnArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consultorio.
     * @param {ConsultorioDeleteArgs} args - Arguments to delete one Consultorio.
     * @example
     * // Delete one Consultorio
     * const Consultorio = await prisma.consultorio.delete({
     *   where: {
     *     // ... filter to delete one Consultorio
     *   }
     * })
     * 
     */
    delete<T extends ConsultorioDeleteArgs>(args: SelectSubset<T, ConsultorioDeleteArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consultorio.
     * @param {ConsultorioUpdateArgs} args - Arguments to update one Consultorio.
     * @example
     * // Update one Consultorio
     * const consultorio = await prisma.consultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultorioUpdateArgs>(args: SelectSubset<T, ConsultorioUpdateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consultorios.
     * @param {ConsultorioDeleteManyArgs} args - Arguments to filter Consultorios to delete.
     * @example
     * // Delete a few Consultorios
     * const { count } = await prisma.consultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultorioDeleteManyArgs>(args?: SelectSubset<T, ConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultorioUpdateManyArgs>(args: SelectSubset<T, ConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios and returns the data updated in the database.
     * @param {ConsultorioUpdateManyAndReturnArgs} args - Arguments to update many Consultorios.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consultorio.
     * @param {ConsultorioUpsertArgs} args - Arguments to update or create a Consultorio.
     * @example
     * // Update or create a Consultorio
     * const consultorio = await prisma.consultorio.upsert({
     *   create: {
     *     // ... data to create a Consultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultorio we want to update
     *   }
     * })
     */
    upsert<T extends ConsultorioUpsertArgs>(args: SelectSubset<T, ConsultorioUpsertArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioCountArgs} args - Arguments to filter Consultorios to count.
     * @example
     * // Count the number of Consultorios
     * const count = await prisma.consultorio.count({
     *   where: {
     *     // ... the filter for the Consultorios we want to count
     *   }
     * })
    **/
    count<T extends ConsultorioCountArgs>(
      args?: Subset<T, ConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultorioAggregateArgs>(args: Subset<T, ConsultorioAggregateArgs>): Prisma.PrismaPromise<GetConsultorioAggregateType<T>>

    /**
     * Group by Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: ConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultorio model
   */
  readonly fields: ConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    citas<T extends Consultorio$citasArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conceptos<T extends Consultorio$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    precios<T extends Consultorio$preciosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$preciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usuarios<T extends Consultorio$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultorio model
   */
  interface ConsultorioFieldRefs {
    readonly id: FieldRef<"Consultorio", 'String'>
    readonly nombre: FieldRef<"Consultorio", 'String'>
    readonly direccion: FieldRef<"Consultorio", 'String'>
    readonly created_at: FieldRef<"Consultorio", 'DateTime'>
    readonly updated_at: FieldRef<"Consultorio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consultorio findUnique
   */
  export type ConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findUniqueOrThrow
   */
  export type ConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findFirst
   */
  export type ConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findFirstOrThrow
   */
  export type ConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findMany
   */
  export type ConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorios to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio create
   */
  export type ConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultorio.
     */
    data: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
  }

  /**
   * Consultorio createMany
   */
  export type ConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
  }

  /**
   * Consultorio createManyAndReturn
   */
  export type ConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
  }

  /**
   * Consultorio update
   */
  export type ConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultorio.
     */
    data: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
    /**
     * Choose, which Consultorio to update.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio updateMany
   */
  export type ConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio updateManyAndReturn
   */
  export type ConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio upsert
   */
  export type ConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultorio to update in case it exists.
     */
    where: ConsultorioWhereUniqueInput
    /**
     * In case the Consultorio found by the `where` argument doesn't exist, create a new Consultorio with this data.
     */
    create: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
    /**
     * In case the Consultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
  }

  /**
   * Consultorio delete
   */
  export type ConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter which Consultorio to delete.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio deleteMany
   */
  export type ConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorios to delete
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to delete.
     */
    limit?: number
  }

  /**
   * Consultorio.citas
   */
  export type Consultorio$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    where?: citasWhereInput
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    cursor?: citasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * Consultorio.conceptos
   */
  export type Consultorio$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Consultorio.precios
   */
  export type Consultorio$preciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    where?: PrecioConsultorioWhereInput
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    cursor?: PrecioConsultorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio.usuarios
   */
  export type Consultorio$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    cursor?: UsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Consultorio without action
   */
  export type ConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model PrecioConsultorio
   */

  export type AggregatePrecioConsultorio = {
    _count: PrecioConsultorioCountAggregateOutputType | null
    _avg: PrecioConsultorioAvgAggregateOutputType | null
    _sum: PrecioConsultorioSumAggregateOutputType | null
    _min: PrecioConsultorioMinAggregateOutputType | null
    _max: PrecioConsultorioMaxAggregateOutputType | null
  }

  export type PrecioConsultorioAvgAggregateOutputType = {
    precio: number | null
  }

  export type PrecioConsultorioSumAggregateOutputType = {
    precio: number | null
  }

  export type PrecioConsultorioMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    concepto: string | null
    consultorio_id: string | null
    precio: number | null
  }

  export type PrecioConsultorioMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    concepto: string | null
    consultorio_id: string | null
    precio: number | null
  }

  export type PrecioConsultorioCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    concepto: number
    consultorio_id: number
    precio: number
    _all: number
  }


  export type PrecioConsultorioAvgAggregateInputType = {
    precio?: true
  }

  export type PrecioConsultorioSumAggregateInputType = {
    precio?: true
  }

  export type PrecioConsultorioMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
  }

  export type PrecioConsultorioMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
  }

  export type PrecioConsultorioCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    concepto?: true
    consultorio_id?: true
    precio?: true
    _all?: true
  }

  export type PrecioConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrecioConsultorio to aggregate.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrecioConsultorios
    **/
    _count?: true | PrecioConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrecioConsultorioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrecioConsultorioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrecioConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrecioConsultorioMaxAggregateInputType
  }

  export type GetPrecioConsultorioAggregateType<T extends PrecioConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregatePrecioConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrecioConsultorio[P]>
      : GetScalarType<T[P], AggregatePrecioConsultorio[P]>
  }




  export type PrecioConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrecioConsultorioWhereInput
    orderBy?: PrecioConsultorioOrderByWithAggregationInput | PrecioConsultorioOrderByWithAggregationInput[]
    by: PrecioConsultorioScalarFieldEnum[] | PrecioConsultorioScalarFieldEnum
    having?: PrecioConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrecioConsultorioCountAggregateInputType | true
    _avg?: PrecioConsultorioAvgAggregateInputType
    _sum?: PrecioConsultorioSumAggregateInputType
    _min?: PrecioConsultorioMinAggregateInputType
    _max?: PrecioConsultorioMaxAggregateInputType
  }

  export type PrecioConsultorioGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    concepto: string
    consultorio_id: string
    precio: number
    _count: PrecioConsultorioCountAggregateOutputType | null
    _avg: PrecioConsultorioAvgAggregateOutputType | null
    _sum: PrecioConsultorioSumAggregateOutputType | null
    _min: PrecioConsultorioMinAggregateOutputType | null
    _max: PrecioConsultorioMaxAggregateOutputType | null
  }

  type GetPrecioConsultorioGroupByPayload<T extends PrecioConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrecioConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrecioConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrecioConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], PrecioConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type PrecioConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["precioConsultorio"]>

  export type PrecioConsultorioSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    concepto?: boolean
    consultorio_id?: boolean
    precio?: boolean
  }

  export type PrecioConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "concepto" | "consultorio_id" | "precio", ExtArgs["result"]["precioConsultorio"]>
  export type PrecioConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type PrecioConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type PrecioConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }

  export type $PrecioConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrecioConsultorio"
    objects: {
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      concepto: string
      consultorio_id: string
      precio: number
    }, ExtArgs["result"]["precioConsultorio"]>
    composites: {}
  }

  type PrecioConsultorioGetPayload<S extends boolean | null | undefined | PrecioConsultorioDefaultArgs> = $Result.GetResult<Prisma.$PrecioConsultorioPayload, S>

  type PrecioConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrecioConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrecioConsultorioCountAggregateInputType | true
    }

  export interface PrecioConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrecioConsultorio'], meta: { name: 'PrecioConsultorio' } }
    /**
     * Find zero or one PrecioConsultorio that matches the filter.
     * @param {PrecioConsultorioFindUniqueArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrecioConsultorioFindUniqueArgs>(args: SelectSubset<T, PrecioConsultorioFindUniqueArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrecioConsultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrecioConsultorioFindUniqueOrThrowArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrecioConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrecioConsultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindFirstArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrecioConsultorioFindFirstArgs>(args?: SelectSubset<T, PrecioConsultorioFindFirstArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrecioConsultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindFirstOrThrowArgs} args - Arguments to find a PrecioConsultorio
     * @example
     * // Get one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrecioConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, PrecioConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrecioConsultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrecioConsultorios
     * const precioConsultorios = await prisma.precioConsultorio.findMany()
     * 
     * // Get first 10 PrecioConsultorios
     * const precioConsultorios = await prisma.precioConsultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrecioConsultorioFindManyArgs>(args?: SelectSubset<T, PrecioConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrecioConsultorio.
     * @param {PrecioConsultorioCreateArgs} args - Arguments to create a PrecioConsultorio.
     * @example
     * // Create one PrecioConsultorio
     * const PrecioConsultorio = await prisma.precioConsultorio.create({
     *   data: {
     *     // ... data to create a PrecioConsultorio
     *   }
     * })
     * 
     */
    create<T extends PrecioConsultorioCreateArgs>(args: SelectSubset<T, PrecioConsultorioCreateArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrecioConsultorios.
     * @param {PrecioConsultorioCreateManyArgs} args - Arguments to create many PrecioConsultorios.
     * @example
     * // Create many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrecioConsultorioCreateManyArgs>(args?: SelectSubset<T, PrecioConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrecioConsultorios and returns the data saved in the database.
     * @param {PrecioConsultorioCreateManyAndReturnArgs} args - Arguments to create many PrecioConsultorios.
     * @example
     * // Create many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrecioConsultorios and only return the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrecioConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, PrecioConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrecioConsultorio.
     * @param {PrecioConsultorioDeleteArgs} args - Arguments to delete one PrecioConsultorio.
     * @example
     * // Delete one PrecioConsultorio
     * const PrecioConsultorio = await prisma.precioConsultorio.delete({
     *   where: {
     *     // ... filter to delete one PrecioConsultorio
     *   }
     * })
     * 
     */
    delete<T extends PrecioConsultorioDeleteArgs>(args: SelectSubset<T, PrecioConsultorioDeleteArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrecioConsultorio.
     * @param {PrecioConsultorioUpdateArgs} args - Arguments to update one PrecioConsultorio.
     * @example
     * // Update one PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrecioConsultorioUpdateArgs>(args: SelectSubset<T, PrecioConsultorioUpdateArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrecioConsultorios.
     * @param {PrecioConsultorioDeleteManyArgs} args - Arguments to filter PrecioConsultorios to delete.
     * @example
     * // Delete a few PrecioConsultorios
     * const { count } = await prisma.precioConsultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrecioConsultorioDeleteManyArgs>(args?: SelectSubset<T, PrecioConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrecioConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrecioConsultorioUpdateManyArgs>(args: SelectSubset<T, PrecioConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrecioConsultorios and returns the data updated in the database.
     * @param {PrecioConsultorioUpdateManyAndReturnArgs} args - Arguments to update many PrecioConsultorios.
     * @example
     * // Update many PrecioConsultorios
     * const precioConsultorio = await prisma.precioConsultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrecioConsultorios and only return the `id`
     * const precioConsultorioWithIdOnly = await prisma.precioConsultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrecioConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrecioConsultorio.
     * @param {PrecioConsultorioUpsertArgs} args - Arguments to update or create a PrecioConsultorio.
     * @example
     * // Update or create a PrecioConsultorio
     * const precioConsultorio = await prisma.precioConsultorio.upsert({
     *   create: {
     *     // ... data to create a PrecioConsultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrecioConsultorio we want to update
     *   }
     * })
     */
    upsert<T extends PrecioConsultorioUpsertArgs>(args: SelectSubset<T, PrecioConsultorioUpsertArgs<ExtArgs>>): Prisma__PrecioConsultorioClient<$Result.GetResult<Prisma.$PrecioConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrecioConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioCountArgs} args - Arguments to filter PrecioConsultorios to count.
     * @example
     * // Count the number of PrecioConsultorios
     * const count = await prisma.precioConsultorio.count({
     *   where: {
     *     // ... the filter for the PrecioConsultorios we want to count
     *   }
     * })
    **/
    count<T extends PrecioConsultorioCountArgs>(
      args?: Subset<T, PrecioConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrecioConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrecioConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrecioConsultorioAggregateArgs>(args: Subset<T, PrecioConsultorioAggregateArgs>): Prisma.PrismaPromise<GetPrecioConsultorioAggregateType<T>>

    /**
     * Group by PrecioConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrecioConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrecioConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrecioConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: PrecioConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrecioConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrecioConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrecioConsultorio model
   */
  readonly fields: PrecioConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrecioConsultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrecioConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrecioConsultorio model
   */
  interface PrecioConsultorioFieldRefs {
    readonly id: FieldRef<"PrecioConsultorio", 'String'>
    readonly created_at: FieldRef<"PrecioConsultorio", 'DateTime'>
    readonly updated_at: FieldRef<"PrecioConsultorio", 'DateTime'>
    readonly concepto: FieldRef<"PrecioConsultorio", 'String'>
    readonly consultorio_id: FieldRef<"PrecioConsultorio", 'String'>
    readonly precio: FieldRef<"PrecioConsultorio", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PrecioConsultorio findUnique
   */
  export type PrecioConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio findUniqueOrThrow
   */
  export type PrecioConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio findFirst
   */
  export type PrecioConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrecioConsultorios.
     */
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio findFirstOrThrow
   */
  export type PrecioConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorio to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrecioConsultorios.
     */
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio findMany
   */
  export type PrecioConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which PrecioConsultorios to fetch.
     */
    where?: PrecioConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrecioConsultorios to fetch.
     */
    orderBy?: PrecioConsultorioOrderByWithRelationInput | PrecioConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrecioConsultorios.
     */
    cursor?: PrecioConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrecioConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrecioConsultorios.
     */
    skip?: number
    distinct?: PrecioConsultorioScalarFieldEnum | PrecioConsultorioScalarFieldEnum[]
  }

  /**
   * PrecioConsultorio create
   */
  export type PrecioConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a PrecioConsultorio.
     */
    data: XOR<PrecioConsultorioCreateInput, PrecioConsultorioUncheckedCreateInput>
  }

  /**
   * PrecioConsultorio createMany
   */
  export type PrecioConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrecioConsultorios.
     */
    data: PrecioConsultorioCreateManyInput | PrecioConsultorioCreateManyInput[]
  }

  /**
   * PrecioConsultorio createManyAndReturn
   */
  export type PrecioConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many PrecioConsultorios.
     */
    data: PrecioConsultorioCreateManyInput | PrecioConsultorioCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrecioConsultorio update
   */
  export type PrecioConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a PrecioConsultorio.
     */
    data: XOR<PrecioConsultorioUpdateInput, PrecioConsultorioUncheckedUpdateInput>
    /**
     * Choose, which PrecioConsultorio to update.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio updateMany
   */
  export type PrecioConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrecioConsultorios.
     */
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which PrecioConsultorios to update
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to update.
     */
    limit?: number
  }

  /**
   * PrecioConsultorio updateManyAndReturn
   */
  export type PrecioConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update PrecioConsultorios.
     */
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which PrecioConsultorios to update
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrecioConsultorio upsert
   */
  export type PrecioConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the PrecioConsultorio to update in case it exists.
     */
    where: PrecioConsultorioWhereUniqueInput
    /**
     * In case the PrecioConsultorio found by the `where` argument doesn't exist, create a new PrecioConsultorio with this data.
     */
    create: XOR<PrecioConsultorioCreateInput, PrecioConsultorioUncheckedCreateInput>
    /**
     * In case the PrecioConsultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrecioConsultorioUpdateInput, PrecioConsultorioUncheckedUpdateInput>
  }

  /**
   * PrecioConsultorio delete
   */
  export type PrecioConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
    /**
     * Filter which PrecioConsultorio to delete.
     */
    where: PrecioConsultorioWhereUniqueInput
  }

  /**
   * PrecioConsultorio deleteMany
   */
  export type PrecioConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrecioConsultorios to delete
     */
    where?: PrecioConsultorioWhereInput
    /**
     * Limit how many PrecioConsultorios to delete.
     */
    limit?: number
  }

  /**
   * PrecioConsultorio without action
   */
  export type PrecioConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrecioConsultorio
     */
    select?: PrecioConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrecioConsultorio
     */
    omit?: PrecioConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrecioConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model Cobro
   */

  export type AggregateCobro = {
    _count: CobroCountAggregateOutputType | null
    _avg: CobroAvgAggregateOutputType | null
    _sum: CobroSumAggregateOutputType | null
    _min: CobroMinAggregateOutputType | null
    _max: CobroMaxAggregateOutputType | null
  }

  export type CobroAvgAggregateOutputType = {
    monto_total: number | null
  }

  export type CobroSumAggregateOutputType = {
    monto_total: number | null
  }

  export type CobroMinAggregateOutputType = {
    id: string | null
    fecha_cobro: Date | null
    monto_total: number | null
    notas: string | null
    created_at: Date | null
    updated_at: Date | null
    paciente_id: string | null
    usuario_id: string | null
    estado: $Enums.EstadoCobro | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type CobroMaxAggregateOutputType = {
    id: string | null
    fecha_cobro: Date | null
    monto_total: number | null
    notas: string | null
    created_at: Date | null
    updated_at: Date | null
    paciente_id: string | null
    usuario_id: string | null
    estado: $Enums.EstadoCobro | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type CobroCountAggregateOutputType = {
    id: number
    fecha_cobro: number
    monto_total: number
    notas: number
    created_at: number
    updated_at: number
    paciente_id: number
    usuario_id: number
    estado: number
    metodo_pago: number
    _all: number
  }


  export type CobroAvgAggregateInputType = {
    monto_total?: true
  }

  export type CobroSumAggregateInputType = {
    monto_total?: true
  }

  export type CobroMinAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
  }

  export type CobroMaxAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
  }

  export type CobroCountAggregateInputType = {
    id?: true
    fecha_cobro?: true
    monto_total?: true
    notas?: true
    created_at?: true
    updated_at?: true
    paciente_id?: true
    usuario_id?: true
    estado?: true
    metodo_pago?: true
    _all?: true
  }

  export type CobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cobro to aggregate.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cobros
    **/
    _count?: true | CobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CobroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CobroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CobroMaxAggregateInputType
  }

  export type GetCobroAggregateType<T extends CobroAggregateArgs> = {
        [P in keyof T & keyof AggregateCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCobro[P]>
      : GetScalarType<T[P], AggregateCobro[P]>
  }




  export type CobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroWhereInput
    orderBy?: CobroOrderByWithAggregationInput | CobroOrderByWithAggregationInput[]
    by: CobroScalarFieldEnum[] | CobroScalarFieldEnum
    having?: CobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CobroCountAggregateInputType | true
    _avg?: CobroAvgAggregateInputType
    _sum?: CobroSumAggregateInputType
    _min?: CobroMinAggregateInputType
    _max?: CobroMaxAggregateInputType
  }

  export type CobroGroupByOutputType = {
    id: string
    fecha_cobro: Date
    monto_total: number
    notas: string | null
    created_at: Date
    updated_at: Date
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago: $Enums.MetodoPago | null
    _count: CobroCountAggregateOutputType | null
    _avg: CobroAvgAggregateOutputType | null
    _sum: CobroSumAggregateOutputType | null
    _min: CobroMinAggregateOutputType | null
    _max: CobroMaxAggregateOutputType | null
  }

  type GetCobroGroupByPayload<T extends CobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CobroGroupByOutputType[P]>
            : GetScalarType<T[P], CobroGroupByOutputType[P]>
        }
      >
    >


  export type CobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    conceptos?: boolean | Cobro$conceptosArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    historial?: boolean | Cobro$historialArgs<ExtArgs>
    metodos_pago?: boolean | Cobro$metodos_pagoArgs<ExtArgs>
    _count?: boolean | CobroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobro"]>

  export type CobroSelectScalar = {
    id?: boolean
    fecha_cobro?: boolean
    monto_total?: boolean
    notas?: boolean
    created_at?: boolean
    updated_at?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    estado?: boolean
    metodo_pago?: boolean
  }

  export type CobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fecha_cobro" | "monto_total" | "notas" | "created_at" | "updated_at" | "paciente_id" | "usuario_id" | "estado" | "metodo_pago", ExtArgs["result"]["cobro"]>
  export type CobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | Cobro$conceptosArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    historial?: boolean | Cobro$historialArgs<ExtArgs>
    metodos_pago?: boolean | Cobro$metodos_pagoArgs<ExtArgs>
    _count?: boolean | CobroCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type CobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cobro"
    objects: {
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
      paciente: Prisma.$PacientePayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      historial: Prisma.$HistorialCobroPayload<ExtArgs>[]
      metodos_pago: Prisma.$MetodoPagoCobroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fecha_cobro: Date
      monto_total: number
      notas: string | null
      created_at: Date
      updated_at: Date
      paciente_id: string
      usuario_id: string
      estado: $Enums.EstadoCobro
      metodo_pago: $Enums.MetodoPago | null
    }, ExtArgs["result"]["cobro"]>
    composites: {}
  }

  type CobroGetPayload<S extends boolean | null | undefined | CobroDefaultArgs> = $Result.GetResult<Prisma.$CobroPayload, S>

  type CobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CobroCountAggregateInputType | true
    }

  export interface CobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cobro'], meta: { name: 'Cobro' } }
    /**
     * Find zero or one Cobro that matches the filter.
     * @param {CobroFindUniqueArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CobroFindUniqueArgs>(args: SelectSubset<T, CobroFindUniqueArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CobroFindUniqueOrThrowArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CobroFindUniqueOrThrowArgs>(args: SelectSubset<T, CobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindFirstArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CobroFindFirstArgs>(args?: SelectSubset<T, CobroFindFirstArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindFirstOrThrowArgs} args - Arguments to find a Cobro
     * @example
     * // Get one Cobro
     * const cobro = await prisma.cobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CobroFindFirstOrThrowArgs>(args?: SelectSubset<T, CobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cobros
     * const cobros = await prisma.cobro.findMany()
     * 
     * // Get first 10 Cobros
     * const cobros = await prisma.cobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cobroWithIdOnly = await prisma.cobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CobroFindManyArgs>(args?: SelectSubset<T, CobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cobro.
     * @param {CobroCreateArgs} args - Arguments to create a Cobro.
     * @example
     * // Create one Cobro
     * const Cobro = await prisma.cobro.create({
     *   data: {
     *     // ... data to create a Cobro
     *   }
     * })
     * 
     */
    create<T extends CobroCreateArgs>(args: SelectSubset<T, CobroCreateArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cobros.
     * @param {CobroCreateManyArgs} args - Arguments to create many Cobros.
     * @example
     * // Create many Cobros
     * const cobro = await prisma.cobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CobroCreateManyArgs>(args?: SelectSubset<T, CobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cobros and returns the data saved in the database.
     * @param {CobroCreateManyAndReturnArgs} args - Arguments to create many Cobros.
     * @example
     * // Create many Cobros
     * const cobro = await prisma.cobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cobros and only return the `id`
     * const cobroWithIdOnly = await prisma.cobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CobroCreateManyAndReturnArgs>(args?: SelectSubset<T, CobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cobro.
     * @param {CobroDeleteArgs} args - Arguments to delete one Cobro.
     * @example
     * // Delete one Cobro
     * const Cobro = await prisma.cobro.delete({
     *   where: {
     *     // ... filter to delete one Cobro
     *   }
     * })
     * 
     */
    delete<T extends CobroDeleteArgs>(args: SelectSubset<T, CobroDeleteArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cobro.
     * @param {CobroUpdateArgs} args - Arguments to update one Cobro.
     * @example
     * // Update one Cobro
     * const cobro = await prisma.cobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CobroUpdateArgs>(args: SelectSubset<T, CobroUpdateArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cobros.
     * @param {CobroDeleteManyArgs} args - Arguments to filter Cobros to delete.
     * @example
     * // Delete a few Cobros
     * const { count } = await prisma.cobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CobroDeleteManyArgs>(args?: SelectSubset<T, CobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cobros
     * const cobro = await prisma.cobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CobroUpdateManyArgs>(args: SelectSubset<T, CobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cobros and returns the data updated in the database.
     * @param {CobroUpdateManyAndReturnArgs} args - Arguments to update many Cobros.
     * @example
     * // Update many Cobros
     * const cobro = await prisma.cobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cobros and only return the `id`
     * const cobroWithIdOnly = await prisma.cobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CobroUpdateManyAndReturnArgs>(args: SelectSubset<T, CobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cobro.
     * @param {CobroUpsertArgs} args - Arguments to update or create a Cobro.
     * @example
     * // Update or create a Cobro
     * const cobro = await prisma.cobro.upsert({
     *   create: {
     *     // ... data to create a Cobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cobro we want to update
     *   }
     * })
     */
    upsert<T extends CobroUpsertArgs>(args: SelectSubset<T, CobroUpsertArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroCountArgs} args - Arguments to filter Cobros to count.
     * @example
     * // Count the number of Cobros
     * const count = await prisma.cobro.count({
     *   where: {
     *     // ... the filter for the Cobros we want to count
     *   }
     * })
    **/
    count<T extends CobroCountArgs>(
      args?: Subset<T, CobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CobroAggregateArgs>(args: Subset<T, CobroAggregateArgs>): Prisma.PrismaPromise<GetCobroAggregateType<T>>

    /**
     * Group by Cobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CobroGroupByArgs['orderBy'] }
        : { orderBy?: CobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cobro model
   */
  readonly fields: CobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conceptos<T extends Cobro$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    historial<T extends Cobro$historialArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$historialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metodos_pago<T extends Cobro$metodos_pagoArgs<ExtArgs> = {}>(args?: Subset<T, Cobro$metodos_pagoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cobro model
   */
  interface CobroFieldRefs {
    readonly id: FieldRef<"Cobro", 'String'>
    readonly fecha_cobro: FieldRef<"Cobro", 'DateTime'>
    readonly monto_total: FieldRef<"Cobro", 'Float'>
    readonly notas: FieldRef<"Cobro", 'String'>
    readonly created_at: FieldRef<"Cobro", 'DateTime'>
    readonly updated_at: FieldRef<"Cobro", 'DateTime'>
    readonly paciente_id: FieldRef<"Cobro", 'String'>
    readonly usuario_id: FieldRef<"Cobro", 'String'>
    readonly estado: FieldRef<"Cobro", 'EstadoCobro'>
    readonly metodo_pago: FieldRef<"Cobro", 'MetodoPago'>
  }
    

  // Custom InputTypes
  /**
   * Cobro findUnique
   */
  export type CobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro findUniqueOrThrow
   */
  export type CobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro findFirst
   */
  export type CobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cobros.
     */
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro findFirstOrThrow
   */
  export type CobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobro to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cobros.
     */
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro findMany
   */
  export type CobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter, which Cobros to fetch.
     */
    where?: CobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cobros to fetch.
     */
    orderBy?: CobroOrderByWithRelationInput | CobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cobros.
     */
    cursor?: CobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cobros.
     */
    skip?: number
    distinct?: CobroScalarFieldEnum | CobroScalarFieldEnum[]
  }

  /**
   * Cobro create
   */
  export type CobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The data needed to create a Cobro.
     */
    data: XOR<CobroCreateInput, CobroUncheckedCreateInput>
  }

  /**
   * Cobro createMany
   */
  export type CobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cobros.
     */
    data: CobroCreateManyInput | CobroCreateManyInput[]
  }

  /**
   * Cobro createManyAndReturn
   */
  export type CobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * The data used to create many Cobros.
     */
    data: CobroCreateManyInput | CobroCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cobro update
   */
  export type CobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The data needed to update a Cobro.
     */
    data: XOR<CobroUpdateInput, CobroUncheckedUpdateInput>
    /**
     * Choose, which Cobro to update.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro updateMany
   */
  export type CobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cobros.
     */
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyInput>
    /**
     * Filter which Cobros to update
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to update.
     */
    limit?: number
  }

  /**
   * Cobro updateManyAndReturn
   */
  export type CobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * The data used to update Cobros.
     */
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyInput>
    /**
     * Filter which Cobros to update
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cobro upsert
   */
  export type CobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * The filter to search for the Cobro to update in case it exists.
     */
    where: CobroWhereUniqueInput
    /**
     * In case the Cobro found by the `where` argument doesn't exist, create a new Cobro with this data.
     */
    create: XOR<CobroCreateInput, CobroUncheckedCreateInput>
    /**
     * In case the Cobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CobroUpdateInput, CobroUncheckedUpdateInput>
  }

  /**
   * Cobro delete
   */
  export type CobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
    /**
     * Filter which Cobro to delete.
     */
    where: CobroWhereUniqueInput
  }

  /**
   * Cobro deleteMany
   */
  export type CobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cobros to delete
     */
    where?: CobroWhereInput
    /**
     * Limit how many Cobros to delete.
     */
    limit?: number
  }

  /**
   * Cobro.conceptos
   */
  export type Cobro$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Cobro.historial
   */
  export type Cobro$historialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    cursor?: HistorialCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * Cobro.metodos_pago
   */
  export type Cobro$metodos_pagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    where?: MetodoPagoCobroWhereInput
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    cursor?: MetodoPagoCobroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * Cobro without action
   */
  export type CobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cobro
     */
    select?: CobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cobro
     */
    omit?: CobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroInclude<ExtArgs> | null
  }


  /**
   * Model CobroConcepto
   */

  export type AggregateCobroConcepto = {
    _count: CobroConceptoCountAggregateOutputType | null
    _avg: CobroConceptoAvgAggregateOutputType | null
    _sum: CobroConceptoSumAggregateOutputType | null
    _min: CobroConceptoMinAggregateOutputType | null
    _max: CobroConceptoMaxAggregateOutputType | null
  }

  export type CobroConceptoAvgAggregateOutputType = {
    cantidad: number | null
    subtotal: number | null
    precio_unitario: number | null
  }

  export type CobroConceptoSumAggregateOutputType = {
    cantidad: number | null
    subtotal: number | null
    precio_unitario: number | null
  }

  export type CobroConceptoMinAggregateOutputType = {
    id: string | null
    cantidad: number | null
    subtotal: number | null
    created_at: Date | null
    updated_at: Date | null
    cobro_id: string | null
    consultorio_id: string | null
    precio_unitario: number | null
    servicio_id: string | null
  }

  export type CobroConceptoMaxAggregateOutputType = {
    id: string | null
    cantidad: number | null
    subtotal: number | null
    created_at: Date | null
    updated_at: Date | null
    cobro_id: string | null
    consultorio_id: string | null
    precio_unitario: number | null
    servicio_id: string | null
  }

  export type CobroConceptoCountAggregateOutputType = {
    id: number
    cantidad: number
    subtotal: number
    created_at: number
    updated_at: number
    cobro_id: number
    consultorio_id: number
    precio_unitario: number
    servicio_id: number
    _all: number
  }


  export type CobroConceptoAvgAggregateInputType = {
    cantidad?: true
    subtotal?: true
    precio_unitario?: true
  }

  export type CobroConceptoSumAggregateInputType = {
    cantidad?: true
    subtotal?: true
    precio_unitario?: true
  }

  export type CobroConceptoMinAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
  }

  export type CobroConceptoMaxAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
  }

  export type CobroConceptoCountAggregateInputType = {
    id?: true
    cantidad?: true
    subtotal?: true
    created_at?: true
    updated_at?: true
    cobro_id?: true
    consultorio_id?: true
    precio_unitario?: true
    servicio_id?: true
    _all?: true
  }

  export type CobroConceptoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CobroConcepto to aggregate.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CobroConceptos
    **/
    _count?: true | CobroConceptoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CobroConceptoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CobroConceptoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CobroConceptoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CobroConceptoMaxAggregateInputType
  }

  export type GetCobroConceptoAggregateType<T extends CobroConceptoAggregateArgs> = {
        [P in keyof T & keyof AggregateCobroConcepto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCobroConcepto[P]>
      : GetScalarType<T[P], AggregateCobroConcepto[P]>
  }




  export type CobroConceptoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithAggregationInput | CobroConceptoOrderByWithAggregationInput[]
    by: CobroConceptoScalarFieldEnum[] | CobroConceptoScalarFieldEnum
    having?: CobroConceptoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CobroConceptoCountAggregateInputType | true
    _avg?: CobroConceptoAvgAggregateInputType
    _sum?: CobroConceptoSumAggregateInputType
    _min?: CobroConceptoMinAggregateInputType
    _max?: CobroConceptoMaxAggregateInputType
  }

  export type CobroConceptoGroupByOutputType = {
    id: string
    cantidad: number
    subtotal: number
    created_at: Date
    updated_at: Date
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
    _count: CobroConceptoCountAggregateOutputType | null
    _avg: CobroConceptoAvgAggregateOutputType | null
    _sum: CobroConceptoSumAggregateOutputType | null
    _min: CobroConceptoMinAggregateOutputType | null
    _max: CobroConceptoMaxAggregateOutputType | null
  }

  type GetCobroConceptoGroupByPayload<T extends CobroConceptoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CobroConceptoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CobroConceptoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CobroConceptoGroupByOutputType[P]>
            : GetScalarType<T[P], CobroConceptoGroupByOutputType[P]>
        }
      >
    >


  export type CobroConceptoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cobroConcepto"]>

  export type CobroConceptoSelectScalar = {
    id?: boolean
    cantidad?: boolean
    subtotal?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro_id?: boolean
    consultorio_id?: boolean
    precio_unitario?: boolean
    servicio_id?: boolean
  }

  export type CobroConceptoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cantidad" | "subtotal" | "created_at" | "updated_at" | "cobro_id" | "consultorio_id" | "precio_unitario" | "servicio_id", ExtArgs["result"]["cobroConcepto"]>
  export type CobroConceptoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type CobroConceptoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type CobroConceptoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }

  export type $CobroConceptoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CobroConcepto"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
      servicio: Prisma.$ServicioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cantidad: number
      subtotal: number
      created_at: Date
      updated_at: Date
      cobro_id: string
      consultorio_id: string
      precio_unitario: number
      servicio_id: string
    }, ExtArgs["result"]["cobroConcepto"]>
    composites: {}
  }

  type CobroConceptoGetPayload<S extends boolean | null | undefined | CobroConceptoDefaultArgs> = $Result.GetResult<Prisma.$CobroConceptoPayload, S>

  type CobroConceptoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CobroConceptoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CobroConceptoCountAggregateInputType | true
    }

  export interface CobroConceptoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CobroConcepto'], meta: { name: 'CobroConcepto' } }
    /**
     * Find zero or one CobroConcepto that matches the filter.
     * @param {CobroConceptoFindUniqueArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CobroConceptoFindUniqueArgs>(args: SelectSubset<T, CobroConceptoFindUniqueArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CobroConcepto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CobroConceptoFindUniqueOrThrowArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CobroConceptoFindUniqueOrThrowArgs>(args: SelectSubset<T, CobroConceptoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CobroConcepto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindFirstArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CobroConceptoFindFirstArgs>(args?: SelectSubset<T, CobroConceptoFindFirstArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CobroConcepto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindFirstOrThrowArgs} args - Arguments to find a CobroConcepto
     * @example
     * // Get one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CobroConceptoFindFirstOrThrowArgs>(args?: SelectSubset<T, CobroConceptoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CobroConceptos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CobroConceptos
     * const cobroConceptos = await prisma.cobroConcepto.findMany()
     * 
     * // Get first 10 CobroConceptos
     * const cobroConceptos = await prisma.cobroConcepto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CobroConceptoFindManyArgs>(args?: SelectSubset<T, CobroConceptoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CobroConcepto.
     * @param {CobroConceptoCreateArgs} args - Arguments to create a CobroConcepto.
     * @example
     * // Create one CobroConcepto
     * const CobroConcepto = await prisma.cobroConcepto.create({
     *   data: {
     *     // ... data to create a CobroConcepto
     *   }
     * })
     * 
     */
    create<T extends CobroConceptoCreateArgs>(args: SelectSubset<T, CobroConceptoCreateArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CobroConceptos.
     * @param {CobroConceptoCreateManyArgs} args - Arguments to create many CobroConceptos.
     * @example
     * // Create many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CobroConceptoCreateManyArgs>(args?: SelectSubset<T, CobroConceptoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CobroConceptos and returns the data saved in the database.
     * @param {CobroConceptoCreateManyAndReturnArgs} args - Arguments to create many CobroConceptos.
     * @example
     * // Create many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CobroConceptos and only return the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CobroConceptoCreateManyAndReturnArgs>(args?: SelectSubset<T, CobroConceptoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CobroConcepto.
     * @param {CobroConceptoDeleteArgs} args - Arguments to delete one CobroConcepto.
     * @example
     * // Delete one CobroConcepto
     * const CobroConcepto = await prisma.cobroConcepto.delete({
     *   where: {
     *     // ... filter to delete one CobroConcepto
     *   }
     * })
     * 
     */
    delete<T extends CobroConceptoDeleteArgs>(args: SelectSubset<T, CobroConceptoDeleteArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CobroConcepto.
     * @param {CobroConceptoUpdateArgs} args - Arguments to update one CobroConcepto.
     * @example
     * // Update one CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CobroConceptoUpdateArgs>(args: SelectSubset<T, CobroConceptoUpdateArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CobroConceptos.
     * @param {CobroConceptoDeleteManyArgs} args - Arguments to filter CobroConceptos to delete.
     * @example
     * // Delete a few CobroConceptos
     * const { count } = await prisma.cobroConcepto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CobroConceptoDeleteManyArgs>(args?: SelectSubset<T, CobroConceptoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CobroConceptos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CobroConceptoUpdateManyArgs>(args: SelectSubset<T, CobroConceptoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CobroConceptos and returns the data updated in the database.
     * @param {CobroConceptoUpdateManyAndReturnArgs} args - Arguments to update many CobroConceptos.
     * @example
     * // Update many CobroConceptos
     * const cobroConcepto = await prisma.cobroConcepto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CobroConceptos and only return the `id`
     * const cobroConceptoWithIdOnly = await prisma.cobroConcepto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CobroConceptoUpdateManyAndReturnArgs>(args: SelectSubset<T, CobroConceptoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CobroConcepto.
     * @param {CobroConceptoUpsertArgs} args - Arguments to update or create a CobroConcepto.
     * @example
     * // Update or create a CobroConcepto
     * const cobroConcepto = await prisma.cobroConcepto.upsert({
     *   create: {
     *     // ... data to create a CobroConcepto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CobroConcepto we want to update
     *   }
     * })
     */
    upsert<T extends CobroConceptoUpsertArgs>(args: SelectSubset<T, CobroConceptoUpsertArgs<ExtArgs>>): Prisma__CobroConceptoClient<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CobroConceptos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoCountArgs} args - Arguments to filter CobroConceptos to count.
     * @example
     * // Count the number of CobroConceptos
     * const count = await prisma.cobroConcepto.count({
     *   where: {
     *     // ... the filter for the CobroConceptos we want to count
     *   }
     * })
    **/
    count<T extends CobroConceptoCountArgs>(
      args?: Subset<T, CobroConceptoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CobroConceptoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CobroConcepto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CobroConceptoAggregateArgs>(args: Subset<T, CobroConceptoAggregateArgs>): Prisma.PrismaPromise<GetCobroConceptoAggregateType<T>>

    /**
     * Group by CobroConcepto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CobroConceptoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CobroConceptoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CobroConceptoGroupByArgs['orderBy'] }
        : { orderBy?: CobroConceptoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CobroConceptoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCobroConceptoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CobroConcepto model
   */
  readonly fields: CobroConceptoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CobroConcepto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CobroConceptoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    servicio<T extends ServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioDefaultArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CobroConcepto model
   */
  interface CobroConceptoFieldRefs {
    readonly id: FieldRef<"CobroConcepto", 'String'>
    readonly cantidad: FieldRef<"CobroConcepto", 'Int'>
    readonly subtotal: FieldRef<"CobroConcepto", 'Float'>
    readonly created_at: FieldRef<"CobroConcepto", 'DateTime'>
    readonly updated_at: FieldRef<"CobroConcepto", 'DateTime'>
    readonly cobro_id: FieldRef<"CobroConcepto", 'String'>
    readonly consultorio_id: FieldRef<"CobroConcepto", 'String'>
    readonly precio_unitario: FieldRef<"CobroConcepto", 'Float'>
    readonly servicio_id: FieldRef<"CobroConcepto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CobroConcepto findUnique
   */
  export type CobroConceptoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto findUniqueOrThrow
   */
  export type CobroConceptoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto findFirst
   */
  export type CobroConceptoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CobroConceptos.
     */
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto findFirstOrThrow
   */
  export type CobroConceptoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConcepto to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CobroConceptos.
     */
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto findMany
   */
  export type CobroConceptoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter, which CobroConceptos to fetch.
     */
    where?: CobroConceptoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CobroConceptos to fetch.
     */
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CobroConceptos.
     */
    cursor?: CobroConceptoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CobroConceptos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CobroConceptos.
     */
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * CobroConcepto create
   */
  export type CobroConceptoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The data needed to create a CobroConcepto.
     */
    data: XOR<CobroConceptoCreateInput, CobroConceptoUncheckedCreateInput>
  }

  /**
   * CobroConcepto createMany
   */
  export type CobroConceptoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CobroConceptos.
     */
    data: CobroConceptoCreateManyInput | CobroConceptoCreateManyInput[]
  }

  /**
   * CobroConcepto createManyAndReturn
   */
  export type CobroConceptoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * The data used to create many CobroConceptos.
     */
    data: CobroConceptoCreateManyInput | CobroConceptoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CobroConcepto update
   */
  export type CobroConceptoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The data needed to update a CobroConcepto.
     */
    data: XOR<CobroConceptoUpdateInput, CobroConceptoUncheckedUpdateInput>
    /**
     * Choose, which CobroConcepto to update.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto updateMany
   */
  export type CobroConceptoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CobroConceptos.
     */
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyInput>
    /**
     * Filter which CobroConceptos to update
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to update.
     */
    limit?: number
  }

  /**
   * CobroConcepto updateManyAndReturn
   */
  export type CobroConceptoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * The data used to update CobroConceptos.
     */
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyInput>
    /**
     * Filter which CobroConceptos to update
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CobroConcepto upsert
   */
  export type CobroConceptoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * The filter to search for the CobroConcepto to update in case it exists.
     */
    where: CobroConceptoWhereUniqueInput
    /**
     * In case the CobroConcepto found by the `where` argument doesn't exist, create a new CobroConcepto with this data.
     */
    create: XOR<CobroConceptoCreateInput, CobroConceptoUncheckedCreateInput>
    /**
     * In case the CobroConcepto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CobroConceptoUpdateInput, CobroConceptoUncheckedUpdateInput>
  }

  /**
   * CobroConcepto delete
   */
  export type CobroConceptoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    /**
     * Filter which CobroConcepto to delete.
     */
    where: CobroConceptoWhereUniqueInput
  }

  /**
   * CobroConcepto deleteMany
   */
  export type CobroConceptoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CobroConceptos to delete
     */
    where?: CobroConceptoWhereInput
    /**
     * Limit how many CobroConceptos to delete.
     */
    limit?: number
  }

  /**
   * CobroConcepto without action
   */
  export type CobroConceptoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
  }


  /**
   * Model HistorialCobro
   */

  export type AggregateHistorialCobro = {
    _count: HistorialCobroCountAggregateOutputType | null
    _min: HistorialCobroMinAggregateOutputType | null
    _max: HistorialCobroMaxAggregateOutputType | null
  }

  export type HistorialCobroMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    cobro_id: string | null
    detalles_antes: string | null
    detalles_despues: string | null
    tipo_cambio: $Enums.TipoCambio | null
    usuario_id: string | null
  }

  export type HistorialCobroMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    cobro_id: string | null
    detalles_antes: string | null
    detalles_despues: string | null
    tipo_cambio: $Enums.TipoCambio | null
    usuario_id: string | null
  }

  export type HistorialCobroCountAggregateOutputType = {
    id: number
    created_at: number
    cobro_id: number
    detalles_antes: number
    detalles_despues: number
    tipo_cambio: number
    usuario_id: number
    _all: number
  }


  export type HistorialCobroMinAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    detalles_antes?: true
    detalles_despues?: true
    tipo_cambio?: true
    usuario_id?: true
  }

  export type HistorialCobroMaxAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    detalles_antes?: true
    detalles_despues?: true
    tipo_cambio?: true
    usuario_id?: true
  }

  export type HistorialCobroCountAggregateInputType = {
    id?: true
    created_at?: true
    cobro_id?: true
    detalles_antes?: true
    detalles_despues?: true
    tipo_cambio?: true
    usuario_id?: true
    _all?: true
  }

  export type HistorialCobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCobro to aggregate.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistorialCobros
    **/
    _count?: true | HistorialCobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistorialCobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistorialCobroMaxAggregateInputType
  }

  export type GetHistorialCobroAggregateType<T extends HistorialCobroAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorialCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorialCobro[P]>
      : GetScalarType<T[P], AggregateHistorialCobro[P]>
  }




  export type HistorialCobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCobroWhereInput
    orderBy?: HistorialCobroOrderByWithAggregationInput | HistorialCobroOrderByWithAggregationInput[]
    by: HistorialCobroScalarFieldEnum[] | HistorialCobroScalarFieldEnum
    having?: HistorialCobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistorialCobroCountAggregateInputType | true
    _min?: HistorialCobroMinAggregateInputType
    _max?: HistorialCobroMaxAggregateInputType
  }

  export type HistorialCobroGroupByOutputType = {
    id: string
    created_at: Date
    cobro_id: string
    detalles_antes: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
    _count: HistorialCobroCountAggregateOutputType | null
    _min: HistorialCobroMinAggregateOutputType | null
    _max: HistorialCobroMaxAggregateOutputType | null
  }

  type GetHistorialCobroGroupByPayload<T extends HistorialCobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistorialCobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistorialCobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistorialCobroGroupByOutputType[P]>
            : GetScalarType<T[P], HistorialCobroGroupByOutputType[P]>
        }
      >
    >


  export type HistorialCobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCobro"]>

  export type HistorialCobroSelectScalar = {
    id?: boolean
    created_at?: boolean
    cobro_id?: boolean
    detalles_antes?: boolean
    detalles_despues?: boolean
    tipo_cambio?: boolean
    usuario_id?: boolean
  }

  export type HistorialCobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "cobro_id" | "detalles_antes" | "detalles_despues" | "tipo_cambio" | "usuario_id", ExtArgs["result"]["historialCobro"]>
  export type HistorialCobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type HistorialCobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type HistorialCobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $HistorialCobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistorialCobro"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      cobro_id: string
      detalles_antes: string | null
      detalles_despues: string
      tipo_cambio: $Enums.TipoCambio
      usuario_id: string
    }, ExtArgs["result"]["historialCobro"]>
    composites: {}
  }

  type HistorialCobroGetPayload<S extends boolean | null | undefined | HistorialCobroDefaultArgs> = $Result.GetResult<Prisma.$HistorialCobroPayload, S>

  type HistorialCobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistorialCobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistorialCobroCountAggregateInputType | true
    }

  export interface HistorialCobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistorialCobro'], meta: { name: 'HistorialCobro' } }
    /**
     * Find zero or one HistorialCobro that matches the filter.
     * @param {HistorialCobroFindUniqueArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistorialCobroFindUniqueArgs>(args: SelectSubset<T, HistorialCobroFindUniqueArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistorialCobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistorialCobroFindUniqueOrThrowArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistorialCobroFindUniqueOrThrowArgs>(args: SelectSubset<T, HistorialCobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistorialCobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindFirstArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistorialCobroFindFirstArgs>(args?: SelectSubset<T, HistorialCobroFindFirstArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistorialCobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindFirstOrThrowArgs} args - Arguments to find a HistorialCobro
     * @example
     * // Get one HistorialCobro
     * const historialCobro = await prisma.historialCobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistorialCobroFindFirstOrThrowArgs>(args?: SelectSubset<T, HistorialCobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistorialCobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistorialCobros
     * const historialCobros = await prisma.historialCobro.findMany()
     * 
     * // Get first 10 HistorialCobros
     * const historialCobros = await prisma.historialCobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistorialCobroFindManyArgs>(args?: SelectSubset<T, HistorialCobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistorialCobro.
     * @param {HistorialCobroCreateArgs} args - Arguments to create a HistorialCobro.
     * @example
     * // Create one HistorialCobro
     * const HistorialCobro = await prisma.historialCobro.create({
     *   data: {
     *     // ... data to create a HistorialCobro
     *   }
     * })
     * 
     */
    create<T extends HistorialCobroCreateArgs>(args: SelectSubset<T, HistorialCobroCreateArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistorialCobros.
     * @param {HistorialCobroCreateManyArgs} args - Arguments to create many HistorialCobros.
     * @example
     * // Create many HistorialCobros
     * const historialCobro = await prisma.historialCobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistorialCobroCreateManyArgs>(args?: SelectSubset<T, HistorialCobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HistorialCobros and returns the data saved in the database.
     * @param {HistorialCobroCreateManyAndReturnArgs} args - Arguments to create many HistorialCobros.
     * @example
     * // Create many HistorialCobros
     * const historialCobro = await prisma.historialCobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HistorialCobros and only return the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistorialCobroCreateManyAndReturnArgs>(args?: SelectSubset<T, HistorialCobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HistorialCobro.
     * @param {HistorialCobroDeleteArgs} args - Arguments to delete one HistorialCobro.
     * @example
     * // Delete one HistorialCobro
     * const HistorialCobro = await prisma.historialCobro.delete({
     *   where: {
     *     // ... filter to delete one HistorialCobro
     *   }
     * })
     * 
     */
    delete<T extends HistorialCobroDeleteArgs>(args: SelectSubset<T, HistorialCobroDeleteArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistorialCobro.
     * @param {HistorialCobroUpdateArgs} args - Arguments to update one HistorialCobro.
     * @example
     * // Update one HistorialCobro
     * const historialCobro = await prisma.historialCobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistorialCobroUpdateArgs>(args: SelectSubset<T, HistorialCobroUpdateArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistorialCobros.
     * @param {HistorialCobroDeleteManyArgs} args - Arguments to filter HistorialCobros to delete.
     * @example
     * // Delete a few HistorialCobros
     * const { count } = await prisma.historialCobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistorialCobroDeleteManyArgs>(args?: SelectSubset<T, HistorialCobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistorialCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistorialCobros
     * const historialCobro = await prisma.historialCobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistorialCobroUpdateManyArgs>(args: SelectSubset<T, HistorialCobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistorialCobros and returns the data updated in the database.
     * @param {HistorialCobroUpdateManyAndReturnArgs} args - Arguments to update many HistorialCobros.
     * @example
     * // Update many HistorialCobros
     * const historialCobro = await prisma.historialCobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HistorialCobros and only return the `id`
     * const historialCobroWithIdOnly = await prisma.historialCobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistorialCobroUpdateManyAndReturnArgs>(args: SelectSubset<T, HistorialCobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HistorialCobro.
     * @param {HistorialCobroUpsertArgs} args - Arguments to update or create a HistorialCobro.
     * @example
     * // Update or create a HistorialCobro
     * const historialCobro = await prisma.historialCobro.upsert({
     *   create: {
     *     // ... data to create a HistorialCobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistorialCobro we want to update
     *   }
     * })
     */
    upsert<T extends HistorialCobroUpsertArgs>(args: SelectSubset<T, HistorialCobroUpsertArgs<ExtArgs>>): Prisma__HistorialCobroClient<$Result.GetResult<Prisma.$HistorialCobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistorialCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroCountArgs} args - Arguments to filter HistorialCobros to count.
     * @example
     * // Count the number of HistorialCobros
     * const count = await prisma.historialCobro.count({
     *   where: {
     *     // ... the filter for the HistorialCobros we want to count
     *   }
     * })
    **/
    count<T extends HistorialCobroCountArgs>(
      args?: Subset<T, HistorialCobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistorialCobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistorialCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistorialCobroAggregateArgs>(args: Subset<T, HistorialCobroAggregateArgs>): Prisma.PrismaPromise<GetHistorialCobroAggregateType<T>>

    /**
     * Group by HistorialCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistorialCobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistorialCobroGroupByArgs['orderBy'] }
        : { orderBy?: HistorialCobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistorialCobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorialCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistorialCobro model
   */
  readonly fields: HistorialCobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistorialCobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistorialCobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistorialCobro model
   */
  interface HistorialCobroFieldRefs {
    readonly id: FieldRef<"HistorialCobro", 'String'>
    readonly created_at: FieldRef<"HistorialCobro", 'DateTime'>
    readonly cobro_id: FieldRef<"HistorialCobro", 'String'>
    readonly detalles_antes: FieldRef<"HistorialCobro", 'String'>
    readonly detalles_despues: FieldRef<"HistorialCobro", 'String'>
    readonly tipo_cambio: FieldRef<"HistorialCobro", 'TipoCambio'>
    readonly usuario_id: FieldRef<"HistorialCobro", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HistorialCobro findUnique
   */
  export type HistorialCobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro findUniqueOrThrow
   */
  export type HistorialCobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro findFirst
   */
  export type HistorialCobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCobros.
     */
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro findFirstOrThrow
   */
  export type HistorialCobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobro to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCobros.
     */
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro findMany
   */
  export type HistorialCobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCobros to fetch.
     */
    where?: HistorialCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCobros to fetch.
     */
    orderBy?: HistorialCobroOrderByWithRelationInput | HistorialCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistorialCobros.
     */
    cursor?: HistorialCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCobros.
     */
    skip?: number
    distinct?: HistorialCobroScalarFieldEnum | HistorialCobroScalarFieldEnum[]
  }

  /**
   * HistorialCobro create
   */
  export type HistorialCobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The data needed to create a HistorialCobro.
     */
    data: XOR<HistorialCobroCreateInput, HistorialCobroUncheckedCreateInput>
  }

  /**
   * HistorialCobro createMany
   */
  export type HistorialCobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistorialCobros.
     */
    data: HistorialCobroCreateManyInput | HistorialCobroCreateManyInput[]
  }

  /**
   * HistorialCobro createManyAndReturn
   */
  export type HistorialCobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * The data used to create many HistorialCobros.
     */
    data: HistorialCobroCreateManyInput | HistorialCobroCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistorialCobro update
   */
  export type HistorialCobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The data needed to update a HistorialCobro.
     */
    data: XOR<HistorialCobroUpdateInput, HistorialCobroUncheckedUpdateInput>
    /**
     * Choose, which HistorialCobro to update.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro updateMany
   */
  export type HistorialCobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistorialCobros.
     */
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyInput>
    /**
     * Filter which HistorialCobros to update
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to update.
     */
    limit?: number
  }

  /**
   * HistorialCobro updateManyAndReturn
   */
  export type HistorialCobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * The data used to update HistorialCobros.
     */
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyInput>
    /**
     * Filter which HistorialCobros to update
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistorialCobro upsert
   */
  export type HistorialCobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * The filter to search for the HistorialCobro to update in case it exists.
     */
    where: HistorialCobroWhereUniqueInput
    /**
     * In case the HistorialCobro found by the `where` argument doesn't exist, create a new HistorialCobro with this data.
     */
    create: XOR<HistorialCobroCreateInput, HistorialCobroUncheckedCreateInput>
    /**
     * In case the HistorialCobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistorialCobroUpdateInput, HistorialCobroUncheckedUpdateInput>
  }

  /**
   * HistorialCobro delete
   */
  export type HistorialCobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
    /**
     * Filter which HistorialCobro to delete.
     */
    where: HistorialCobroWhereUniqueInput
  }

  /**
   * HistorialCobro deleteMany
   */
  export type HistorialCobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCobros to delete
     */
    where?: HistorialCobroWhereInput
    /**
     * Limit how many HistorialCobros to delete.
     */
    limit?: number
  }

  /**
   * HistorialCobro without action
   */
  export type HistorialCobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCobro
     */
    select?: HistorialCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistorialCobro
     */
    omit?: HistorialCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCobroInclude<ExtArgs> | null
  }


  /**
   * Model Servicio
   */

  export type AggregateServicio = {
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  export type ServicioAvgAggregateOutputType = {
    precio_base: number | null
  }

  export type ServicioSumAggregateOutputType = {
    precio_base: number | null
  }

  export type ServicioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    precio_base: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    precio_base: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    precio_base: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServicioAvgAggregateInputType = {
    precio_base?: true
  }

  export type ServicioSumAggregateInputType = {
    precio_base?: true
  }

  export type ServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio_base?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicio to aggregate.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicios
    **/
    _count?: true | ServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioMaxAggregateInputType
  }

  export type GetServicioAggregateType<T extends ServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicio[P]>
      : GetScalarType<T[P], AggregateServicio[P]>
  }




  export type ServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithAggregationInput | ServicioOrderByWithAggregationInput[]
    by: ServicioScalarFieldEnum[] | ServicioScalarFieldEnum
    having?: ServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioCountAggregateInputType | true
    _avg?: ServicioAvgAggregateInputType
    _sum?: ServicioSumAggregateInputType
    _min?: ServicioMinAggregateInputType
    _max?: ServicioMaxAggregateInputType
  }

  export type ServicioGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string | null
    precio_base: number
    created_at: Date
    updated_at: Date
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  type GetServicioGroupByPayload<T extends ServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioGroupByOutputType[P]>
        }
      >
    >


  export type ServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
    conceptos?: boolean | Servicio$conceptosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio_base?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ServicioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "precio_base" | "created_at" | "updated_at", ExtArgs["result"]["servicio"]>
  export type ServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conceptos?: boolean | Servicio$conceptosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServicioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicio"
    objects: {
      conceptos: Prisma.$CobroConceptoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string | null
      precio_base: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["servicio"]>
    composites: {}
  }

  type ServicioGetPayload<S extends boolean | null | undefined | ServicioDefaultArgs> = $Result.GetResult<Prisma.$ServicioPayload, S>

  type ServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicioCountAggregateInputType | true
    }

  export interface ServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicio'], meta: { name: 'Servicio' } }
    /**
     * Find zero or one Servicio that matches the filter.
     * @param {ServicioFindUniqueArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicioFindUniqueArgs>(args: SelectSubset<T, ServicioFindUniqueArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Servicio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicioFindUniqueOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicioFindFirstArgs>(args?: SelectSubset<T, ServicioFindFirstArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicio.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioWithIdOnly = await prisma.servicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicioFindManyArgs>(args?: SelectSubset<T, ServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Servicio.
     * @param {ServicioCreateArgs} args - Arguments to create a Servicio.
     * @example
     * // Create one Servicio
     * const Servicio = await prisma.servicio.create({
     *   data: {
     *     // ... data to create a Servicio
     *   }
     * })
     * 
     */
    create<T extends ServicioCreateArgs>(args: SelectSubset<T, ServicioCreateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Servicios.
     * @param {ServicioCreateManyArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicioCreateManyArgs>(args?: SelectSubset<T, ServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servicios and returns the data saved in the database.
     * @param {ServicioCreateManyAndReturnArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Servicio.
     * @param {ServicioDeleteArgs} args - Arguments to delete one Servicio.
     * @example
     * // Delete one Servicio
     * const Servicio = await prisma.servicio.delete({
     *   where: {
     *     // ... filter to delete one Servicio
     *   }
     * })
     * 
     */
    delete<T extends ServicioDeleteArgs>(args: SelectSubset<T, ServicioDeleteArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Servicio.
     * @param {ServicioUpdateArgs} args - Arguments to update one Servicio.
     * @example
     * // Update one Servicio
     * const servicio = await prisma.servicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicioUpdateArgs>(args: SelectSubset<T, ServicioUpdateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Servicios.
     * @param {ServicioDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicioDeleteManyArgs>(args?: SelectSubset<T, ServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicioUpdateManyArgs>(args: SelectSubset<T, ServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios and returns the data updated in the database.
     * @param {ServicioUpdateManyAndReturnArgs} args - Arguments to update many Servicios.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServicioUpdateManyAndReturnArgs>(args: SelectSubset<T, ServicioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Servicio.
     * @param {ServicioUpsertArgs} args - Arguments to update or create a Servicio.
     * @example
     * // Update or create a Servicio
     * const servicio = await prisma.servicio.upsert({
     *   create: {
     *     // ... data to create a Servicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicio we want to update
     *   }
     * })
     */
    upsert<T extends ServicioUpsertArgs>(args: SelectSubset<T, ServicioUpsertArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicio.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends ServicioCountArgs>(
      args?: Subset<T, ServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioAggregateArgs>(args: Subset<T, ServicioAggregateArgs>): Prisma.PrismaPromise<GetServicioAggregateType<T>>

    /**
     * Group by Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioGroupByArgs['orderBy'] }
        : { orderBy?: ServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicio model
   */
  readonly fields: ServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conceptos<T extends Servicio$conceptosArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$conceptosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CobroConceptoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servicio model
   */
  interface ServicioFieldRefs {
    readonly id: FieldRef<"Servicio", 'String'>
    readonly nombre: FieldRef<"Servicio", 'String'>
    readonly descripcion: FieldRef<"Servicio", 'String'>
    readonly precio_base: FieldRef<"Servicio", 'Float'>
    readonly created_at: FieldRef<"Servicio", 'DateTime'>
    readonly updated_at: FieldRef<"Servicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Servicio findUnique
   */
  export type ServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findUniqueOrThrow
   */
  export type ServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findFirst
   */
  export type ServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findFirstOrThrow
   */
  export type ServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findMany
   */
  export type ServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicios to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio create
   */
  export type ServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicio.
     */
    data: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
  }

  /**
   * Servicio createMany
   */
  export type ServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
  }

  /**
   * Servicio createManyAndReturn
   */
  export type ServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
  }

  /**
   * Servicio update
   */
  export type ServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicio.
     */
    data: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
    /**
     * Choose, which Servicio to update.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio updateMany
   */
  export type ServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
  }

  /**
   * Servicio updateManyAndReturn
   */
  export type ServicioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
  }

  /**
   * Servicio upsert
   */
  export type ServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicio to update in case it exists.
     */
    where: ServicioWhereUniqueInput
    /**
     * In case the Servicio found by the `where` argument doesn't exist, create a new Servicio with this data.
     */
    create: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
    /**
     * In case the Servicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
  }

  /**
   * Servicio delete
   */
  export type ServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter which Servicio to delete.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio deleteMany
   */
  export type ServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicios to delete
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to delete.
     */
    limit?: number
  }

  /**
   * Servicio.conceptos
   */
  export type Servicio$conceptosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CobroConcepto
     */
    select?: CobroConceptoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CobroConcepto
     */
    omit?: CobroConceptoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CobroConceptoInclude<ExtArgs> | null
    where?: CobroConceptoWhereInput
    orderBy?: CobroConceptoOrderByWithRelationInput | CobroConceptoOrderByWithRelationInput[]
    cursor?: CobroConceptoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CobroConceptoScalarFieldEnum | CobroConceptoScalarFieldEnum[]
  }

  /**
   * Servicio without action
   */
  export type ServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
  }


  /**
   * Model MetodoPagoCobro
   */

  export type AggregateMetodoPagoCobro = {
    _count: MetodoPagoCobroCountAggregateOutputType | null
    _avg: MetodoPagoCobroAvgAggregateOutputType | null
    _sum: MetodoPagoCobroSumAggregateOutputType | null
    _min: MetodoPagoCobroMinAggregateOutputType | null
    _max: MetodoPagoCobroMaxAggregateOutputType | null
  }

  export type MetodoPagoCobroAvgAggregateOutputType = {
    monto: number | null
  }

  export type MetodoPagoCobroSumAggregateOutputType = {
    monto: number | null
  }

  export type MetodoPagoCobroMinAggregateOutputType = {
    id: string | null
    cobro_id: string | null
    metodo_pago: $Enums.MetodoPago | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MetodoPagoCobroMaxAggregateOutputType = {
    id: string | null
    cobro_id: string | null
    metodo_pago: $Enums.MetodoPago | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MetodoPagoCobroCountAggregateOutputType = {
    id: number
    cobro_id: number
    metodo_pago: number
    monto: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type MetodoPagoCobroAvgAggregateInputType = {
    monto?: true
  }

  export type MetodoPagoCobroSumAggregateInputType = {
    monto?: true
  }

  export type MetodoPagoCobroMinAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type MetodoPagoCobroMaxAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type MetodoPagoCobroCountAggregateInputType = {
    id?: true
    cobro_id?: true
    metodo_pago?: true
    monto?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type MetodoPagoCobroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPagoCobro to aggregate.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetodoPagoCobros
    **/
    _count?: true | MetodoPagoCobroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetodoPagoCobroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetodoPagoCobroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetodoPagoCobroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetodoPagoCobroMaxAggregateInputType
  }

  export type GetMetodoPagoCobroAggregateType<T extends MetodoPagoCobroAggregateArgs> = {
        [P in keyof T & keyof AggregateMetodoPagoCobro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetodoPagoCobro[P]>
      : GetScalarType<T[P], AggregateMetodoPagoCobro[P]>
  }




  export type MetodoPagoCobroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetodoPagoCobroWhereInput
    orderBy?: MetodoPagoCobroOrderByWithAggregationInput | MetodoPagoCobroOrderByWithAggregationInput[]
    by: MetodoPagoCobroScalarFieldEnum[] | MetodoPagoCobroScalarFieldEnum
    having?: MetodoPagoCobroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetodoPagoCobroCountAggregateInputType | true
    _avg?: MetodoPagoCobroAvgAggregateInputType
    _sum?: MetodoPagoCobroSumAggregateInputType
    _min?: MetodoPagoCobroMinAggregateInputType
    _max?: MetodoPagoCobroMaxAggregateInputType
  }

  export type MetodoPagoCobroGroupByOutputType = {
    id: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at: Date
    updated_at: Date
    _count: MetodoPagoCobroCountAggregateOutputType | null
    _avg: MetodoPagoCobroAvgAggregateOutputType | null
    _sum: MetodoPagoCobroSumAggregateOutputType | null
    _min: MetodoPagoCobroMinAggregateOutputType | null
    _max: MetodoPagoCobroMaxAggregateOutputType | null
  }

  type GetMetodoPagoCobroGroupByPayload<T extends MetodoPagoCobroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetodoPagoCobroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetodoPagoCobroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetodoPagoCobroGroupByOutputType[P]>
            : GetScalarType<T[P], MetodoPagoCobroGroupByOutputType[P]>
        }
      >
    >


  export type MetodoPagoCobroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPagoCobro"]>

  export type MetodoPagoCobroSelectScalar = {
    id?: boolean
    cobro_id?: boolean
    metodo_pago?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type MetodoPagoCobroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cobro_id" | "metodo_pago" | "monto" | "created_at" | "updated_at", ExtArgs["result"]["metodoPagoCobro"]>
  export type MetodoPagoCobroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }
  export type MetodoPagoCobroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }
  export type MetodoPagoCobroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobro?: boolean | CobroDefaultArgs<ExtArgs>
  }

  export type $MetodoPagoCobroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetodoPagoCobro"
    objects: {
      cobro: Prisma.$CobroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cobro_id: string
      metodo_pago: $Enums.MetodoPago
      monto: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["metodoPagoCobro"]>
    composites: {}
  }

  type MetodoPagoCobroGetPayload<S extends boolean | null | undefined | MetodoPagoCobroDefaultArgs> = $Result.GetResult<Prisma.$MetodoPagoCobroPayload, S>

  type MetodoPagoCobroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetodoPagoCobroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetodoPagoCobroCountAggregateInputType | true
    }

  export interface MetodoPagoCobroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetodoPagoCobro'], meta: { name: 'MetodoPagoCobro' } }
    /**
     * Find zero or one MetodoPagoCobro that matches the filter.
     * @param {MetodoPagoCobroFindUniqueArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetodoPagoCobroFindUniqueArgs>(args: SelectSubset<T, MetodoPagoCobroFindUniqueArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetodoPagoCobro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetodoPagoCobroFindUniqueOrThrowArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetodoPagoCobroFindUniqueOrThrowArgs>(args: SelectSubset<T, MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetodoPagoCobro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindFirstArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetodoPagoCobroFindFirstArgs>(args?: SelectSubset<T, MetodoPagoCobroFindFirstArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetodoPagoCobro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindFirstOrThrowArgs} args - Arguments to find a MetodoPagoCobro
     * @example
     * // Get one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetodoPagoCobroFindFirstOrThrowArgs>(args?: SelectSubset<T, MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetodoPagoCobros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetodoPagoCobros
     * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany()
     * 
     * // Get first 10 MetodoPagoCobros
     * const metodoPagoCobros = await prisma.metodoPagoCobro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetodoPagoCobroFindManyArgs>(args?: SelectSubset<T, MetodoPagoCobroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetodoPagoCobro.
     * @param {MetodoPagoCobroCreateArgs} args - Arguments to create a MetodoPagoCobro.
     * @example
     * // Create one MetodoPagoCobro
     * const MetodoPagoCobro = await prisma.metodoPagoCobro.create({
     *   data: {
     *     // ... data to create a MetodoPagoCobro
     *   }
     * })
     * 
     */
    create<T extends MetodoPagoCobroCreateArgs>(args: SelectSubset<T, MetodoPagoCobroCreateArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetodoPagoCobros.
     * @param {MetodoPagoCobroCreateManyArgs} args - Arguments to create many MetodoPagoCobros.
     * @example
     * // Create many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetodoPagoCobroCreateManyArgs>(args?: SelectSubset<T, MetodoPagoCobroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetodoPagoCobros and returns the data saved in the database.
     * @param {MetodoPagoCobroCreateManyAndReturnArgs} args - Arguments to create many MetodoPagoCobros.
     * @example
     * // Create many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetodoPagoCobros and only return the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetodoPagoCobroCreateManyAndReturnArgs>(args?: SelectSubset<T, MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetodoPagoCobro.
     * @param {MetodoPagoCobroDeleteArgs} args - Arguments to delete one MetodoPagoCobro.
     * @example
     * // Delete one MetodoPagoCobro
     * const MetodoPagoCobro = await prisma.metodoPagoCobro.delete({
     *   where: {
     *     // ... filter to delete one MetodoPagoCobro
     *   }
     * })
     * 
     */
    delete<T extends MetodoPagoCobroDeleteArgs>(args: SelectSubset<T, MetodoPagoCobroDeleteArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetodoPagoCobro.
     * @param {MetodoPagoCobroUpdateArgs} args - Arguments to update one MetodoPagoCobro.
     * @example
     * // Update one MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetodoPagoCobroUpdateArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetodoPagoCobros.
     * @param {MetodoPagoCobroDeleteManyArgs} args - Arguments to filter MetodoPagoCobros to delete.
     * @example
     * // Delete a few MetodoPagoCobros
     * const { count } = await prisma.metodoPagoCobro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetodoPagoCobroDeleteManyArgs>(args?: SelectSubset<T, MetodoPagoCobroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagoCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetodoPagoCobroUpdateManyArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagoCobros and returns the data updated in the database.
     * @param {MetodoPagoCobroUpdateManyAndReturnArgs} args - Arguments to update many MetodoPagoCobros.
     * @example
     * // Update many MetodoPagoCobros
     * const metodoPagoCobro = await prisma.metodoPagoCobro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetodoPagoCobros and only return the `id`
     * const metodoPagoCobroWithIdOnly = await prisma.metodoPagoCobro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetodoPagoCobroUpdateManyAndReturnArgs>(args: SelectSubset<T, MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetodoPagoCobro.
     * @param {MetodoPagoCobroUpsertArgs} args - Arguments to update or create a MetodoPagoCobro.
     * @example
     * // Update or create a MetodoPagoCobro
     * const metodoPagoCobro = await prisma.metodoPagoCobro.upsert({
     *   create: {
     *     // ... data to create a MetodoPagoCobro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetodoPagoCobro we want to update
     *   }
     * })
     */
    upsert<T extends MetodoPagoCobroUpsertArgs>(args: SelectSubset<T, MetodoPagoCobroUpsertArgs<ExtArgs>>): Prisma__MetodoPagoCobroClient<$Result.GetResult<Prisma.$MetodoPagoCobroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetodoPagoCobros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroCountArgs} args - Arguments to filter MetodoPagoCobros to count.
     * @example
     * // Count the number of MetodoPagoCobros
     * const count = await prisma.metodoPagoCobro.count({
     *   where: {
     *     // ... the filter for the MetodoPagoCobros we want to count
     *   }
     * })
    **/
    count<T extends MetodoPagoCobroCountArgs>(
      args?: Subset<T, MetodoPagoCobroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetodoPagoCobroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetodoPagoCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetodoPagoCobroAggregateArgs>(args: Subset<T, MetodoPagoCobroAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoCobroAggregateType<T>>

    /**
     * Group by MetodoPagoCobro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCobroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetodoPagoCobroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetodoPagoCobroGroupByArgs['orderBy'] }
        : { orderBy?: MetodoPagoCobroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetodoPagoCobroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoCobroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetodoPagoCobro model
   */
  readonly fields: MetodoPagoCobroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetodoPagoCobro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetodoPagoCobroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobro<T extends CobroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CobroDefaultArgs<ExtArgs>>): Prisma__CobroClient<$Result.GetResult<Prisma.$CobroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetodoPagoCobro model
   */
  interface MetodoPagoCobroFieldRefs {
    readonly id: FieldRef<"MetodoPagoCobro", 'String'>
    readonly cobro_id: FieldRef<"MetodoPagoCobro", 'String'>
    readonly metodo_pago: FieldRef<"MetodoPagoCobro", 'MetodoPago'>
    readonly monto: FieldRef<"MetodoPagoCobro", 'Float'>
    readonly created_at: FieldRef<"MetodoPagoCobro", 'DateTime'>
    readonly updated_at: FieldRef<"MetodoPagoCobro", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MetodoPagoCobro findUnique
   */
  export type MetodoPagoCobroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro findUniqueOrThrow
   */
  export type MetodoPagoCobroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro findFirst
   */
  export type MetodoPagoCobroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagoCobros.
     */
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro findFirstOrThrow
   */
  export type MetodoPagoCobroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobro to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagoCobros.
     */
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro findMany
   */
  export type MetodoPagoCobroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagoCobros to fetch.
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagoCobros to fetch.
     */
    orderBy?: MetodoPagoCobroOrderByWithRelationInput | MetodoPagoCobroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetodoPagoCobros.
     */
    cursor?: MetodoPagoCobroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagoCobros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagoCobros.
     */
    skip?: number
    distinct?: MetodoPagoCobroScalarFieldEnum | MetodoPagoCobroScalarFieldEnum[]
  }

  /**
   * MetodoPagoCobro create
   */
  export type MetodoPagoCobroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The data needed to create a MetodoPagoCobro.
     */
    data: XOR<MetodoPagoCobroCreateInput, MetodoPagoCobroUncheckedCreateInput>
  }

  /**
   * MetodoPagoCobro createMany
   */
  export type MetodoPagoCobroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetodoPagoCobros.
     */
    data: MetodoPagoCobroCreateManyInput | MetodoPagoCobroCreateManyInput[]
  }

  /**
   * MetodoPagoCobro createManyAndReturn
   */
  export type MetodoPagoCobroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * The data used to create many MetodoPagoCobros.
     */
    data: MetodoPagoCobroCreateManyInput | MetodoPagoCobroCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetodoPagoCobro update
   */
  export type MetodoPagoCobroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The data needed to update a MetodoPagoCobro.
     */
    data: XOR<MetodoPagoCobroUpdateInput, MetodoPagoCobroUncheckedUpdateInput>
    /**
     * Choose, which MetodoPagoCobro to update.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro updateMany
   */
  export type MetodoPagoCobroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetodoPagoCobros.
     */
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagoCobros to update
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to update.
     */
    limit?: number
  }

  /**
   * MetodoPagoCobro updateManyAndReturn
   */
  export type MetodoPagoCobroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * The data used to update MetodoPagoCobros.
     */
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagoCobros to update
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetodoPagoCobro upsert
   */
  export type MetodoPagoCobroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * The filter to search for the MetodoPagoCobro to update in case it exists.
     */
    where: MetodoPagoCobroWhereUniqueInput
    /**
     * In case the MetodoPagoCobro found by the `where` argument doesn't exist, create a new MetodoPagoCobro with this data.
     */
    create: XOR<MetodoPagoCobroCreateInput, MetodoPagoCobroUncheckedCreateInput>
    /**
     * In case the MetodoPagoCobro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetodoPagoCobroUpdateInput, MetodoPagoCobroUncheckedUpdateInput>
  }

  /**
   * MetodoPagoCobro delete
   */
  export type MetodoPagoCobroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
    /**
     * Filter which MetodoPagoCobro to delete.
     */
    where: MetodoPagoCobroWhereUniqueInput
  }

  /**
   * MetodoPagoCobro deleteMany
   */
  export type MetodoPagoCobroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPagoCobros to delete
     */
    where?: MetodoPagoCobroWhereInput
    /**
     * Limit how many MetodoPagoCobros to delete.
     */
    limit?: number
  }

  /**
   * MetodoPagoCobro without action
   */
  export type MetodoPagoCobroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCobro
     */
    select?: MetodoPagoCobroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetodoPagoCobro
     */
    omit?: MetodoPagoCobroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetodoPagoCobroInclude<ExtArgs> | null
  }


  /**
   * Model Allergen
   */

  export type AggregateAllergen = {
    _count: AllergenCountAggregateOutputType | null
    _min: AllergenMinAggregateOutputType | null
    _max: AllergenMaxAggregateOutputType | null
  }

  export type AllergenMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    alxoidType: $Enums.AlxoidType | null
    isAlxoidExclusive: boolean | null
  }

  export type AllergenMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    alxoidType: $Enums.AlxoidType | null
    isAlxoidExclusive: boolean | null
  }

  export type AllergenCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    alxoidType: number
    isAlxoidExclusive: number
    _all: number
  }


  export type AllergenMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    alxoidType?: true
    isAlxoidExclusive?: true
  }

  export type AllergenMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    alxoidType?: true
    isAlxoidExclusive?: true
  }

  export type AllergenCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    alxoidType?: true
    isAlxoidExclusive?: true
    _all?: true
  }

  export type AllergenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allergen to aggregate.
     */
    where?: AllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergens to fetch.
     */
    orderBy?: AllergenOrderByWithRelationInput | AllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allergens
    **/
    _count?: true | AllergenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergenMaxAggregateInputType
  }

  export type GetAllergenAggregateType<T extends AllergenAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergen]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergen[P]>
      : GetScalarType<T[P], AggregateAllergen[P]>
  }




  export type AllergenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllergenWhereInput
    orderBy?: AllergenOrderByWithAggregationInput | AllergenOrderByWithAggregationInput[]
    by: AllergenScalarFieldEnum[] | AllergenScalarFieldEnum
    having?: AllergenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergenCountAggregateInputType | true
    _min?: AllergenMinAggregateInputType
    _max?: AllergenMaxAggregateInputType
  }

  export type AllergenGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    alxoidType: $Enums.AlxoidType | null
    isAlxoidExclusive: boolean
    _count: AllergenCountAggregateOutputType | null
    _min: AllergenMinAggregateOutputType | null
    _max: AllergenMaxAggregateOutputType | null
  }

  type GetAllergenGroupByPayload<T extends AllergenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllergenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergenGroupByOutputType[P]>
            : GetScalarType<T[P], AllergenGroupByOutputType[P]>
        }
      >
    >


  export type AllergenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    alxoidType?: boolean
    isAlxoidExclusive?: boolean
    ProductAllergen?: boolean | Allergen$ProductAllergenArgs<ExtArgs>
    _count?: boolean | AllergenCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allergen"]>

  export type AllergenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    alxoidType?: boolean
    isAlxoidExclusive?: boolean
  }, ExtArgs["result"]["allergen"]>

  export type AllergenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    alxoidType?: boolean
    isAlxoidExclusive?: boolean
  }, ExtArgs["result"]["allergen"]>

  export type AllergenSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    alxoidType?: boolean
    isAlxoidExclusive?: boolean
  }

  export type AllergenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "alxoidType" | "isAlxoidExclusive", ExtArgs["result"]["allergen"]>
  export type AllergenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProductAllergen?: boolean | Allergen$ProductAllergenArgs<ExtArgs>
    _count?: boolean | AllergenCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AllergenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AllergenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AllergenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Allergen"
    objects: {
      ProductAllergen: Prisma.$ProductAllergenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      alxoidType: $Enums.AlxoidType | null
      isAlxoidExclusive: boolean
    }, ExtArgs["result"]["allergen"]>
    composites: {}
  }

  type AllergenGetPayload<S extends boolean | null | undefined | AllergenDefaultArgs> = $Result.GetResult<Prisma.$AllergenPayload, S>

  type AllergenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AllergenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AllergenCountAggregateInputType | true
    }

  export interface AllergenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allergen'], meta: { name: 'Allergen' } }
    /**
     * Find zero or one Allergen that matches the filter.
     * @param {AllergenFindUniqueArgs} args - Arguments to find a Allergen
     * @example
     * // Get one Allergen
     * const allergen = await prisma.allergen.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllergenFindUniqueArgs>(args: SelectSubset<T, AllergenFindUniqueArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Allergen that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AllergenFindUniqueOrThrowArgs} args - Arguments to find a Allergen
     * @example
     * // Get one Allergen
     * const allergen = await prisma.allergen.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllergenFindUniqueOrThrowArgs>(args: SelectSubset<T, AllergenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allergen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenFindFirstArgs} args - Arguments to find a Allergen
     * @example
     * // Get one Allergen
     * const allergen = await prisma.allergen.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllergenFindFirstArgs>(args?: SelectSubset<T, AllergenFindFirstArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allergen that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenFindFirstOrThrowArgs} args - Arguments to find a Allergen
     * @example
     * // Get one Allergen
     * const allergen = await prisma.allergen.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllergenFindFirstOrThrowArgs>(args?: SelectSubset<T, AllergenFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Allergens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergens
     * const allergens = await prisma.allergen.findMany()
     * 
     * // Get first 10 Allergens
     * const allergens = await prisma.allergen.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergenWithIdOnly = await prisma.allergen.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllergenFindManyArgs>(args?: SelectSubset<T, AllergenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Allergen.
     * @param {AllergenCreateArgs} args - Arguments to create a Allergen.
     * @example
     * // Create one Allergen
     * const Allergen = await prisma.allergen.create({
     *   data: {
     *     // ... data to create a Allergen
     *   }
     * })
     * 
     */
    create<T extends AllergenCreateArgs>(args: SelectSubset<T, AllergenCreateArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Allergens.
     * @param {AllergenCreateManyArgs} args - Arguments to create many Allergens.
     * @example
     * // Create many Allergens
     * const allergen = await prisma.allergen.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllergenCreateManyArgs>(args?: SelectSubset<T, AllergenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Allergens and returns the data saved in the database.
     * @param {AllergenCreateManyAndReturnArgs} args - Arguments to create many Allergens.
     * @example
     * // Create many Allergens
     * const allergen = await prisma.allergen.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Allergens and only return the `id`
     * const allergenWithIdOnly = await prisma.allergen.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllergenCreateManyAndReturnArgs>(args?: SelectSubset<T, AllergenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Allergen.
     * @param {AllergenDeleteArgs} args - Arguments to delete one Allergen.
     * @example
     * // Delete one Allergen
     * const Allergen = await prisma.allergen.delete({
     *   where: {
     *     // ... filter to delete one Allergen
     *   }
     * })
     * 
     */
    delete<T extends AllergenDeleteArgs>(args: SelectSubset<T, AllergenDeleteArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Allergen.
     * @param {AllergenUpdateArgs} args - Arguments to update one Allergen.
     * @example
     * // Update one Allergen
     * const allergen = await prisma.allergen.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllergenUpdateArgs>(args: SelectSubset<T, AllergenUpdateArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Allergens.
     * @param {AllergenDeleteManyArgs} args - Arguments to filter Allergens to delete.
     * @example
     * // Delete a few Allergens
     * const { count } = await prisma.allergen.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllergenDeleteManyArgs>(args?: SelectSubset<T, AllergenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergens
     * const allergen = await prisma.allergen.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllergenUpdateManyArgs>(args: SelectSubset<T, AllergenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergens and returns the data updated in the database.
     * @param {AllergenUpdateManyAndReturnArgs} args - Arguments to update many Allergens.
     * @example
     * // Update many Allergens
     * const allergen = await prisma.allergen.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Allergens and only return the `id`
     * const allergenWithIdOnly = await prisma.allergen.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AllergenUpdateManyAndReturnArgs>(args: SelectSubset<T, AllergenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Allergen.
     * @param {AllergenUpsertArgs} args - Arguments to update or create a Allergen.
     * @example
     * // Update or create a Allergen
     * const allergen = await prisma.allergen.upsert({
     *   create: {
     *     // ... data to create a Allergen
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergen we want to update
     *   }
     * })
     */
    upsert<T extends AllergenUpsertArgs>(args: SelectSubset<T, AllergenUpsertArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Allergens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenCountArgs} args - Arguments to filter Allergens to count.
     * @example
     * // Count the number of Allergens
     * const count = await prisma.allergen.count({
     *   where: {
     *     // ... the filter for the Allergens we want to count
     *   }
     * })
    **/
    count<T extends AllergenCountArgs>(
      args?: Subset<T, AllergenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergenAggregateArgs>(args: Subset<T, AllergenAggregateArgs>): Prisma.PrismaPromise<GetAllergenAggregateType<T>>

    /**
     * Group by Allergen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergenGroupByArgs['orderBy'] }
        : { orderBy?: AllergenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Allergen model
   */
  readonly fields: AllergenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allergen.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllergenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ProductAllergen<T extends Allergen$ProductAllergenArgs<ExtArgs> = {}>(args?: Subset<T, Allergen$ProductAllergenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Allergen model
   */
  interface AllergenFieldRefs {
    readonly id: FieldRef<"Allergen", 'String'>
    readonly name: FieldRef<"Allergen", 'String'>
    readonly createdAt: FieldRef<"Allergen", 'DateTime'>
    readonly updatedAt: FieldRef<"Allergen", 'DateTime'>
    readonly alxoidType: FieldRef<"Allergen", 'AlxoidType'>
    readonly isAlxoidExclusive: FieldRef<"Allergen", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Allergen findUnique
   */
  export type AllergenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter, which Allergen to fetch.
     */
    where: AllergenWhereUniqueInput
  }

  /**
   * Allergen findUniqueOrThrow
   */
  export type AllergenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter, which Allergen to fetch.
     */
    where: AllergenWhereUniqueInput
  }

  /**
   * Allergen findFirst
   */
  export type AllergenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter, which Allergen to fetch.
     */
    where?: AllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergens to fetch.
     */
    orderBy?: AllergenOrderByWithRelationInput | AllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergens.
     */
    cursor?: AllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergens.
     */
    distinct?: AllergenScalarFieldEnum | AllergenScalarFieldEnum[]
  }

  /**
   * Allergen findFirstOrThrow
   */
  export type AllergenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter, which Allergen to fetch.
     */
    where?: AllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergens to fetch.
     */
    orderBy?: AllergenOrderByWithRelationInput | AllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergens.
     */
    cursor?: AllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergens.
     */
    distinct?: AllergenScalarFieldEnum | AllergenScalarFieldEnum[]
  }

  /**
   * Allergen findMany
   */
  export type AllergenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter, which Allergens to fetch.
     */
    where?: AllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergens to fetch.
     */
    orderBy?: AllergenOrderByWithRelationInput | AllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allergens.
     */
    cursor?: AllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergens.
     */
    skip?: number
    distinct?: AllergenScalarFieldEnum | AllergenScalarFieldEnum[]
  }

  /**
   * Allergen create
   */
  export type AllergenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * The data needed to create a Allergen.
     */
    data: XOR<AllergenCreateInput, AllergenUncheckedCreateInput>
  }

  /**
   * Allergen createMany
   */
  export type AllergenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Allergens.
     */
    data: AllergenCreateManyInput | AllergenCreateManyInput[]
  }

  /**
   * Allergen createManyAndReturn
   */
  export type AllergenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * The data used to create many Allergens.
     */
    data: AllergenCreateManyInput | AllergenCreateManyInput[]
  }

  /**
   * Allergen update
   */
  export type AllergenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * The data needed to update a Allergen.
     */
    data: XOR<AllergenUpdateInput, AllergenUncheckedUpdateInput>
    /**
     * Choose, which Allergen to update.
     */
    where: AllergenWhereUniqueInput
  }

  /**
   * Allergen updateMany
   */
  export type AllergenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Allergens.
     */
    data: XOR<AllergenUpdateManyMutationInput, AllergenUncheckedUpdateManyInput>
    /**
     * Filter which Allergens to update
     */
    where?: AllergenWhereInput
    /**
     * Limit how many Allergens to update.
     */
    limit?: number
  }

  /**
   * Allergen updateManyAndReturn
   */
  export type AllergenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * The data used to update Allergens.
     */
    data: XOR<AllergenUpdateManyMutationInput, AllergenUncheckedUpdateManyInput>
    /**
     * Filter which Allergens to update
     */
    where?: AllergenWhereInput
    /**
     * Limit how many Allergens to update.
     */
    limit?: number
  }

  /**
   * Allergen upsert
   */
  export type AllergenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * The filter to search for the Allergen to update in case it exists.
     */
    where: AllergenWhereUniqueInput
    /**
     * In case the Allergen found by the `where` argument doesn't exist, create a new Allergen with this data.
     */
    create: XOR<AllergenCreateInput, AllergenUncheckedCreateInput>
    /**
     * In case the Allergen was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllergenUpdateInput, AllergenUncheckedUpdateInput>
  }

  /**
   * Allergen delete
   */
  export type AllergenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
    /**
     * Filter which Allergen to delete.
     */
    where: AllergenWhereUniqueInput
  }

  /**
   * Allergen deleteMany
   */
  export type AllergenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allergens to delete
     */
    where?: AllergenWhereInput
    /**
     * Limit how many Allergens to delete.
     */
    limit?: number
  }

  /**
   * Allergen.ProductAllergen
   */
  export type Allergen$ProductAllergenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    where?: ProductAllergenWhereInput
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    cursor?: ProductAllergenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductAllergenScalarFieldEnum | ProductAllergenScalarFieldEnum[]
  }

  /**
   * Allergen without action
   */
  export type AllergenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergen
     */
    select?: AllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allergen
     */
    omit?: AllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergenInclude<ExtArgs> | null
  }


  /**
   * Model InventoryUsage
   */

  export type AggregateInventoryUsage = {
    _count: InventoryUsageCountAggregateOutputType | null
    _min: InventoryUsageMinAggregateOutputType | null
    _max: InventoryUsageMaxAggregateOutputType | null
  }

  export type InventoryUsageMinAggregateOutputType = {
    id: string | null
    nombrePaciente: string | null
    pacienteId: string | null
    tipoTratamiento: $Enums.TipoTratamiento | null
    observaciones: string | null
    tuvoReaccion: boolean | null
    descripcionReaccion: string | null
    createdAt: Date | null
    sedeId: string | null
    updatedAt: Date | null
    userId: string | null
  }

  export type InventoryUsageMaxAggregateOutputType = {
    id: string | null
    nombrePaciente: string | null
    pacienteId: string | null
    tipoTratamiento: $Enums.TipoTratamiento | null
    observaciones: string | null
    tuvoReaccion: boolean | null
    descripcionReaccion: string | null
    createdAt: Date | null
    sedeId: string | null
    updatedAt: Date | null
    userId: string | null
  }

  export type InventoryUsageCountAggregateOutputType = {
    id: number
    nombrePaciente: number
    pacienteId: number
    tipoTratamiento: number
    observaciones: number
    tuvoReaccion: number
    descripcionReaccion: number
    createdAt: number
    sedeId: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type InventoryUsageMinAggregateInputType = {
    id?: true
    nombrePaciente?: true
    pacienteId?: true
    tipoTratamiento?: true
    observaciones?: true
    tuvoReaccion?: true
    descripcionReaccion?: true
    createdAt?: true
    sedeId?: true
    updatedAt?: true
    userId?: true
  }

  export type InventoryUsageMaxAggregateInputType = {
    id?: true
    nombrePaciente?: true
    pacienteId?: true
    tipoTratamiento?: true
    observaciones?: true
    tuvoReaccion?: true
    descripcionReaccion?: true
    createdAt?: true
    sedeId?: true
    updatedAt?: true
    userId?: true
  }

  export type InventoryUsageCountAggregateInputType = {
    id?: true
    nombrePaciente?: true
    pacienteId?: true
    tipoTratamiento?: true
    observaciones?: true
    tuvoReaccion?: true
    descripcionReaccion?: true
    createdAt?: true
    sedeId?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type InventoryUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryUsage to aggregate.
     */
    where?: InventoryUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsages to fetch.
     */
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryUsages
    **/
    _count?: true | InventoryUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryUsageMaxAggregateInputType
  }

  export type GetInventoryUsageAggregateType<T extends InventoryUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryUsage[P]>
      : GetScalarType<T[P], AggregateInventoryUsage[P]>
  }




  export type InventoryUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageWhereInput
    orderBy?: InventoryUsageOrderByWithAggregationInput | InventoryUsageOrderByWithAggregationInput[]
    by: InventoryUsageScalarFieldEnum[] | InventoryUsageScalarFieldEnum
    having?: InventoryUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryUsageCountAggregateInputType | true
    _min?: InventoryUsageMinAggregateInputType
    _max?: InventoryUsageMaxAggregateInputType
  }

  export type InventoryUsageGroupByOutputType = {
    id: string
    nombrePaciente: string
    pacienteId: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones: string | null
    tuvoReaccion: boolean
    descripcionReaccion: string | null
    createdAt: Date
    sedeId: string
    updatedAt: Date
    userId: string
    _count: InventoryUsageCountAggregateOutputType | null
    _min: InventoryUsageMinAggregateOutputType | null
    _max: InventoryUsageMaxAggregateOutputType | null
  }

  type GetInventoryUsageGroupByPayload<T extends InventoryUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryUsageGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryUsageGroupByOutputType[P]>
        }
      >
    >


  export type InventoryUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombrePaciente?: boolean
    pacienteId?: boolean
    tipoTratamiento?: boolean
    observaciones?: boolean
    tuvoReaccion?: boolean
    descripcionReaccion?: boolean
    createdAt?: boolean
    sedeId?: boolean
    updatedAt?: boolean
    userId?: boolean
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
    InventoryUsageDetail?: boolean | InventoryUsage$InventoryUsageDetailArgs<ExtArgs>
    _count?: boolean | InventoryUsageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsage"]>

  export type InventoryUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombrePaciente?: boolean
    pacienteId?: boolean
    tipoTratamiento?: boolean
    observaciones?: boolean
    tuvoReaccion?: boolean
    descripcionReaccion?: boolean
    createdAt?: boolean
    sedeId?: boolean
    updatedAt?: boolean
    userId?: boolean
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsage"]>

  export type InventoryUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombrePaciente?: boolean
    pacienteId?: boolean
    tipoTratamiento?: boolean
    observaciones?: boolean
    tuvoReaccion?: boolean
    descripcionReaccion?: boolean
    createdAt?: boolean
    sedeId?: boolean
    updatedAt?: boolean
    userId?: boolean
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsage"]>

  export type InventoryUsageSelectScalar = {
    id?: boolean
    nombrePaciente?: boolean
    pacienteId?: boolean
    tipoTratamiento?: boolean
    observaciones?: boolean
    tuvoReaccion?: boolean
    descripcionReaccion?: boolean
    createdAt?: boolean
    sedeId?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type InventoryUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombrePaciente" | "pacienteId" | "tipoTratamiento" | "observaciones" | "tuvoReaccion" | "descripcionReaccion" | "createdAt" | "sedeId" | "updatedAt" | "userId", ExtArgs["result"]["inventoryUsage"]>
  export type InventoryUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
    InventoryUsageDetail?: boolean | InventoryUsage$InventoryUsageDetailArgs<ExtArgs>
    _count?: boolean | InventoryUsageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
  }
  export type InventoryUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Paciente?: boolean | InventoryUsage$PacienteArgs<ExtArgs>
  }

  export type $InventoryUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryUsage"
    objects: {
      Sede: Prisma.$SedePayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
      Paciente: Prisma.$PacientePayload<ExtArgs> | null
      InventoryUsageDetail: Prisma.$InventoryUsageDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombrePaciente: string
      pacienteId: string | null
      tipoTratamiento: $Enums.TipoTratamiento
      observaciones: string | null
      tuvoReaccion: boolean
      descripcionReaccion: string | null
      createdAt: Date
      sedeId: string
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["inventoryUsage"]>
    composites: {}
  }

  type InventoryUsageGetPayload<S extends boolean | null | undefined | InventoryUsageDefaultArgs> = $Result.GetResult<Prisma.$InventoryUsagePayload, S>

  type InventoryUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryUsageCountAggregateInputType | true
    }

  export interface InventoryUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryUsage'], meta: { name: 'InventoryUsage' } }
    /**
     * Find zero or one InventoryUsage that matches the filter.
     * @param {InventoryUsageFindUniqueArgs} args - Arguments to find a InventoryUsage
     * @example
     * // Get one InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryUsageFindUniqueArgs>(args: SelectSubset<T, InventoryUsageFindUniqueArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryUsageFindUniqueOrThrowArgs} args - Arguments to find a InventoryUsage
     * @example
     * // Get one InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageFindFirstArgs} args - Arguments to find a InventoryUsage
     * @example
     * // Get one InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryUsageFindFirstArgs>(args?: SelectSubset<T, InventoryUsageFindFirstArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageFindFirstOrThrowArgs} args - Arguments to find a InventoryUsage
     * @example
     * // Get one InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryUsages
     * const inventoryUsages = await prisma.inventoryUsage.findMany()
     * 
     * // Get first 10 InventoryUsages
     * const inventoryUsages = await prisma.inventoryUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryUsageWithIdOnly = await prisma.inventoryUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryUsageFindManyArgs>(args?: SelectSubset<T, InventoryUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryUsage.
     * @param {InventoryUsageCreateArgs} args - Arguments to create a InventoryUsage.
     * @example
     * // Create one InventoryUsage
     * const InventoryUsage = await prisma.inventoryUsage.create({
     *   data: {
     *     // ... data to create a InventoryUsage
     *   }
     * })
     * 
     */
    create<T extends InventoryUsageCreateArgs>(args: SelectSubset<T, InventoryUsageCreateArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryUsages.
     * @param {InventoryUsageCreateManyArgs} args - Arguments to create many InventoryUsages.
     * @example
     * // Create many InventoryUsages
     * const inventoryUsage = await prisma.inventoryUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryUsageCreateManyArgs>(args?: SelectSubset<T, InventoryUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryUsages and returns the data saved in the database.
     * @param {InventoryUsageCreateManyAndReturnArgs} args - Arguments to create many InventoryUsages.
     * @example
     * // Create many InventoryUsages
     * const inventoryUsage = await prisma.inventoryUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryUsages and only return the `id`
     * const inventoryUsageWithIdOnly = await prisma.inventoryUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InventoryUsage.
     * @param {InventoryUsageDeleteArgs} args - Arguments to delete one InventoryUsage.
     * @example
     * // Delete one InventoryUsage
     * const InventoryUsage = await prisma.inventoryUsage.delete({
     *   where: {
     *     // ... filter to delete one InventoryUsage
     *   }
     * })
     * 
     */
    delete<T extends InventoryUsageDeleteArgs>(args: SelectSubset<T, InventoryUsageDeleteArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryUsage.
     * @param {InventoryUsageUpdateArgs} args - Arguments to update one InventoryUsage.
     * @example
     * // Update one InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUsageUpdateArgs>(args: SelectSubset<T, InventoryUsageUpdateArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryUsages.
     * @param {InventoryUsageDeleteManyArgs} args - Arguments to filter InventoryUsages to delete.
     * @example
     * // Delete a few InventoryUsages
     * const { count } = await prisma.inventoryUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryUsageDeleteManyArgs>(args?: SelectSubset<T, InventoryUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryUsages
     * const inventoryUsage = await prisma.inventoryUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUsageUpdateManyArgs>(args: SelectSubset<T, InventoryUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryUsages and returns the data updated in the database.
     * @param {InventoryUsageUpdateManyAndReturnArgs} args - Arguments to update many InventoryUsages.
     * @example
     * // Update many InventoryUsages
     * const inventoryUsage = await prisma.inventoryUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InventoryUsages and only return the `id`
     * const inventoryUsageWithIdOnly = await prisma.inventoryUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InventoryUsage.
     * @param {InventoryUsageUpsertArgs} args - Arguments to update or create a InventoryUsage.
     * @example
     * // Update or create a InventoryUsage
     * const inventoryUsage = await prisma.inventoryUsage.upsert({
     *   create: {
     *     // ... data to create a InventoryUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryUsage we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUsageUpsertArgs>(args: SelectSubset<T, InventoryUsageUpsertArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageCountArgs} args - Arguments to filter InventoryUsages to count.
     * @example
     * // Count the number of InventoryUsages
     * const count = await prisma.inventoryUsage.count({
     *   where: {
     *     // ... the filter for the InventoryUsages we want to count
     *   }
     * })
    **/
    count<T extends InventoryUsageCountArgs>(
      args?: Subset<T, InventoryUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryUsageAggregateArgs>(args: Subset<T, InventoryUsageAggregateArgs>): Prisma.PrismaPromise<GetInventoryUsageAggregateType<T>>

    /**
     * Group by InventoryUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryUsageGroupByArgs['orderBy'] }
        : { orderBy?: InventoryUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryUsage model
   */
  readonly fields: InventoryUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Paciente<T extends InventoryUsage$PacienteArgs<ExtArgs> = {}>(args?: Subset<T, InventoryUsage$PacienteArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    InventoryUsageDetail<T extends InventoryUsage$InventoryUsageDetailArgs<ExtArgs> = {}>(args?: Subset<T, InventoryUsage$InventoryUsageDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryUsage model
   */
  interface InventoryUsageFieldRefs {
    readonly id: FieldRef<"InventoryUsage", 'String'>
    readonly nombrePaciente: FieldRef<"InventoryUsage", 'String'>
    readonly pacienteId: FieldRef<"InventoryUsage", 'String'>
    readonly tipoTratamiento: FieldRef<"InventoryUsage", 'TipoTratamiento'>
    readonly observaciones: FieldRef<"InventoryUsage", 'String'>
    readonly tuvoReaccion: FieldRef<"InventoryUsage", 'Boolean'>
    readonly descripcionReaccion: FieldRef<"InventoryUsage", 'String'>
    readonly createdAt: FieldRef<"InventoryUsage", 'DateTime'>
    readonly sedeId: FieldRef<"InventoryUsage", 'String'>
    readonly updatedAt: FieldRef<"InventoryUsage", 'DateTime'>
    readonly userId: FieldRef<"InventoryUsage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InventoryUsage findUnique
   */
  export type InventoryUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsage to fetch.
     */
    where: InventoryUsageWhereUniqueInput
  }

  /**
   * InventoryUsage findUniqueOrThrow
   */
  export type InventoryUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsage to fetch.
     */
    where: InventoryUsageWhereUniqueInput
  }

  /**
   * InventoryUsage findFirst
   */
  export type InventoryUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsage to fetch.
     */
    where?: InventoryUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsages to fetch.
     */
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryUsages.
     */
    cursor?: InventoryUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryUsages.
     */
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * InventoryUsage findFirstOrThrow
   */
  export type InventoryUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsage to fetch.
     */
    where?: InventoryUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsages to fetch.
     */
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryUsages.
     */
    cursor?: InventoryUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryUsages.
     */
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * InventoryUsage findMany
   */
  export type InventoryUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsages to fetch.
     */
    where?: InventoryUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsages to fetch.
     */
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryUsages.
     */
    cursor?: InventoryUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsages.
     */
    skip?: number
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * InventoryUsage create
   */
  export type InventoryUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryUsage.
     */
    data: XOR<InventoryUsageCreateInput, InventoryUsageUncheckedCreateInput>
  }

  /**
   * InventoryUsage createMany
   */
  export type InventoryUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryUsages.
     */
    data: InventoryUsageCreateManyInput | InventoryUsageCreateManyInput[]
  }

  /**
   * InventoryUsage createManyAndReturn
   */
  export type InventoryUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * The data used to create many InventoryUsages.
     */
    data: InventoryUsageCreateManyInput | InventoryUsageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryUsage update
   */
  export type InventoryUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryUsage.
     */
    data: XOR<InventoryUsageUpdateInput, InventoryUsageUncheckedUpdateInput>
    /**
     * Choose, which InventoryUsage to update.
     */
    where: InventoryUsageWhereUniqueInput
  }

  /**
   * InventoryUsage updateMany
   */
  export type InventoryUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryUsages.
     */
    data: XOR<InventoryUsageUpdateManyMutationInput, InventoryUsageUncheckedUpdateManyInput>
    /**
     * Filter which InventoryUsages to update
     */
    where?: InventoryUsageWhereInput
    /**
     * Limit how many InventoryUsages to update.
     */
    limit?: number
  }

  /**
   * InventoryUsage updateManyAndReturn
   */
  export type InventoryUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * The data used to update InventoryUsages.
     */
    data: XOR<InventoryUsageUpdateManyMutationInput, InventoryUsageUncheckedUpdateManyInput>
    /**
     * Filter which InventoryUsages to update
     */
    where?: InventoryUsageWhereInput
    /**
     * Limit how many InventoryUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryUsage upsert
   */
  export type InventoryUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryUsage to update in case it exists.
     */
    where: InventoryUsageWhereUniqueInput
    /**
     * In case the InventoryUsage found by the `where` argument doesn't exist, create a new InventoryUsage with this data.
     */
    create: XOR<InventoryUsageCreateInput, InventoryUsageUncheckedCreateInput>
    /**
     * In case the InventoryUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUsageUpdateInput, InventoryUsageUncheckedUpdateInput>
  }

  /**
   * InventoryUsage delete
   */
  export type InventoryUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    /**
     * Filter which InventoryUsage to delete.
     */
    where: InventoryUsageWhereUniqueInput
  }

  /**
   * InventoryUsage deleteMany
   */
  export type InventoryUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryUsages to delete
     */
    where?: InventoryUsageWhereInput
    /**
     * Limit how many InventoryUsages to delete.
     */
    limit?: number
  }

  /**
   * InventoryUsage.Paciente
   */
  export type InventoryUsage$PacienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    where?: PacienteWhereInput
  }

  /**
   * InventoryUsage.InventoryUsageDetail
   */
  export type InventoryUsage$InventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    where?: InventoryUsageDetailWhereInput
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    cursor?: InventoryUsageDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * InventoryUsage without action
   */
  export type InventoryUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
  }


  /**
   * Model InventoryUsageDetail
   */

  export type AggregateInventoryUsageDetail = {
    _count: InventoryUsageDetailCountAggregateOutputType | null
    _avg: InventoryUsageDetailAvgAggregateOutputType | null
    _sum: InventoryUsageDetailSumAggregateOutputType | null
    _min: InventoryUsageDetailMinAggregateOutputType | null
    _max: InventoryUsageDetailMaxAggregateOutputType | null
  }

  export type InventoryUsageDetailAvgAggregateOutputType = {
    doses: number | null
    frascoLevel: number | null
    quantity: number | null
    totalCost: number | null
    unitCost: number | null
    units: number | null
  }

  export type InventoryUsageDetailSumAggregateOutputType = {
    doses: number | null
    frascoLevel: number | null
    quantity: number | null
    totalCost: number | null
    unitCost: number | null
    units: number | null
  }

  export type InventoryUsageDetailMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    doses: number | null
    frascoLevel: number | null
    inventoryUsageId: string | null
    movementId: string | null
    productId: string | null
    quantity: number | null
    totalCost: number | null
    unitCost: number | null
    units: number | null
    updatedAt: Date | null
  }

  export type InventoryUsageDetailMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    doses: number | null
    frascoLevel: number | null
    inventoryUsageId: string | null
    movementId: string | null
    productId: string | null
    quantity: number | null
    totalCost: number | null
    unitCost: number | null
    units: number | null
    updatedAt: Date | null
  }

  export type InventoryUsageDetailCountAggregateOutputType = {
    id: number
    createdAt: number
    doses: number
    frascoLevel: number
    inventoryUsageId: number
    movementId: number
    productId: number
    quantity: number
    totalCost: number
    unitCost: number
    units: number
    updatedAt: number
    _all: number
  }


  export type InventoryUsageDetailAvgAggregateInputType = {
    doses?: true
    frascoLevel?: true
    quantity?: true
    totalCost?: true
    unitCost?: true
    units?: true
  }

  export type InventoryUsageDetailSumAggregateInputType = {
    doses?: true
    frascoLevel?: true
    quantity?: true
    totalCost?: true
    unitCost?: true
    units?: true
  }

  export type InventoryUsageDetailMinAggregateInputType = {
    id?: true
    createdAt?: true
    doses?: true
    frascoLevel?: true
    inventoryUsageId?: true
    movementId?: true
    productId?: true
    quantity?: true
    totalCost?: true
    unitCost?: true
    units?: true
    updatedAt?: true
  }

  export type InventoryUsageDetailMaxAggregateInputType = {
    id?: true
    createdAt?: true
    doses?: true
    frascoLevel?: true
    inventoryUsageId?: true
    movementId?: true
    productId?: true
    quantity?: true
    totalCost?: true
    unitCost?: true
    units?: true
    updatedAt?: true
  }

  export type InventoryUsageDetailCountAggregateInputType = {
    id?: true
    createdAt?: true
    doses?: true
    frascoLevel?: true
    inventoryUsageId?: true
    movementId?: true
    productId?: true
    quantity?: true
    totalCost?: true
    unitCost?: true
    units?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryUsageDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryUsageDetail to aggregate.
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsageDetails to fetch.
     */
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryUsageDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsageDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsageDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryUsageDetails
    **/
    _count?: true | InventoryUsageDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryUsageDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryUsageDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryUsageDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryUsageDetailMaxAggregateInputType
  }

  export type GetInventoryUsageDetailAggregateType<T extends InventoryUsageDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryUsageDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryUsageDetail[P]>
      : GetScalarType<T[P], AggregateInventoryUsageDetail[P]>
  }




  export type InventoryUsageDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryUsageDetailWhereInput
    orderBy?: InventoryUsageDetailOrderByWithAggregationInput | InventoryUsageDetailOrderByWithAggregationInput[]
    by: InventoryUsageDetailScalarFieldEnum[] | InventoryUsageDetailScalarFieldEnum
    having?: InventoryUsageDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryUsageDetailCountAggregateInputType | true
    _avg?: InventoryUsageDetailAvgAggregateInputType
    _sum?: InventoryUsageDetailSumAggregateInputType
    _min?: InventoryUsageDetailMinAggregateInputType
    _max?: InventoryUsageDetailMaxAggregateInputType
  }

  export type InventoryUsageDetailGroupByOutputType = {
    id: string
    createdAt: Date
    doses: number | null
    frascoLevel: number | null
    inventoryUsageId: string
    movementId: string | null
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units: number | null
    updatedAt: Date
    _count: InventoryUsageDetailCountAggregateOutputType | null
    _avg: InventoryUsageDetailAvgAggregateOutputType | null
    _sum: InventoryUsageDetailSumAggregateOutputType | null
    _min: InventoryUsageDetailMinAggregateOutputType | null
    _max: InventoryUsageDetailMaxAggregateOutputType | null
  }

  type GetInventoryUsageDetailGroupByPayload<T extends InventoryUsageDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryUsageDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryUsageDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryUsageDetailGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryUsageDetailGroupByOutputType[P]>
        }
      >
    >


  export type InventoryUsageDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    doses?: boolean
    frascoLevel?: boolean
    inventoryUsageId?: boolean
    movementId?: boolean
    productId?: boolean
    quantity?: boolean
    totalCost?: boolean
    unitCost?: boolean
    units?: boolean
    updatedAt?: boolean
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsageDetail"]>

  export type InventoryUsageDetailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    doses?: boolean
    frascoLevel?: boolean
    inventoryUsageId?: boolean
    movementId?: boolean
    productId?: boolean
    quantity?: boolean
    totalCost?: boolean
    unitCost?: boolean
    units?: boolean
    updatedAt?: boolean
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsageDetail"]>

  export type InventoryUsageDetailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    doses?: boolean
    frascoLevel?: boolean
    inventoryUsageId?: boolean
    movementId?: boolean
    productId?: boolean
    quantity?: boolean
    totalCost?: boolean
    unitCost?: boolean
    units?: boolean
    updatedAt?: boolean
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryUsageDetail"]>

  export type InventoryUsageDetailSelectScalar = {
    id?: boolean
    createdAt?: boolean
    doses?: boolean
    frascoLevel?: boolean
    inventoryUsageId?: boolean
    movementId?: boolean
    productId?: boolean
    quantity?: boolean
    totalCost?: boolean
    unitCost?: boolean
    units?: boolean
    updatedAt?: boolean
  }

  export type InventoryUsageDetailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "doses" | "frascoLevel" | "inventoryUsageId" | "movementId" | "productId" | "quantity" | "totalCost" | "unitCost" | "units" | "updatedAt", ExtArgs["result"]["inventoryUsageDetail"]>
  export type InventoryUsageDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type InventoryUsageDetailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type InventoryUsageDetailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | InventoryUsageDefaultArgs<ExtArgs>
    Movement?: boolean | InventoryUsageDetail$MovementArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $InventoryUsageDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryUsageDetail"
    objects: {
      InventoryUsage: Prisma.$InventoryUsagePayload<ExtArgs>
      Movement: Prisma.$MovementPayload<ExtArgs> | null
      Product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      doses: number | null
      frascoLevel: number | null
      inventoryUsageId: string
      movementId: string | null
      productId: string
      quantity: number
      totalCost: number
      unitCost: number
      units: number | null
      updatedAt: Date
    }, ExtArgs["result"]["inventoryUsageDetail"]>
    composites: {}
  }

  type InventoryUsageDetailGetPayload<S extends boolean | null | undefined | InventoryUsageDetailDefaultArgs> = $Result.GetResult<Prisma.$InventoryUsageDetailPayload, S>

  type InventoryUsageDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryUsageDetailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryUsageDetailCountAggregateInputType | true
    }

  export interface InventoryUsageDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryUsageDetail'], meta: { name: 'InventoryUsageDetail' } }
    /**
     * Find zero or one InventoryUsageDetail that matches the filter.
     * @param {InventoryUsageDetailFindUniqueArgs} args - Arguments to find a InventoryUsageDetail
     * @example
     * // Get one InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryUsageDetailFindUniqueArgs>(args: SelectSubset<T, InventoryUsageDetailFindUniqueArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryUsageDetail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryUsageDetailFindUniqueOrThrowArgs} args - Arguments to find a InventoryUsageDetail
     * @example
     * // Get one InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryUsageDetailFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryUsageDetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryUsageDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailFindFirstArgs} args - Arguments to find a InventoryUsageDetail
     * @example
     * // Get one InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryUsageDetailFindFirstArgs>(args?: SelectSubset<T, InventoryUsageDetailFindFirstArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryUsageDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailFindFirstOrThrowArgs} args - Arguments to find a InventoryUsageDetail
     * @example
     * // Get one InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryUsageDetailFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryUsageDetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryUsageDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryUsageDetails
     * const inventoryUsageDetails = await prisma.inventoryUsageDetail.findMany()
     * 
     * // Get first 10 InventoryUsageDetails
     * const inventoryUsageDetails = await prisma.inventoryUsageDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryUsageDetailWithIdOnly = await prisma.inventoryUsageDetail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryUsageDetailFindManyArgs>(args?: SelectSubset<T, InventoryUsageDetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryUsageDetail.
     * @param {InventoryUsageDetailCreateArgs} args - Arguments to create a InventoryUsageDetail.
     * @example
     * // Create one InventoryUsageDetail
     * const InventoryUsageDetail = await prisma.inventoryUsageDetail.create({
     *   data: {
     *     // ... data to create a InventoryUsageDetail
     *   }
     * })
     * 
     */
    create<T extends InventoryUsageDetailCreateArgs>(args: SelectSubset<T, InventoryUsageDetailCreateArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryUsageDetails.
     * @param {InventoryUsageDetailCreateManyArgs} args - Arguments to create many InventoryUsageDetails.
     * @example
     * // Create many InventoryUsageDetails
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryUsageDetailCreateManyArgs>(args?: SelectSubset<T, InventoryUsageDetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryUsageDetails and returns the data saved in the database.
     * @param {InventoryUsageDetailCreateManyAndReturnArgs} args - Arguments to create many InventoryUsageDetails.
     * @example
     * // Create many InventoryUsageDetails
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryUsageDetails and only return the `id`
     * const inventoryUsageDetailWithIdOnly = await prisma.inventoryUsageDetail.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryUsageDetailCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryUsageDetailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InventoryUsageDetail.
     * @param {InventoryUsageDetailDeleteArgs} args - Arguments to delete one InventoryUsageDetail.
     * @example
     * // Delete one InventoryUsageDetail
     * const InventoryUsageDetail = await prisma.inventoryUsageDetail.delete({
     *   where: {
     *     // ... filter to delete one InventoryUsageDetail
     *   }
     * })
     * 
     */
    delete<T extends InventoryUsageDetailDeleteArgs>(args: SelectSubset<T, InventoryUsageDetailDeleteArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryUsageDetail.
     * @param {InventoryUsageDetailUpdateArgs} args - Arguments to update one InventoryUsageDetail.
     * @example
     * // Update one InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUsageDetailUpdateArgs>(args: SelectSubset<T, InventoryUsageDetailUpdateArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryUsageDetails.
     * @param {InventoryUsageDetailDeleteManyArgs} args - Arguments to filter InventoryUsageDetails to delete.
     * @example
     * // Delete a few InventoryUsageDetails
     * const { count } = await prisma.inventoryUsageDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryUsageDetailDeleteManyArgs>(args?: SelectSubset<T, InventoryUsageDetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryUsageDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryUsageDetails
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUsageDetailUpdateManyArgs>(args: SelectSubset<T, InventoryUsageDetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryUsageDetails and returns the data updated in the database.
     * @param {InventoryUsageDetailUpdateManyAndReturnArgs} args - Arguments to update many InventoryUsageDetails.
     * @example
     * // Update many InventoryUsageDetails
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InventoryUsageDetails and only return the `id`
     * const inventoryUsageDetailWithIdOnly = await prisma.inventoryUsageDetail.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryUsageDetailUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryUsageDetailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InventoryUsageDetail.
     * @param {InventoryUsageDetailUpsertArgs} args - Arguments to update or create a InventoryUsageDetail.
     * @example
     * // Update or create a InventoryUsageDetail
     * const inventoryUsageDetail = await prisma.inventoryUsageDetail.upsert({
     *   create: {
     *     // ... data to create a InventoryUsageDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryUsageDetail we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUsageDetailUpsertArgs>(args: SelectSubset<T, InventoryUsageDetailUpsertArgs<ExtArgs>>): Prisma__InventoryUsageDetailClient<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryUsageDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailCountArgs} args - Arguments to filter InventoryUsageDetails to count.
     * @example
     * // Count the number of InventoryUsageDetails
     * const count = await prisma.inventoryUsageDetail.count({
     *   where: {
     *     // ... the filter for the InventoryUsageDetails we want to count
     *   }
     * })
    **/
    count<T extends InventoryUsageDetailCountArgs>(
      args?: Subset<T, InventoryUsageDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryUsageDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryUsageDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryUsageDetailAggregateArgs>(args: Subset<T, InventoryUsageDetailAggregateArgs>): Prisma.PrismaPromise<GetInventoryUsageDetailAggregateType<T>>

    /**
     * Group by InventoryUsageDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUsageDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryUsageDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryUsageDetailGroupByArgs['orderBy'] }
        : { orderBy?: InventoryUsageDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryUsageDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryUsageDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryUsageDetail model
   */
  readonly fields: InventoryUsageDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryUsageDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryUsageDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InventoryUsage<T extends InventoryUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryUsageDefaultArgs<ExtArgs>>): Prisma__InventoryUsageClient<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Movement<T extends InventoryUsageDetail$MovementArgs<ExtArgs> = {}>(args?: Subset<T, InventoryUsageDetail$MovementArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryUsageDetail model
   */
  interface InventoryUsageDetailFieldRefs {
    readonly id: FieldRef<"InventoryUsageDetail", 'String'>
    readonly createdAt: FieldRef<"InventoryUsageDetail", 'DateTime'>
    readonly doses: FieldRef<"InventoryUsageDetail", 'Int'>
    readonly frascoLevel: FieldRef<"InventoryUsageDetail", 'Int'>
    readonly inventoryUsageId: FieldRef<"InventoryUsageDetail", 'String'>
    readonly movementId: FieldRef<"InventoryUsageDetail", 'String'>
    readonly productId: FieldRef<"InventoryUsageDetail", 'String'>
    readonly quantity: FieldRef<"InventoryUsageDetail", 'Float'>
    readonly totalCost: FieldRef<"InventoryUsageDetail", 'Float'>
    readonly unitCost: FieldRef<"InventoryUsageDetail", 'Float'>
    readonly units: FieldRef<"InventoryUsageDetail", 'Int'>
    readonly updatedAt: FieldRef<"InventoryUsageDetail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryUsageDetail findUnique
   */
  export type InventoryUsageDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsageDetail to fetch.
     */
    where: InventoryUsageDetailWhereUniqueInput
  }

  /**
   * InventoryUsageDetail findUniqueOrThrow
   */
  export type InventoryUsageDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsageDetail to fetch.
     */
    where: InventoryUsageDetailWhereUniqueInput
  }

  /**
   * InventoryUsageDetail findFirst
   */
  export type InventoryUsageDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsageDetail to fetch.
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsageDetails to fetch.
     */
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryUsageDetails.
     */
    cursor?: InventoryUsageDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsageDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsageDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryUsageDetails.
     */
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * InventoryUsageDetail findFirstOrThrow
   */
  export type InventoryUsageDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsageDetail to fetch.
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsageDetails to fetch.
     */
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryUsageDetails.
     */
    cursor?: InventoryUsageDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsageDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsageDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryUsageDetails.
     */
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * InventoryUsageDetail findMany
   */
  export type InventoryUsageDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter, which InventoryUsageDetails to fetch.
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryUsageDetails to fetch.
     */
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryUsageDetails.
     */
    cursor?: InventoryUsageDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryUsageDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryUsageDetails.
     */
    skip?: number
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * InventoryUsageDetail create
   */
  export type InventoryUsageDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryUsageDetail.
     */
    data: XOR<InventoryUsageDetailCreateInput, InventoryUsageDetailUncheckedCreateInput>
  }

  /**
   * InventoryUsageDetail createMany
   */
  export type InventoryUsageDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryUsageDetails.
     */
    data: InventoryUsageDetailCreateManyInput | InventoryUsageDetailCreateManyInput[]
  }

  /**
   * InventoryUsageDetail createManyAndReturn
   */
  export type InventoryUsageDetailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * The data used to create many InventoryUsageDetails.
     */
    data: InventoryUsageDetailCreateManyInput | InventoryUsageDetailCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryUsageDetail update
   */
  export type InventoryUsageDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryUsageDetail.
     */
    data: XOR<InventoryUsageDetailUpdateInput, InventoryUsageDetailUncheckedUpdateInput>
    /**
     * Choose, which InventoryUsageDetail to update.
     */
    where: InventoryUsageDetailWhereUniqueInput
  }

  /**
   * InventoryUsageDetail updateMany
   */
  export type InventoryUsageDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryUsageDetails.
     */
    data: XOR<InventoryUsageDetailUpdateManyMutationInput, InventoryUsageDetailUncheckedUpdateManyInput>
    /**
     * Filter which InventoryUsageDetails to update
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * Limit how many InventoryUsageDetails to update.
     */
    limit?: number
  }

  /**
   * InventoryUsageDetail updateManyAndReturn
   */
  export type InventoryUsageDetailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * The data used to update InventoryUsageDetails.
     */
    data: XOR<InventoryUsageDetailUpdateManyMutationInput, InventoryUsageDetailUncheckedUpdateManyInput>
    /**
     * Filter which InventoryUsageDetails to update
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * Limit how many InventoryUsageDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryUsageDetail upsert
   */
  export type InventoryUsageDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryUsageDetail to update in case it exists.
     */
    where: InventoryUsageDetailWhereUniqueInput
    /**
     * In case the InventoryUsageDetail found by the `where` argument doesn't exist, create a new InventoryUsageDetail with this data.
     */
    create: XOR<InventoryUsageDetailCreateInput, InventoryUsageDetailUncheckedCreateInput>
    /**
     * In case the InventoryUsageDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUsageDetailUpdateInput, InventoryUsageDetailUncheckedUpdateInput>
  }

  /**
   * InventoryUsageDetail delete
   */
  export type InventoryUsageDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    /**
     * Filter which InventoryUsageDetail to delete.
     */
    where: InventoryUsageDetailWhereUniqueInput
  }

  /**
   * InventoryUsageDetail deleteMany
   */
  export type InventoryUsageDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryUsageDetails to delete
     */
    where?: InventoryUsageDetailWhereInput
    /**
     * Limit how many InventoryUsageDetails to delete.
     */
    limit?: number
  }

  /**
   * InventoryUsageDetail.Movement
   */
  export type InventoryUsageDetail$MovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    where?: MovementWhereInput
  }

  /**
   * InventoryUsageDetail without action
   */
  export type InventoryUsageDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
  }


  /**
   * Model Movement
   */

  export type AggregateMovement = {
    _count: MovementCountAggregateOutputType | null
    _avg: MovementAvgAggregateOutputType | null
    _sum: MovementSumAggregateOutputType | null
    _min: MovementMinAggregateOutputType | null
    _max: MovementMaxAggregateOutputType | null
  }

  export type MovementAvgAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
  }

  export type MovementSumAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
  }

  export type MovementMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sedeId: string | null
    productId: string | null
    type: $Enums.MovementType | null
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    batchNumber: string | null
    expiryDate: Date | null
    createdAt: Date | null
  }

  export type MovementMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sedeId: string | null
    productId: string | null
    type: $Enums.MovementType | null
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    batchNumber: string | null
    expiryDate: Date | null
    createdAt: Date | null
  }

  export type MovementCountAggregateOutputType = {
    id: number
    userId: number
    sedeId: number
    productId: number
    type: number
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber: number
    expiryDate: number
    createdAt: number
    _all: number
  }


  export type MovementAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type MovementSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type MovementMinAggregateInputType = {
    id?: true
    userId?: true
    sedeId?: true
    productId?: true
    type?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    batchNumber?: true
    expiryDate?: true
    createdAt?: true
  }

  export type MovementMaxAggregateInputType = {
    id?: true
    userId?: true
    sedeId?: true
    productId?: true
    type?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    batchNumber?: true
    expiryDate?: true
    createdAt?: true
  }

  export type MovementCountAggregateInputType = {
    id?: true
    userId?: true
    sedeId?: true
    productId?: true
    type?: true
    quantity?: true
    unitCost?: true
    totalCost?: true
    batchNumber?: true
    expiryDate?: true
    createdAt?: true
    _all?: true
  }

  export type MovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movement to aggregate.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movements
    **/
    _count?: true | MovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovementMaxAggregateInputType
  }

  export type GetMovementAggregateType<T extends MovementAggregateArgs> = {
        [P in keyof T & keyof AggregateMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovement[P]>
      : GetScalarType<T[P], AggregateMovement[P]>
  }




  export type MovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithAggregationInput | MovementOrderByWithAggregationInput[]
    by: MovementScalarFieldEnum[] | MovementScalarFieldEnum
    having?: MovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovementCountAggregateInputType | true
    _avg?: MovementAvgAggregateInputType
    _sum?: MovementSumAggregateInputType
    _min?: MovementMinAggregateInputType
    _max?: MovementMaxAggregateInputType
  }

  export type MovementGroupByOutputType = {
    id: string
    userId: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber: string | null
    expiryDate: Date | null
    createdAt: Date
    _count: MovementCountAggregateOutputType | null
    _avg: MovementAvgAggregateOutputType | null
    _sum: MovementSumAggregateOutputType | null
    _min: MovementMinAggregateOutputType | null
    _max: MovementMaxAggregateOutputType | null
  }

  type GetMovementGroupByPayload<T extends MovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovementGroupByOutputType[P]>
            : GetScalarType<T[P], MovementGroupByOutputType[P]>
        }
      >
    >


  export type MovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sedeId?: boolean
    productId?: boolean
    type?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    InventoryUsageDetail?: boolean | Movement$InventoryUsageDetailArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MovementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movement"]>

  export type MovementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sedeId?: boolean
    productId?: boolean
    type?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movement"]>

  export type MovementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sedeId?: boolean
    productId?: boolean
    type?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movement"]>

  export type MovementSelectScalar = {
    id?: boolean
    userId?: boolean
    sedeId?: boolean
    productId?: boolean
    type?: boolean
    quantity?: boolean
    unitCost?: boolean
    totalCost?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    createdAt?: boolean
  }

  export type MovementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sedeId" | "productId" | "type" | "quantity" | "unitCost" | "totalCost" | "batchNumber" | "expiryDate" | "createdAt", ExtArgs["result"]["movement"]>
  export type MovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsageDetail?: boolean | Movement$InventoryUsageDetailArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MovementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MovementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MovementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movement"
    objects: {
      InventoryUsageDetail: Prisma.$InventoryUsageDetailPayload<ExtArgs>[]
      Product: Prisma.$ProductPayload<ExtArgs>
      Sede: Prisma.$SedePayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sedeId: string
      productId: string
      type: $Enums.MovementType
      quantity: number
      unitCost: number
      totalCost: number
      batchNumber: string | null
      expiryDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["movement"]>
    composites: {}
  }

  type MovementGetPayload<S extends boolean | null | undefined | MovementDefaultArgs> = $Result.GetResult<Prisma.$MovementPayload, S>

  type MovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MovementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MovementCountAggregateInputType | true
    }

  export interface MovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movement'], meta: { name: 'Movement' } }
    /**
     * Find zero or one Movement that matches the filter.
     * @param {MovementFindUniqueArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovementFindUniqueArgs>(args: SelectSubset<T, MovementFindUniqueArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Movement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MovementFindUniqueOrThrowArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovementFindUniqueOrThrowArgs>(args: SelectSubset<T, MovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Movement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindFirstArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovementFindFirstArgs>(args?: SelectSubset<T, MovementFindFirstArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Movement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindFirstOrThrowArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovementFindFirstOrThrowArgs>(args?: SelectSubset<T, MovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Movements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movements
     * const movements = await prisma.movement.findMany()
     * 
     * // Get first 10 Movements
     * const movements = await prisma.movement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movementWithIdOnly = await prisma.movement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MovementFindManyArgs>(args?: SelectSubset<T, MovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Movement.
     * @param {MovementCreateArgs} args - Arguments to create a Movement.
     * @example
     * // Create one Movement
     * const Movement = await prisma.movement.create({
     *   data: {
     *     // ... data to create a Movement
     *   }
     * })
     * 
     */
    create<T extends MovementCreateArgs>(args: SelectSubset<T, MovementCreateArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Movements.
     * @param {MovementCreateManyArgs} args - Arguments to create many Movements.
     * @example
     * // Create many Movements
     * const movement = await prisma.movement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovementCreateManyArgs>(args?: SelectSubset<T, MovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movements and returns the data saved in the database.
     * @param {MovementCreateManyAndReturnArgs} args - Arguments to create many Movements.
     * @example
     * // Create many Movements
     * const movement = await prisma.movement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movements and only return the `id`
     * const movementWithIdOnly = await prisma.movement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovementCreateManyAndReturnArgs>(args?: SelectSubset<T, MovementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Movement.
     * @param {MovementDeleteArgs} args - Arguments to delete one Movement.
     * @example
     * // Delete one Movement
     * const Movement = await prisma.movement.delete({
     *   where: {
     *     // ... filter to delete one Movement
     *   }
     * })
     * 
     */
    delete<T extends MovementDeleteArgs>(args: SelectSubset<T, MovementDeleteArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Movement.
     * @param {MovementUpdateArgs} args - Arguments to update one Movement.
     * @example
     * // Update one Movement
     * const movement = await prisma.movement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovementUpdateArgs>(args: SelectSubset<T, MovementUpdateArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Movements.
     * @param {MovementDeleteManyArgs} args - Arguments to filter Movements to delete.
     * @example
     * // Delete a few Movements
     * const { count } = await prisma.movement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovementDeleteManyArgs>(args?: SelectSubset<T, MovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movements
     * const movement = await prisma.movement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovementUpdateManyArgs>(args: SelectSubset<T, MovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movements and returns the data updated in the database.
     * @param {MovementUpdateManyAndReturnArgs} args - Arguments to update many Movements.
     * @example
     * // Update many Movements
     * const movement = await prisma.movement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Movements and only return the `id`
     * const movementWithIdOnly = await prisma.movement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MovementUpdateManyAndReturnArgs>(args: SelectSubset<T, MovementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Movement.
     * @param {MovementUpsertArgs} args - Arguments to update or create a Movement.
     * @example
     * // Update or create a Movement
     * const movement = await prisma.movement.upsert({
     *   create: {
     *     // ... data to create a Movement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movement we want to update
     *   }
     * })
     */
    upsert<T extends MovementUpsertArgs>(args: SelectSubset<T, MovementUpsertArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Movements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementCountArgs} args - Arguments to filter Movements to count.
     * @example
     * // Count the number of Movements
     * const count = await prisma.movement.count({
     *   where: {
     *     // ... the filter for the Movements we want to count
     *   }
     * })
    **/
    count<T extends MovementCountArgs>(
      args?: Subset<T, MovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovementAggregateArgs>(args: Subset<T, MovementAggregateArgs>): Prisma.PrismaPromise<GetMovementAggregateType<T>>

    /**
     * Group by Movement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovementGroupByArgs['orderBy'] }
        : { orderBy?: MovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movement model
   */
  readonly fields: MovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InventoryUsageDetail<T extends Movement$InventoryUsageDetailArgs<ExtArgs> = {}>(args?: Subset<T, Movement$InventoryUsageDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Movement model
   */
  interface MovementFieldRefs {
    readonly id: FieldRef<"Movement", 'String'>
    readonly userId: FieldRef<"Movement", 'String'>
    readonly sedeId: FieldRef<"Movement", 'String'>
    readonly productId: FieldRef<"Movement", 'String'>
    readonly type: FieldRef<"Movement", 'MovementType'>
    readonly quantity: FieldRef<"Movement", 'Float'>
    readonly unitCost: FieldRef<"Movement", 'Float'>
    readonly totalCost: FieldRef<"Movement", 'Float'>
    readonly batchNumber: FieldRef<"Movement", 'String'>
    readonly expiryDate: FieldRef<"Movement", 'DateTime'>
    readonly createdAt: FieldRef<"Movement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Movement findUnique
   */
  export type MovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement findUniqueOrThrow
   */
  export type MovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement findFirst
   */
  export type MovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movements.
     */
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement findFirstOrThrow
   */
  export type MovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movements.
     */
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement findMany
   */
  export type MovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movements to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement create
   */
  export type MovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The data needed to create a Movement.
     */
    data: XOR<MovementCreateInput, MovementUncheckedCreateInput>
  }

  /**
   * Movement createMany
   */
  export type MovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movements.
     */
    data: MovementCreateManyInput | MovementCreateManyInput[]
  }

  /**
   * Movement createManyAndReturn
   */
  export type MovementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * The data used to create many Movements.
     */
    data: MovementCreateManyInput | MovementCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Movement update
   */
  export type MovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The data needed to update a Movement.
     */
    data: XOR<MovementUpdateInput, MovementUncheckedUpdateInput>
    /**
     * Choose, which Movement to update.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement updateMany
   */
  export type MovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movements.
     */
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyInput>
    /**
     * Filter which Movements to update
     */
    where?: MovementWhereInput
    /**
     * Limit how many Movements to update.
     */
    limit?: number
  }

  /**
   * Movement updateManyAndReturn
   */
  export type MovementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * The data used to update Movements.
     */
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyInput>
    /**
     * Filter which Movements to update
     */
    where?: MovementWhereInput
    /**
     * Limit how many Movements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Movement upsert
   */
  export type MovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The filter to search for the Movement to update in case it exists.
     */
    where: MovementWhereUniqueInput
    /**
     * In case the Movement found by the `where` argument doesn't exist, create a new Movement with this data.
     */
    create: XOR<MovementCreateInput, MovementUncheckedCreateInput>
    /**
     * In case the Movement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovementUpdateInput, MovementUncheckedUpdateInput>
  }

  /**
   * Movement delete
   */
  export type MovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter which Movement to delete.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement deleteMany
   */
  export type MovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movements to delete
     */
    where?: MovementWhereInput
    /**
     * Limit how many Movements to delete.
     */
    limit?: number
  }

  /**
   * Movement.InventoryUsageDetail
   */
  export type Movement$InventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    where?: InventoryUsageDetailWhereInput
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    cursor?: InventoryUsageDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * Movement without action
   */
  export type MovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    costPerUnit: number | null
    minStockLevel: number | null
  }

  export type ProductSumAggregateOutputType = {
    costPerUnit: number | null
    minStockLevel: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ProductType | null
    unit: $Enums.ProductUnit | null
    description: string | null
    costPerUnit: number | null
    minStockLevel: number | null
    createdAt: Date | null
    updatedAt: Date | null
    category: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ProductType | null
    unit: $Enums.ProductUnit | null
    description: string | null
    costPerUnit: number | null
    minStockLevel: number | null
    createdAt: Date | null
    updatedAt: Date | null
    category: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    type: number
    unit: number
    description: number
    costPerUnit: number
    minStockLevel: number
    createdAt: number
    updatedAt: number
    category: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    costPerUnit?: true
    minStockLevel?: true
  }

  export type ProductSumAggregateInputType = {
    costPerUnit?: true
    minStockLevel?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    description?: true
    costPerUnit?: true
    minStockLevel?: true
    createdAt?: true
    updatedAt?: true
    category?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    description?: true
    costPerUnit?: true
    minStockLevel?: true
    createdAt?: true
    updatedAt?: true
    category?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    description?: true
    costPerUnit?: true
    minStockLevel?: true
    createdAt?: true
    updatedAt?: true
    category?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt: Date
    updatedAt: Date
    category: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    description?: boolean
    costPerUnit?: boolean
    minStockLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
    InventoryUsageDetail?: boolean | Product$InventoryUsageDetailArgs<ExtArgs>
    Movement?: boolean | Product$MovementArgs<ExtArgs>
    ProductAllergen?: boolean | Product$ProductAllergenArgs<ExtArgs>
    ProductExpiration?: boolean | Product$ProductExpirationArgs<ExtArgs>
    StockBySede?: boolean | Product$StockBySedeArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    description?: boolean
    costPerUnit?: boolean
    minStockLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    description?: boolean
    costPerUnit?: boolean
    minStockLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    description?: boolean
    costPerUnit?: boolean
    minStockLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "unit" | "description" | "costPerUnit" | "minStockLevel" | "createdAt" | "updatedAt" | "category", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsageDetail?: boolean | Product$InventoryUsageDetailArgs<ExtArgs>
    Movement?: boolean | Product$MovementArgs<ExtArgs>
    ProductAllergen?: boolean | Product$ProductAllergenArgs<ExtArgs>
    ProductExpiration?: boolean | Product$ProductExpirationArgs<ExtArgs>
    StockBySede?: boolean | Product$StockBySedeArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      InventoryUsageDetail: Prisma.$InventoryUsageDetailPayload<ExtArgs>[]
      Movement: Prisma.$MovementPayload<ExtArgs>[]
      ProductAllergen: Prisma.$ProductAllergenPayload<ExtArgs>[]
      ProductExpiration: Prisma.$ProductExpirationPayload<ExtArgs>[]
      StockBySede: Prisma.$StockBySedePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.ProductType
      unit: $Enums.ProductUnit
      description: string | null
      costPerUnit: number
      minStockLevel: number
      createdAt: Date
      updatedAt: Date
      category: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InventoryUsageDetail<T extends Product$InventoryUsageDetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$InventoryUsageDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsageDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Movement<T extends Product$MovementArgs<ExtArgs> = {}>(args?: Subset<T, Product$MovementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProductAllergen<T extends Product$ProductAllergenArgs<ExtArgs> = {}>(args?: Subset<T, Product$ProductAllergenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProductExpiration<T extends Product$ProductExpirationArgs<ExtArgs> = {}>(args?: Subset<T, Product$ProductExpirationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StockBySede<T extends Product$StockBySedeArgs<ExtArgs> = {}>(args?: Subset<T, Product$StockBySedeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly type: FieldRef<"Product", 'ProductType'>
    readonly unit: FieldRef<"Product", 'ProductUnit'>
    readonly description: FieldRef<"Product", 'String'>
    readonly costPerUnit: FieldRef<"Product", 'Float'>
    readonly minStockLevel: FieldRef<"Product", 'Int'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly category: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.InventoryUsageDetail
   */
  export type Product$InventoryUsageDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsageDetail
     */
    select?: InventoryUsageDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsageDetail
     */
    omit?: InventoryUsageDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageDetailInclude<ExtArgs> | null
    where?: InventoryUsageDetailWhereInput
    orderBy?: InventoryUsageDetailOrderByWithRelationInput | InventoryUsageDetailOrderByWithRelationInput[]
    cursor?: InventoryUsageDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageDetailScalarFieldEnum | InventoryUsageDetailScalarFieldEnum[]
  }

  /**
   * Product.Movement
   */
  export type Product$MovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    cursor?: MovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Product.ProductAllergen
   */
  export type Product$ProductAllergenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    where?: ProductAllergenWhereInput
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    cursor?: ProductAllergenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductAllergenScalarFieldEnum | ProductAllergenScalarFieldEnum[]
  }

  /**
   * Product.ProductExpiration
   */
  export type Product$ProductExpirationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    where?: ProductExpirationWhereInput
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    cursor?: ProductExpirationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductExpirationScalarFieldEnum | ProductExpirationScalarFieldEnum[]
  }

  /**
   * Product.StockBySede
   */
  export type Product$StockBySedeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    where?: StockBySedeWhereInput
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    cursor?: StockBySedeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockBySedeScalarFieldEnum | StockBySedeScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductAllergen
   */

  export type AggregateProductAllergen = {
    _count: ProductAllergenCountAggregateOutputType | null
    _avg: ProductAllergenAvgAggregateOutputType | null
    _sum: ProductAllergenSumAggregateOutputType | null
    _min: ProductAllergenMinAggregateOutputType | null
    _max: ProductAllergenMaxAggregateOutputType | null
  }

  export type ProductAllergenAvgAggregateOutputType = {
    mlPerDose: number | null
  }

  export type ProductAllergenSumAggregateOutputType = {
    mlPerDose: number | null
  }

  export type ProductAllergenMinAggregateOutputType = {
    id: string | null
    productId: string | null
    allergenId: string | null
    mlPerDose: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductAllergenMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    allergenId: string | null
    mlPerDose: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductAllergenCountAggregateOutputType = {
    id: number
    productId: number
    allergenId: number
    mlPerDose: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAllergenAvgAggregateInputType = {
    mlPerDose?: true
  }

  export type ProductAllergenSumAggregateInputType = {
    mlPerDose?: true
  }

  export type ProductAllergenMinAggregateInputType = {
    id?: true
    productId?: true
    allergenId?: true
    mlPerDose?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductAllergenMaxAggregateInputType = {
    id?: true
    productId?: true
    allergenId?: true
    mlPerDose?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductAllergenCountAggregateInputType = {
    id?: true
    productId?: true
    allergenId?: true
    mlPerDose?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAllergenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAllergen to aggregate.
     */
    where?: ProductAllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAllergens to fetch.
     */
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductAllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAllergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAllergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductAllergens
    **/
    _count?: true | ProductAllergenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAllergenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductAllergenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductAllergenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductAllergenMaxAggregateInputType
  }

  export type GetProductAllergenAggregateType<T extends ProductAllergenAggregateArgs> = {
        [P in keyof T & keyof AggregateProductAllergen]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductAllergen[P]>
      : GetScalarType<T[P], AggregateProductAllergen[P]>
  }




  export type ProductAllergenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAllergenWhereInput
    orderBy?: ProductAllergenOrderByWithAggregationInput | ProductAllergenOrderByWithAggregationInput[]
    by: ProductAllergenScalarFieldEnum[] | ProductAllergenScalarFieldEnum
    having?: ProductAllergenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductAllergenCountAggregateInputType | true
    _avg?: ProductAllergenAvgAggregateInputType
    _sum?: ProductAllergenSumAggregateInputType
    _min?: ProductAllergenMinAggregateInputType
    _max?: ProductAllergenMaxAggregateInputType
  }

  export type ProductAllergenGroupByOutputType = {
    id: string
    productId: string
    allergenId: string
    mlPerDose: number
    createdAt: Date
    updatedAt: Date
    _count: ProductAllergenCountAggregateOutputType | null
    _avg: ProductAllergenAvgAggregateOutputType | null
    _sum: ProductAllergenSumAggregateOutputType | null
    _min: ProductAllergenMinAggregateOutputType | null
    _max: ProductAllergenMaxAggregateOutputType | null
  }

  type GetProductAllergenGroupByPayload<T extends ProductAllergenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductAllergenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductAllergenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductAllergenGroupByOutputType[P]>
            : GetScalarType<T[P], ProductAllergenGroupByOutputType[P]>
        }
      >
    >


  export type ProductAllergenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    allergenId?: boolean
    mlPerDose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productAllergen"]>

  export type ProductAllergenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    allergenId?: boolean
    mlPerDose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productAllergen"]>

  export type ProductAllergenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    allergenId?: boolean
    mlPerDose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productAllergen"]>

  export type ProductAllergenSelectScalar = {
    id?: boolean
    productId?: boolean
    allergenId?: boolean
    mlPerDose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductAllergenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "allergenId" | "mlPerDose" | "createdAt" | "updatedAt", ExtArgs["result"]["productAllergen"]>
  export type ProductAllergenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductAllergenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductAllergenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Allergen?: boolean | AllergenDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductAllergenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductAllergen"
    objects: {
      Allergen: Prisma.$AllergenPayload<ExtArgs>
      Product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      allergenId: string
      mlPerDose: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productAllergen"]>
    composites: {}
  }

  type ProductAllergenGetPayload<S extends boolean | null | undefined | ProductAllergenDefaultArgs> = $Result.GetResult<Prisma.$ProductAllergenPayload, S>

  type ProductAllergenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductAllergenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductAllergenCountAggregateInputType | true
    }

  export interface ProductAllergenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductAllergen'], meta: { name: 'ProductAllergen' } }
    /**
     * Find zero or one ProductAllergen that matches the filter.
     * @param {ProductAllergenFindUniqueArgs} args - Arguments to find a ProductAllergen
     * @example
     * // Get one ProductAllergen
     * const productAllergen = await prisma.productAllergen.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductAllergenFindUniqueArgs>(args: SelectSubset<T, ProductAllergenFindUniqueArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductAllergen that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductAllergenFindUniqueOrThrowArgs} args - Arguments to find a ProductAllergen
     * @example
     * // Get one ProductAllergen
     * const productAllergen = await prisma.productAllergen.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductAllergenFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductAllergenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductAllergen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenFindFirstArgs} args - Arguments to find a ProductAllergen
     * @example
     * // Get one ProductAllergen
     * const productAllergen = await prisma.productAllergen.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductAllergenFindFirstArgs>(args?: SelectSubset<T, ProductAllergenFindFirstArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductAllergen that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenFindFirstOrThrowArgs} args - Arguments to find a ProductAllergen
     * @example
     * // Get one ProductAllergen
     * const productAllergen = await prisma.productAllergen.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductAllergenFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductAllergenFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductAllergens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductAllergens
     * const productAllergens = await prisma.productAllergen.findMany()
     * 
     * // Get first 10 ProductAllergens
     * const productAllergens = await prisma.productAllergen.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productAllergenWithIdOnly = await prisma.productAllergen.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductAllergenFindManyArgs>(args?: SelectSubset<T, ProductAllergenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductAllergen.
     * @param {ProductAllergenCreateArgs} args - Arguments to create a ProductAllergen.
     * @example
     * // Create one ProductAllergen
     * const ProductAllergen = await prisma.productAllergen.create({
     *   data: {
     *     // ... data to create a ProductAllergen
     *   }
     * })
     * 
     */
    create<T extends ProductAllergenCreateArgs>(args: SelectSubset<T, ProductAllergenCreateArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductAllergens.
     * @param {ProductAllergenCreateManyArgs} args - Arguments to create many ProductAllergens.
     * @example
     * // Create many ProductAllergens
     * const productAllergen = await prisma.productAllergen.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductAllergenCreateManyArgs>(args?: SelectSubset<T, ProductAllergenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductAllergens and returns the data saved in the database.
     * @param {ProductAllergenCreateManyAndReturnArgs} args - Arguments to create many ProductAllergens.
     * @example
     * // Create many ProductAllergens
     * const productAllergen = await prisma.productAllergen.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductAllergens and only return the `id`
     * const productAllergenWithIdOnly = await prisma.productAllergen.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductAllergenCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductAllergenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductAllergen.
     * @param {ProductAllergenDeleteArgs} args - Arguments to delete one ProductAllergen.
     * @example
     * // Delete one ProductAllergen
     * const ProductAllergen = await prisma.productAllergen.delete({
     *   where: {
     *     // ... filter to delete one ProductAllergen
     *   }
     * })
     * 
     */
    delete<T extends ProductAllergenDeleteArgs>(args: SelectSubset<T, ProductAllergenDeleteArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductAllergen.
     * @param {ProductAllergenUpdateArgs} args - Arguments to update one ProductAllergen.
     * @example
     * // Update one ProductAllergen
     * const productAllergen = await prisma.productAllergen.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductAllergenUpdateArgs>(args: SelectSubset<T, ProductAllergenUpdateArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductAllergens.
     * @param {ProductAllergenDeleteManyArgs} args - Arguments to filter ProductAllergens to delete.
     * @example
     * // Delete a few ProductAllergens
     * const { count } = await prisma.productAllergen.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductAllergenDeleteManyArgs>(args?: SelectSubset<T, ProductAllergenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductAllergens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductAllergens
     * const productAllergen = await prisma.productAllergen.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductAllergenUpdateManyArgs>(args: SelectSubset<T, ProductAllergenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductAllergens and returns the data updated in the database.
     * @param {ProductAllergenUpdateManyAndReturnArgs} args - Arguments to update many ProductAllergens.
     * @example
     * // Update many ProductAllergens
     * const productAllergen = await prisma.productAllergen.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductAllergens and only return the `id`
     * const productAllergenWithIdOnly = await prisma.productAllergen.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductAllergenUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductAllergenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductAllergen.
     * @param {ProductAllergenUpsertArgs} args - Arguments to update or create a ProductAllergen.
     * @example
     * // Update or create a ProductAllergen
     * const productAllergen = await prisma.productAllergen.upsert({
     *   create: {
     *     // ... data to create a ProductAllergen
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductAllergen we want to update
     *   }
     * })
     */
    upsert<T extends ProductAllergenUpsertArgs>(args: SelectSubset<T, ProductAllergenUpsertArgs<ExtArgs>>): Prisma__ProductAllergenClient<$Result.GetResult<Prisma.$ProductAllergenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductAllergens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenCountArgs} args - Arguments to filter ProductAllergens to count.
     * @example
     * // Count the number of ProductAllergens
     * const count = await prisma.productAllergen.count({
     *   where: {
     *     // ... the filter for the ProductAllergens we want to count
     *   }
     * })
    **/
    count<T extends ProductAllergenCountArgs>(
      args?: Subset<T, ProductAllergenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductAllergenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductAllergen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAllergenAggregateArgs>(args: Subset<T, ProductAllergenAggregateArgs>): Prisma.PrismaPromise<GetProductAllergenAggregateType<T>>

    /**
     * Group by ProductAllergen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAllergenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductAllergenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductAllergenGroupByArgs['orderBy'] }
        : { orderBy?: ProductAllergenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductAllergenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductAllergenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductAllergen model
   */
  readonly fields: ProductAllergenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductAllergen.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductAllergenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Allergen<T extends AllergenDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AllergenDefaultArgs<ExtArgs>>): Prisma__AllergenClient<$Result.GetResult<Prisma.$AllergenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductAllergen model
   */
  interface ProductAllergenFieldRefs {
    readonly id: FieldRef<"ProductAllergen", 'String'>
    readonly productId: FieldRef<"ProductAllergen", 'String'>
    readonly allergenId: FieldRef<"ProductAllergen", 'String'>
    readonly mlPerDose: FieldRef<"ProductAllergen", 'Float'>
    readonly createdAt: FieldRef<"ProductAllergen", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductAllergen", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductAllergen findUnique
   */
  export type ProductAllergenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter, which ProductAllergen to fetch.
     */
    where: ProductAllergenWhereUniqueInput
  }

  /**
   * ProductAllergen findUniqueOrThrow
   */
  export type ProductAllergenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter, which ProductAllergen to fetch.
     */
    where: ProductAllergenWhereUniqueInput
  }

  /**
   * ProductAllergen findFirst
   */
  export type ProductAllergenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter, which ProductAllergen to fetch.
     */
    where?: ProductAllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAllergens to fetch.
     */
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAllergens.
     */
    cursor?: ProductAllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAllergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAllergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAllergens.
     */
    distinct?: ProductAllergenScalarFieldEnum | ProductAllergenScalarFieldEnum[]
  }

  /**
   * ProductAllergen findFirstOrThrow
   */
  export type ProductAllergenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter, which ProductAllergen to fetch.
     */
    where?: ProductAllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAllergens to fetch.
     */
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAllergens.
     */
    cursor?: ProductAllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAllergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAllergens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAllergens.
     */
    distinct?: ProductAllergenScalarFieldEnum | ProductAllergenScalarFieldEnum[]
  }

  /**
   * ProductAllergen findMany
   */
  export type ProductAllergenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter, which ProductAllergens to fetch.
     */
    where?: ProductAllergenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAllergens to fetch.
     */
    orderBy?: ProductAllergenOrderByWithRelationInput | ProductAllergenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductAllergens.
     */
    cursor?: ProductAllergenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAllergens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAllergens.
     */
    skip?: number
    distinct?: ProductAllergenScalarFieldEnum | ProductAllergenScalarFieldEnum[]
  }

  /**
   * ProductAllergen create
   */
  export type ProductAllergenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductAllergen.
     */
    data: XOR<ProductAllergenCreateInput, ProductAllergenUncheckedCreateInput>
  }

  /**
   * ProductAllergen createMany
   */
  export type ProductAllergenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductAllergens.
     */
    data: ProductAllergenCreateManyInput | ProductAllergenCreateManyInput[]
  }

  /**
   * ProductAllergen createManyAndReturn
   */
  export type ProductAllergenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * The data used to create many ProductAllergens.
     */
    data: ProductAllergenCreateManyInput | ProductAllergenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductAllergen update
   */
  export type ProductAllergenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductAllergen.
     */
    data: XOR<ProductAllergenUpdateInput, ProductAllergenUncheckedUpdateInput>
    /**
     * Choose, which ProductAllergen to update.
     */
    where: ProductAllergenWhereUniqueInput
  }

  /**
   * ProductAllergen updateMany
   */
  export type ProductAllergenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductAllergens.
     */
    data: XOR<ProductAllergenUpdateManyMutationInput, ProductAllergenUncheckedUpdateManyInput>
    /**
     * Filter which ProductAllergens to update
     */
    where?: ProductAllergenWhereInput
    /**
     * Limit how many ProductAllergens to update.
     */
    limit?: number
  }

  /**
   * ProductAllergen updateManyAndReturn
   */
  export type ProductAllergenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * The data used to update ProductAllergens.
     */
    data: XOR<ProductAllergenUpdateManyMutationInput, ProductAllergenUncheckedUpdateManyInput>
    /**
     * Filter which ProductAllergens to update
     */
    where?: ProductAllergenWhereInput
    /**
     * Limit how many ProductAllergens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductAllergen upsert
   */
  export type ProductAllergenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductAllergen to update in case it exists.
     */
    where: ProductAllergenWhereUniqueInput
    /**
     * In case the ProductAllergen found by the `where` argument doesn't exist, create a new ProductAllergen with this data.
     */
    create: XOR<ProductAllergenCreateInput, ProductAllergenUncheckedCreateInput>
    /**
     * In case the ProductAllergen was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductAllergenUpdateInput, ProductAllergenUncheckedUpdateInput>
  }

  /**
   * ProductAllergen delete
   */
  export type ProductAllergenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
    /**
     * Filter which ProductAllergen to delete.
     */
    where: ProductAllergenWhereUniqueInput
  }

  /**
   * ProductAllergen deleteMany
   */
  export type ProductAllergenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAllergens to delete
     */
    where?: ProductAllergenWhereInput
    /**
     * Limit how many ProductAllergens to delete.
     */
    limit?: number
  }

  /**
   * ProductAllergen without action
   */
  export type ProductAllergenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAllergen
     */
    select?: ProductAllergenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAllergen
     */
    omit?: ProductAllergenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAllergenInclude<ExtArgs> | null
  }


  /**
   * Model ProductExpiration
   */

  export type AggregateProductExpiration = {
    _count: ProductExpirationCountAggregateOutputType | null
    _avg: ProductExpirationAvgAggregateOutputType | null
    _sum: ProductExpirationSumAggregateOutputType | null
    _min: ProductExpirationMinAggregateOutputType | null
    _max: ProductExpirationMaxAggregateOutputType | null
  }

  export type ProductExpirationAvgAggregateOutputType = {
    quantity: number | null
  }

  export type ProductExpirationSumAggregateOutputType = {
    quantity: number | null
  }

  export type ProductExpirationMinAggregateOutputType = {
    id: string | null
    productId: string | null
    sedeId: string | null
    batchNumber: string | null
    expiryDate: Date | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductExpirationMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    sedeId: string | null
    batchNumber: string | null
    expiryDate: Date | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductExpirationCountAggregateOutputType = {
    id: number
    productId: number
    sedeId: number
    batchNumber: number
    expiryDate: number
    quantity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductExpirationAvgAggregateInputType = {
    quantity?: true
  }

  export type ProductExpirationSumAggregateInputType = {
    quantity?: true
  }

  export type ProductExpirationMinAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    batchNumber?: true
    expiryDate?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductExpirationMaxAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    batchNumber?: true
    expiryDate?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductExpirationCountAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    batchNumber?: true
    expiryDate?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductExpirationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductExpiration to aggregate.
     */
    where?: ProductExpirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductExpirations to fetch.
     */
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductExpirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductExpirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductExpirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductExpirations
    **/
    _count?: true | ProductExpirationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductExpirationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductExpirationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductExpirationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductExpirationMaxAggregateInputType
  }

  export type GetProductExpirationAggregateType<T extends ProductExpirationAggregateArgs> = {
        [P in keyof T & keyof AggregateProductExpiration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductExpiration[P]>
      : GetScalarType<T[P], AggregateProductExpiration[P]>
  }




  export type ProductExpirationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductExpirationWhereInput
    orderBy?: ProductExpirationOrderByWithAggregationInput | ProductExpirationOrderByWithAggregationInput[]
    by: ProductExpirationScalarFieldEnum[] | ProductExpirationScalarFieldEnum
    having?: ProductExpirationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductExpirationCountAggregateInputType | true
    _avg?: ProductExpirationAvgAggregateInputType
    _sum?: ProductExpirationSumAggregateInputType
    _min?: ProductExpirationMinAggregateInputType
    _max?: ProductExpirationMaxAggregateInputType
  }

  export type ProductExpirationGroupByOutputType = {
    id: string
    productId: string
    sedeId: string
    batchNumber: string
    expiryDate: Date
    quantity: number
    createdAt: Date
    updatedAt: Date
    _count: ProductExpirationCountAggregateOutputType | null
    _avg: ProductExpirationAvgAggregateOutputType | null
    _sum: ProductExpirationSumAggregateOutputType | null
    _min: ProductExpirationMinAggregateOutputType | null
    _max: ProductExpirationMaxAggregateOutputType | null
  }

  type GetProductExpirationGroupByPayload<T extends ProductExpirationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductExpirationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductExpirationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductExpirationGroupByOutputType[P]>
            : GetScalarType<T[P], ProductExpirationGroupByOutputType[P]>
        }
      >
    >


  export type ProductExpirationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productExpiration"]>

  export type ProductExpirationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productExpiration"]>

  export type ProductExpirationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productExpiration"]>

  export type ProductExpirationSelectScalar = {
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    batchNumber?: boolean
    expiryDate?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductExpirationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "sedeId" | "batchNumber" | "expiryDate" | "quantity" | "createdAt" | "updatedAt", ExtArgs["result"]["productExpiration"]>
  export type ProductExpirationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type ProductExpirationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type ProductExpirationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }

  export type $ProductExpirationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductExpiration"
    objects: {
      Product: Prisma.$ProductPayload<ExtArgs>
      Sede: Prisma.$SedePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      sedeId: string
      batchNumber: string
      expiryDate: Date
      quantity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productExpiration"]>
    composites: {}
  }

  type ProductExpirationGetPayload<S extends boolean | null | undefined | ProductExpirationDefaultArgs> = $Result.GetResult<Prisma.$ProductExpirationPayload, S>

  type ProductExpirationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductExpirationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductExpirationCountAggregateInputType | true
    }

  export interface ProductExpirationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductExpiration'], meta: { name: 'ProductExpiration' } }
    /**
     * Find zero or one ProductExpiration that matches the filter.
     * @param {ProductExpirationFindUniqueArgs} args - Arguments to find a ProductExpiration
     * @example
     * // Get one ProductExpiration
     * const productExpiration = await prisma.productExpiration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductExpirationFindUniqueArgs>(args: SelectSubset<T, ProductExpirationFindUniqueArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductExpiration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductExpirationFindUniqueOrThrowArgs} args - Arguments to find a ProductExpiration
     * @example
     * // Get one ProductExpiration
     * const productExpiration = await prisma.productExpiration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductExpirationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductExpirationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductExpiration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationFindFirstArgs} args - Arguments to find a ProductExpiration
     * @example
     * // Get one ProductExpiration
     * const productExpiration = await prisma.productExpiration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductExpirationFindFirstArgs>(args?: SelectSubset<T, ProductExpirationFindFirstArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductExpiration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationFindFirstOrThrowArgs} args - Arguments to find a ProductExpiration
     * @example
     * // Get one ProductExpiration
     * const productExpiration = await prisma.productExpiration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductExpirationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductExpirationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductExpirations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductExpirations
     * const productExpirations = await prisma.productExpiration.findMany()
     * 
     * // Get first 10 ProductExpirations
     * const productExpirations = await prisma.productExpiration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productExpirationWithIdOnly = await prisma.productExpiration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductExpirationFindManyArgs>(args?: SelectSubset<T, ProductExpirationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductExpiration.
     * @param {ProductExpirationCreateArgs} args - Arguments to create a ProductExpiration.
     * @example
     * // Create one ProductExpiration
     * const ProductExpiration = await prisma.productExpiration.create({
     *   data: {
     *     // ... data to create a ProductExpiration
     *   }
     * })
     * 
     */
    create<T extends ProductExpirationCreateArgs>(args: SelectSubset<T, ProductExpirationCreateArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductExpirations.
     * @param {ProductExpirationCreateManyArgs} args - Arguments to create many ProductExpirations.
     * @example
     * // Create many ProductExpirations
     * const productExpiration = await prisma.productExpiration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductExpirationCreateManyArgs>(args?: SelectSubset<T, ProductExpirationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductExpirations and returns the data saved in the database.
     * @param {ProductExpirationCreateManyAndReturnArgs} args - Arguments to create many ProductExpirations.
     * @example
     * // Create many ProductExpirations
     * const productExpiration = await prisma.productExpiration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductExpirations and only return the `id`
     * const productExpirationWithIdOnly = await prisma.productExpiration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductExpirationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductExpirationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductExpiration.
     * @param {ProductExpirationDeleteArgs} args - Arguments to delete one ProductExpiration.
     * @example
     * // Delete one ProductExpiration
     * const ProductExpiration = await prisma.productExpiration.delete({
     *   where: {
     *     // ... filter to delete one ProductExpiration
     *   }
     * })
     * 
     */
    delete<T extends ProductExpirationDeleteArgs>(args: SelectSubset<T, ProductExpirationDeleteArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductExpiration.
     * @param {ProductExpirationUpdateArgs} args - Arguments to update one ProductExpiration.
     * @example
     * // Update one ProductExpiration
     * const productExpiration = await prisma.productExpiration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductExpirationUpdateArgs>(args: SelectSubset<T, ProductExpirationUpdateArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductExpirations.
     * @param {ProductExpirationDeleteManyArgs} args - Arguments to filter ProductExpirations to delete.
     * @example
     * // Delete a few ProductExpirations
     * const { count } = await prisma.productExpiration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductExpirationDeleteManyArgs>(args?: SelectSubset<T, ProductExpirationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductExpirations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductExpirations
     * const productExpiration = await prisma.productExpiration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductExpirationUpdateManyArgs>(args: SelectSubset<T, ProductExpirationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductExpirations and returns the data updated in the database.
     * @param {ProductExpirationUpdateManyAndReturnArgs} args - Arguments to update many ProductExpirations.
     * @example
     * // Update many ProductExpirations
     * const productExpiration = await prisma.productExpiration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductExpirations and only return the `id`
     * const productExpirationWithIdOnly = await prisma.productExpiration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductExpirationUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductExpirationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductExpiration.
     * @param {ProductExpirationUpsertArgs} args - Arguments to update or create a ProductExpiration.
     * @example
     * // Update or create a ProductExpiration
     * const productExpiration = await prisma.productExpiration.upsert({
     *   create: {
     *     // ... data to create a ProductExpiration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductExpiration we want to update
     *   }
     * })
     */
    upsert<T extends ProductExpirationUpsertArgs>(args: SelectSubset<T, ProductExpirationUpsertArgs<ExtArgs>>): Prisma__ProductExpirationClient<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductExpirations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationCountArgs} args - Arguments to filter ProductExpirations to count.
     * @example
     * // Count the number of ProductExpirations
     * const count = await prisma.productExpiration.count({
     *   where: {
     *     // ... the filter for the ProductExpirations we want to count
     *   }
     * })
    **/
    count<T extends ProductExpirationCountArgs>(
      args?: Subset<T, ProductExpirationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductExpirationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductExpiration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductExpirationAggregateArgs>(args: Subset<T, ProductExpirationAggregateArgs>): Prisma.PrismaPromise<GetProductExpirationAggregateType<T>>

    /**
     * Group by ProductExpiration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductExpirationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductExpirationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductExpirationGroupByArgs['orderBy'] }
        : { orderBy?: ProductExpirationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductExpirationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductExpirationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductExpiration model
   */
  readonly fields: ProductExpirationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductExpiration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductExpirationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductExpiration model
   */
  interface ProductExpirationFieldRefs {
    readonly id: FieldRef<"ProductExpiration", 'String'>
    readonly productId: FieldRef<"ProductExpiration", 'String'>
    readonly sedeId: FieldRef<"ProductExpiration", 'String'>
    readonly batchNumber: FieldRef<"ProductExpiration", 'String'>
    readonly expiryDate: FieldRef<"ProductExpiration", 'DateTime'>
    readonly quantity: FieldRef<"ProductExpiration", 'Int'>
    readonly createdAt: FieldRef<"ProductExpiration", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductExpiration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductExpiration findUnique
   */
  export type ProductExpirationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter, which ProductExpiration to fetch.
     */
    where: ProductExpirationWhereUniqueInput
  }

  /**
   * ProductExpiration findUniqueOrThrow
   */
  export type ProductExpirationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter, which ProductExpiration to fetch.
     */
    where: ProductExpirationWhereUniqueInput
  }

  /**
   * ProductExpiration findFirst
   */
  export type ProductExpirationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter, which ProductExpiration to fetch.
     */
    where?: ProductExpirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductExpirations to fetch.
     */
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductExpirations.
     */
    cursor?: ProductExpirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductExpirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductExpirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductExpirations.
     */
    distinct?: ProductExpirationScalarFieldEnum | ProductExpirationScalarFieldEnum[]
  }

  /**
   * ProductExpiration findFirstOrThrow
   */
  export type ProductExpirationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter, which ProductExpiration to fetch.
     */
    where?: ProductExpirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductExpirations to fetch.
     */
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductExpirations.
     */
    cursor?: ProductExpirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductExpirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductExpirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductExpirations.
     */
    distinct?: ProductExpirationScalarFieldEnum | ProductExpirationScalarFieldEnum[]
  }

  /**
   * ProductExpiration findMany
   */
  export type ProductExpirationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter, which ProductExpirations to fetch.
     */
    where?: ProductExpirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductExpirations to fetch.
     */
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductExpirations.
     */
    cursor?: ProductExpirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductExpirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductExpirations.
     */
    skip?: number
    distinct?: ProductExpirationScalarFieldEnum | ProductExpirationScalarFieldEnum[]
  }

  /**
   * ProductExpiration create
   */
  export type ProductExpirationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductExpiration.
     */
    data: XOR<ProductExpirationCreateInput, ProductExpirationUncheckedCreateInput>
  }

  /**
   * ProductExpiration createMany
   */
  export type ProductExpirationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductExpirations.
     */
    data: ProductExpirationCreateManyInput | ProductExpirationCreateManyInput[]
  }

  /**
   * ProductExpiration createManyAndReturn
   */
  export type ProductExpirationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * The data used to create many ProductExpirations.
     */
    data: ProductExpirationCreateManyInput | ProductExpirationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductExpiration update
   */
  export type ProductExpirationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductExpiration.
     */
    data: XOR<ProductExpirationUpdateInput, ProductExpirationUncheckedUpdateInput>
    /**
     * Choose, which ProductExpiration to update.
     */
    where: ProductExpirationWhereUniqueInput
  }

  /**
   * ProductExpiration updateMany
   */
  export type ProductExpirationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductExpirations.
     */
    data: XOR<ProductExpirationUpdateManyMutationInput, ProductExpirationUncheckedUpdateManyInput>
    /**
     * Filter which ProductExpirations to update
     */
    where?: ProductExpirationWhereInput
    /**
     * Limit how many ProductExpirations to update.
     */
    limit?: number
  }

  /**
   * ProductExpiration updateManyAndReturn
   */
  export type ProductExpirationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * The data used to update ProductExpirations.
     */
    data: XOR<ProductExpirationUpdateManyMutationInput, ProductExpirationUncheckedUpdateManyInput>
    /**
     * Filter which ProductExpirations to update
     */
    where?: ProductExpirationWhereInput
    /**
     * Limit how many ProductExpirations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductExpiration upsert
   */
  export type ProductExpirationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductExpiration to update in case it exists.
     */
    where: ProductExpirationWhereUniqueInput
    /**
     * In case the ProductExpiration found by the `where` argument doesn't exist, create a new ProductExpiration with this data.
     */
    create: XOR<ProductExpirationCreateInput, ProductExpirationUncheckedCreateInput>
    /**
     * In case the ProductExpiration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductExpirationUpdateInput, ProductExpirationUncheckedUpdateInput>
  }

  /**
   * ProductExpiration delete
   */
  export type ProductExpirationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    /**
     * Filter which ProductExpiration to delete.
     */
    where: ProductExpirationWhereUniqueInput
  }

  /**
   * ProductExpiration deleteMany
   */
  export type ProductExpirationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductExpirations to delete
     */
    where?: ProductExpirationWhereInput
    /**
     * Limit how many ProductExpirations to delete.
     */
    limit?: number
  }

  /**
   * ProductExpiration without action
   */
  export type ProductExpirationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
  }


  /**
   * Model Sede
   */

  export type AggregateSede = {
    _count: SedeCountAggregateOutputType | null
    _min: SedeMinAggregateOutputType | null
    _max: SedeMaxAggregateOutputType | null
  }

  export type SedeMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SedeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SedeCountAggregateOutputType = {
    id: number
    name: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SedeMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SedeMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SedeCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SedeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sede to aggregate.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sedes
    **/
    _count?: true | SedeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SedeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SedeMaxAggregateInputType
  }

  export type GetSedeAggregateType<T extends SedeAggregateArgs> = {
        [P in keyof T & keyof AggregateSede]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSede[P]>
      : GetScalarType<T[P], AggregateSede[P]>
  }




  export type SedeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SedeWhereInput
    orderBy?: SedeOrderByWithAggregationInput | SedeOrderByWithAggregationInput[]
    by: SedeScalarFieldEnum[] | SedeScalarFieldEnum
    having?: SedeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SedeCountAggregateInputType | true
    _min?: SedeMinAggregateInputType
    _max?: SedeMaxAggregateInputType
  }

  export type SedeGroupByOutputType = {
    id: string
    name: string
    address: string
    createdAt: Date
    updatedAt: Date
    _count: SedeCountAggregateOutputType | null
    _min: SedeMinAggregateOutputType | null
    _max: SedeMaxAggregateOutputType | null
  }

  type GetSedeGroupByPayload<T extends SedeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SedeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SedeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SedeGroupByOutputType[P]>
            : GetScalarType<T[P], SedeGroupByOutputType[P]>
        }
      >
    >


  export type SedeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    InventoryUsage?: boolean | Sede$InventoryUsageArgs<ExtArgs>
    Movement?: boolean | Sede$MovementArgs<ExtArgs>
    ProductExpiration?: boolean | Sede$ProductExpirationArgs<ExtArgs>
    StockBySede?: boolean | Sede$StockBySedeArgs<ExtArgs>
    User?: boolean | Sede$UserArgs<ExtArgs>
    _count?: boolean | SedeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SedeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["sede"]>
  export type SedeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | Sede$InventoryUsageArgs<ExtArgs>
    Movement?: boolean | Sede$MovementArgs<ExtArgs>
    ProductExpiration?: boolean | Sede$ProductExpirationArgs<ExtArgs>
    StockBySede?: boolean | Sede$StockBySedeArgs<ExtArgs>
    User?: boolean | Sede$UserArgs<ExtArgs>
    _count?: boolean | SedeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SedeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SedeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SedePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sede"
    objects: {
      InventoryUsage: Prisma.$InventoryUsagePayload<ExtArgs>[]
      Movement: Prisma.$MovementPayload<ExtArgs>[]
      ProductExpiration: Prisma.$ProductExpirationPayload<ExtArgs>[]
      StockBySede: Prisma.$StockBySedePayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sede"]>
    composites: {}
  }

  type SedeGetPayload<S extends boolean | null | undefined | SedeDefaultArgs> = $Result.GetResult<Prisma.$SedePayload, S>

  type SedeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SedeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SedeCountAggregateInputType | true
    }

  export interface SedeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sede'], meta: { name: 'Sede' } }
    /**
     * Find zero or one Sede that matches the filter.
     * @param {SedeFindUniqueArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SedeFindUniqueArgs>(args: SelectSubset<T, SedeFindUniqueArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sede that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SedeFindUniqueOrThrowArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SedeFindUniqueOrThrowArgs>(args: SelectSubset<T, SedeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sede that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindFirstArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SedeFindFirstArgs>(args?: SelectSubset<T, SedeFindFirstArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sede that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindFirstOrThrowArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SedeFindFirstOrThrowArgs>(args?: SelectSubset<T, SedeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sedes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sedes
     * const sedes = await prisma.sede.findMany()
     * 
     * // Get first 10 Sedes
     * const sedes = await prisma.sede.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sedeWithIdOnly = await prisma.sede.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SedeFindManyArgs>(args?: SelectSubset<T, SedeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sede.
     * @param {SedeCreateArgs} args - Arguments to create a Sede.
     * @example
     * // Create one Sede
     * const Sede = await prisma.sede.create({
     *   data: {
     *     // ... data to create a Sede
     *   }
     * })
     * 
     */
    create<T extends SedeCreateArgs>(args: SelectSubset<T, SedeCreateArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sedes.
     * @param {SedeCreateManyArgs} args - Arguments to create many Sedes.
     * @example
     * // Create many Sedes
     * const sede = await prisma.sede.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SedeCreateManyArgs>(args?: SelectSubset<T, SedeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sedes and returns the data saved in the database.
     * @param {SedeCreateManyAndReturnArgs} args - Arguments to create many Sedes.
     * @example
     * // Create many Sedes
     * const sede = await prisma.sede.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sedes and only return the `id`
     * const sedeWithIdOnly = await prisma.sede.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SedeCreateManyAndReturnArgs>(args?: SelectSubset<T, SedeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sede.
     * @param {SedeDeleteArgs} args - Arguments to delete one Sede.
     * @example
     * // Delete one Sede
     * const Sede = await prisma.sede.delete({
     *   where: {
     *     // ... filter to delete one Sede
     *   }
     * })
     * 
     */
    delete<T extends SedeDeleteArgs>(args: SelectSubset<T, SedeDeleteArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sede.
     * @param {SedeUpdateArgs} args - Arguments to update one Sede.
     * @example
     * // Update one Sede
     * const sede = await prisma.sede.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SedeUpdateArgs>(args: SelectSubset<T, SedeUpdateArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sedes.
     * @param {SedeDeleteManyArgs} args - Arguments to filter Sedes to delete.
     * @example
     * // Delete a few Sedes
     * const { count } = await prisma.sede.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SedeDeleteManyArgs>(args?: SelectSubset<T, SedeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sedes
     * const sede = await prisma.sede.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SedeUpdateManyArgs>(args: SelectSubset<T, SedeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sedes and returns the data updated in the database.
     * @param {SedeUpdateManyAndReturnArgs} args - Arguments to update many Sedes.
     * @example
     * // Update many Sedes
     * const sede = await prisma.sede.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sedes and only return the `id`
     * const sedeWithIdOnly = await prisma.sede.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SedeUpdateManyAndReturnArgs>(args: SelectSubset<T, SedeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sede.
     * @param {SedeUpsertArgs} args - Arguments to update or create a Sede.
     * @example
     * // Update or create a Sede
     * const sede = await prisma.sede.upsert({
     *   create: {
     *     // ... data to create a Sede
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sede we want to update
     *   }
     * })
     */
    upsert<T extends SedeUpsertArgs>(args: SelectSubset<T, SedeUpsertArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeCountArgs} args - Arguments to filter Sedes to count.
     * @example
     * // Count the number of Sedes
     * const count = await prisma.sede.count({
     *   where: {
     *     // ... the filter for the Sedes we want to count
     *   }
     * })
    **/
    count<T extends SedeCountArgs>(
      args?: Subset<T, SedeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SedeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SedeAggregateArgs>(args: Subset<T, SedeAggregateArgs>): Prisma.PrismaPromise<GetSedeAggregateType<T>>

    /**
     * Group by Sede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SedeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SedeGroupByArgs['orderBy'] }
        : { orderBy?: SedeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SedeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSedeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sede model
   */
  readonly fields: SedeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sede.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SedeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InventoryUsage<T extends Sede$InventoryUsageArgs<ExtArgs> = {}>(args?: Subset<T, Sede$InventoryUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Movement<T extends Sede$MovementArgs<ExtArgs> = {}>(args?: Subset<T, Sede$MovementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProductExpiration<T extends Sede$ProductExpirationArgs<ExtArgs> = {}>(args?: Subset<T, Sede$ProductExpirationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductExpirationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StockBySede<T extends Sede$StockBySedeArgs<ExtArgs> = {}>(args?: Subset<T, Sede$StockBySedeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    User<T extends Sede$UserArgs<ExtArgs> = {}>(args?: Subset<T, Sede$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sede model
   */
  interface SedeFieldRefs {
    readonly id: FieldRef<"Sede", 'String'>
    readonly name: FieldRef<"Sede", 'String'>
    readonly address: FieldRef<"Sede", 'String'>
    readonly createdAt: FieldRef<"Sede", 'DateTime'>
    readonly updatedAt: FieldRef<"Sede", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sede findUnique
   */
  export type SedeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede findUniqueOrThrow
   */
  export type SedeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede findFirst
   */
  export type SedeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sedes.
     */
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede findFirstOrThrow
   */
  export type SedeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sedes.
     */
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede findMany
   */
  export type SedeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sedes to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede create
   */
  export type SedeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The data needed to create a Sede.
     */
    data: XOR<SedeCreateInput, SedeUncheckedCreateInput>
  }

  /**
   * Sede createMany
   */
  export type SedeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sedes.
     */
    data: SedeCreateManyInput | SedeCreateManyInput[]
  }

  /**
   * Sede createManyAndReturn
   */
  export type SedeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * The data used to create many Sedes.
     */
    data: SedeCreateManyInput | SedeCreateManyInput[]
  }

  /**
   * Sede update
   */
  export type SedeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The data needed to update a Sede.
     */
    data: XOR<SedeUpdateInput, SedeUncheckedUpdateInput>
    /**
     * Choose, which Sede to update.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede updateMany
   */
  export type SedeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sedes.
     */
    data: XOR<SedeUpdateManyMutationInput, SedeUncheckedUpdateManyInput>
    /**
     * Filter which Sedes to update
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to update.
     */
    limit?: number
  }

  /**
   * Sede updateManyAndReturn
   */
  export type SedeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * The data used to update Sedes.
     */
    data: XOR<SedeUpdateManyMutationInput, SedeUncheckedUpdateManyInput>
    /**
     * Filter which Sedes to update
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to update.
     */
    limit?: number
  }

  /**
   * Sede upsert
   */
  export type SedeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The filter to search for the Sede to update in case it exists.
     */
    where: SedeWhereUniqueInput
    /**
     * In case the Sede found by the `where` argument doesn't exist, create a new Sede with this data.
     */
    create: XOR<SedeCreateInput, SedeUncheckedCreateInput>
    /**
     * In case the Sede was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SedeUpdateInput, SedeUncheckedUpdateInput>
  }

  /**
   * Sede delete
   */
  export type SedeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter which Sede to delete.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede deleteMany
   */
  export type SedeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sedes to delete
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to delete.
     */
    limit?: number
  }

  /**
   * Sede.InventoryUsage
   */
  export type Sede$InventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    where?: InventoryUsageWhereInput
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    cursor?: InventoryUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * Sede.Movement
   */
  export type Sede$MovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    cursor?: MovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Sede.ProductExpiration
   */
  export type Sede$ProductExpirationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductExpiration
     */
    select?: ProductExpirationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductExpiration
     */
    omit?: ProductExpirationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductExpirationInclude<ExtArgs> | null
    where?: ProductExpirationWhereInput
    orderBy?: ProductExpirationOrderByWithRelationInput | ProductExpirationOrderByWithRelationInput[]
    cursor?: ProductExpirationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductExpirationScalarFieldEnum | ProductExpirationScalarFieldEnum[]
  }

  /**
   * Sede.StockBySede
   */
  export type Sede$StockBySedeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    where?: StockBySedeWhereInput
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    cursor?: StockBySedeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockBySedeScalarFieldEnum | StockBySedeScalarFieldEnum[]
  }

  /**
   * Sede.User
   */
  export type Sede$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Sede without action
   */
  export type SedeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
  }


  /**
   * Model StockBySede
   */

  export type AggregateStockBySede = {
    _count: StockBySedeCountAggregateOutputType | null
    _avg: StockBySedeAvgAggregateOutputType | null
    _sum: StockBySedeSumAggregateOutputType | null
    _min: StockBySedeMinAggregateOutputType | null
    _max: StockBySedeMaxAggregateOutputType | null
  }

  export type StockBySedeAvgAggregateOutputType = {
    quantity: number | null
  }

  export type StockBySedeSumAggregateOutputType = {
    quantity: number | null
  }

  export type StockBySedeMinAggregateOutputType = {
    id: string | null
    productId: string | null
    sedeId: string | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockBySedeMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    sedeId: string | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockBySedeCountAggregateOutputType = {
    id: number
    productId: number
    sedeId: number
    quantity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StockBySedeAvgAggregateInputType = {
    quantity?: true
  }

  export type StockBySedeSumAggregateInputType = {
    quantity?: true
  }

  export type StockBySedeMinAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockBySedeMaxAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockBySedeCountAggregateInputType = {
    id?: true
    productId?: true
    sedeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StockBySedeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockBySede to aggregate.
     */
    where?: StockBySedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockBySedes to fetch.
     */
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockBySedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockBySedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockBySedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockBySedes
    **/
    _count?: true | StockBySedeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockBySedeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockBySedeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockBySedeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockBySedeMaxAggregateInputType
  }

  export type GetStockBySedeAggregateType<T extends StockBySedeAggregateArgs> = {
        [P in keyof T & keyof AggregateStockBySede]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockBySede[P]>
      : GetScalarType<T[P], AggregateStockBySede[P]>
  }




  export type StockBySedeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockBySedeWhereInput
    orderBy?: StockBySedeOrderByWithAggregationInput | StockBySedeOrderByWithAggregationInput[]
    by: StockBySedeScalarFieldEnum[] | StockBySedeScalarFieldEnum
    having?: StockBySedeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockBySedeCountAggregateInputType | true
    _avg?: StockBySedeAvgAggregateInputType
    _sum?: StockBySedeSumAggregateInputType
    _min?: StockBySedeMinAggregateInputType
    _max?: StockBySedeMaxAggregateInputType
  }

  export type StockBySedeGroupByOutputType = {
    id: string
    productId: string
    sedeId: string
    quantity: number
    createdAt: Date
    updatedAt: Date
    _count: StockBySedeCountAggregateOutputType | null
    _avg: StockBySedeAvgAggregateOutputType | null
    _sum: StockBySedeSumAggregateOutputType | null
    _min: StockBySedeMinAggregateOutputType | null
    _max: StockBySedeMaxAggregateOutputType | null
  }

  type GetStockBySedeGroupByPayload<T extends StockBySedeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockBySedeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockBySedeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockBySedeGroupByOutputType[P]>
            : GetScalarType<T[P], StockBySedeGroupByOutputType[P]>
        }
      >
    >


  export type StockBySedeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockBySede"]>

  export type StockBySedeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockBySede"]>

  export type StockBySedeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockBySede"]>

  export type StockBySedeSelectScalar = {
    id?: boolean
    productId?: boolean
    sedeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StockBySedeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "sedeId" | "quantity" | "createdAt" | "updatedAt", ExtArgs["result"]["stockBySede"]>
  export type StockBySedeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type StockBySedeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type StockBySedeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }

  export type $StockBySedePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockBySede"
    objects: {
      Product: Prisma.$ProductPayload<ExtArgs>
      Sede: Prisma.$SedePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      sedeId: string
      quantity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stockBySede"]>
    composites: {}
  }

  type StockBySedeGetPayload<S extends boolean | null | undefined | StockBySedeDefaultArgs> = $Result.GetResult<Prisma.$StockBySedePayload, S>

  type StockBySedeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockBySedeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockBySedeCountAggregateInputType | true
    }

  export interface StockBySedeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockBySede'], meta: { name: 'StockBySede' } }
    /**
     * Find zero or one StockBySede that matches the filter.
     * @param {StockBySedeFindUniqueArgs} args - Arguments to find a StockBySede
     * @example
     * // Get one StockBySede
     * const stockBySede = await prisma.stockBySede.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockBySedeFindUniqueArgs>(args: SelectSubset<T, StockBySedeFindUniqueArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StockBySede that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockBySedeFindUniqueOrThrowArgs} args - Arguments to find a StockBySede
     * @example
     * // Get one StockBySede
     * const stockBySede = await prisma.stockBySede.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockBySedeFindUniqueOrThrowArgs>(args: SelectSubset<T, StockBySedeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockBySede that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeFindFirstArgs} args - Arguments to find a StockBySede
     * @example
     * // Get one StockBySede
     * const stockBySede = await prisma.stockBySede.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockBySedeFindFirstArgs>(args?: SelectSubset<T, StockBySedeFindFirstArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockBySede that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeFindFirstOrThrowArgs} args - Arguments to find a StockBySede
     * @example
     * // Get one StockBySede
     * const stockBySede = await prisma.stockBySede.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockBySedeFindFirstOrThrowArgs>(args?: SelectSubset<T, StockBySedeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StockBySedes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockBySedes
     * const stockBySedes = await prisma.stockBySede.findMany()
     * 
     * // Get first 10 StockBySedes
     * const stockBySedes = await prisma.stockBySede.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockBySedeWithIdOnly = await prisma.stockBySede.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockBySedeFindManyArgs>(args?: SelectSubset<T, StockBySedeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StockBySede.
     * @param {StockBySedeCreateArgs} args - Arguments to create a StockBySede.
     * @example
     * // Create one StockBySede
     * const StockBySede = await prisma.stockBySede.create({
     *   data: {
     *     // ... data to create a StockBySede
     *   }
     * })
     * 
     */
    create<T extends StockBySedeCreateArgs>(args: SelectSubset<T, StockBySedeCreateArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StockBySedes.
     * @param {StockBySedeCreateManyArgs} args - Arguments to create many StockBySedes.
     * @example
     * // Create many StockBySedes
     * const stockBySede = await prisma.stockBySede.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockBySedeCreateManyArgs>(args?: SelectSubset<T, StockBySedeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockBySedes and returns the data saved in the database.
     * @param {StockBySedeCreateManyAndReturnArgs} args - Arguments to create many StockBySedes.
     * @example
     * // Create many StockBySedes
     * const stockBySede = await prisma.stockBySede.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockBySedes and only return the `id`
     * const stockBySedeWithIdOnly = await prisma.stockBySede.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockBySedeCreateManyAndReturnArgs>(args?: SelectSubset<T, StockBySedeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StockBySede.
     * @param {StockBySedeDeleteArgs} args - Arguments to delete one StockBySede.
     * @example
     * // Delete one StockBySede
     * const StockBySede = await prisma.stockBySede.delete({
     *   where: {
     *     // ... filter to delete one StockBySede
     *   }
     * })
     * 
     */
    delete<T extends StockBySedeDeleteArgs>(args: SelectSubset<T, StockBySedeDeleteArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StockBySede.
     * @param {StockBySedeUpdateArgs} args - Arguments to update one StockBySede.
     * @example
     * // Update one StockBySede
     * const stockBySede = await prisma.stockBySede.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockBySedeUpdateArgs>(args: SelectSubset<T, StockBySedeUpdateArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StockBySedes.
     * @param {StockBySedeDeleteManyArgs} args - Arguments to filter StockBySedes to delete.
     * @example
     * // Delete a few StockBySedes
     * const { count } = await prisma.stockBySede.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockBySedeDeleteManyArgs>(args?: SelectSubset<T, StockBySedeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockBySedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockBySedes
     * const stockBySede = await prisma.stockBySede.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockBySedeUpdateManyArgs>(args: SelectSubset<T, StockBySedeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockBySedes and returns the data updated in the database.
     * @param {StockBySedeUpdateManyAndReturnArgs} args - Arguments to update many StockBySedes.
     * @example
     * // Update many StockBySedes
     * const stockBySede = await prisma.stockBySede.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StockBySedes and only return the `id`
     * const stockBySedeWithIdOnly = await prisma.stockBySede.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockBySedeUpdateManyAndReturnArgs>(args: SelectSubset<T, StockBySedeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StockBySede.
     * @param {StockBySedeUpsertArgs} args - Arguments to update or create a StockBySede.
     * @example
     * // Update or create a StockBySede
     * const stockBySede = await prisma.stockBySede.upsert({
     *   create: {
     *     // ... data to create a StockBySede
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockBySede we want to update
     *   }
     * })
     */
    upsert<T extends StockBySedeUpsertArgs>(args: SelectSubset<T, StockBySedeUpsertArgs<ExtArgs>>): Prisma__StockBySedeClient<$Result.GetResult<Prisma.$StockBySedePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StockBySedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeCountArgs} args - Arguments to filter StockBySedes to count.
     * @example
     * // Count the number of StockBySedes
     * const count = await prisma.stockBySede.count({
     *   where: {
     *     // ... the filter for the StockBySedes we want to count
     *   }
     * })
    **/
    count<T extends StockBySedeCountArgs>(
      args?: Subset<T, StockBySedeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockBySedeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockBySede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockBySedeAggregateArgs>(args: Subset<T, StockBySedeAggregateArgs>): Prisma.PrismaPromise<GetStockBySedeAggregateType<T>>

    /**
     * Group by StockBySede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockBySedeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockBySedeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockBySedeGroupByArgs['orderBy'] }
        : { orderBy?: StockBySedeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockBySedeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockBySedeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockBySede model
   */
  readonly fields: StockBySedeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockBySede.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockBySedeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockBySede model
   */
  interface StockBySedeFieldRefs {
    readonly id: FieldRef<"StockBySede", 'String'>
    readonly productId: FieldRef<"StockBySede", 'String'>
    readonly sedeId: FieldRef<"StockBySede", 'String'>
    readonly quantity: FieldRef<"StockBySede", 'Float'>
    readonly createdAt: FieldRef<"StockBySede", 'DateTime'>
    readonly updatedAt: FieldRef<"StockBySede", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StockBySede findUnique
   */
  export type StockBySedeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter, which StockBySede to fetch.
     */
    where: StockBySedeWhereUniqueInput
  }

  /**
   * StockBySede findUniqueOrThrow
   */
  export type StockBySedeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter, which StockBySede to fetch.
     */
    where: StockBySedeWhereUniqueInput
  }

  /**
   * StockBySede findFirst
   */
  export type StockBySedeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter, which StockBySede to fetch.
     */
    where?: StockBySedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockBySedes to fetch.
     */
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockBySedes.
     */
    cursor?: StockBySedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockBySedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockBySedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockBySedes.
     */
    distinct?: StockBySedeScalarFieldEnum | StockBySedeScalarFieldEnum[]
  }

  /**
   * StockBySede findFirstOrThrow
   */
  export type StockBySedeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter, which StockBySede to fetch.
     */
    where?: StockBySedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockBySedes to fetch.
     */
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockBySedes.
     */
    cursor?: StockBySedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockBySedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockBySedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockBySedes.
     */
    distinct?: StockBySedeScalarFieldEnum | StockBySedeScalarFieldEnum[]
  }

  /**
   * StockBySede findMany
   */
  export type StockBySedeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter, which StockBySedes to fetch.
     */
    where?: StockBySedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockBySedes to fetch.
     */
    orderBy?: StockBySedeOrderByWithRelationInput | StockBySedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockBySedes.
     */
    cursor?: StockBySedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockBySedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockBySedes.
     */
    skip?: number
    distinct?: StockBySedeScalarFieldEnum | StockBySedeScalarFieldEnum[]
  }

  /**
   * StockBySede create
   */
  export type StockBySedeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * The data needed to create a StockBySede.
     */
    data: XOR<StockBySedeCreateInput, StockBySedeUncheckedCreateInput>
  }

  /**
   * StockBySede createMany
   */
  export type StockBySedeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockBySedes.
     */
    data: StockBySedeCreateManyInput | StockBySedeCreateManyInput[]
  }

  /**
   * StockBySede createManyAndReturn
   */
  export type StockBySedeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * The data used to create many StockBySedes.
     */
    data: StockBySedeCreateManyInput | StockBySedeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockBySede update
   */
  export type StockBySedeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * The data needed to update a StockBySede.
     */
    data: XOR<StockBySedeUpdateInput, StockBySedeUncheckedUpdateInput>
    /**
     * Choose, which StockBySede to update.
     */
    where: StockBySedeWhereUniqueInput
  }

  /**
   * StockBySede updateMany
   */
  export type StockBySedeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockBySedes.
     */
    data: XOR<StockBySedeUpdateManyMutationInput, StockBySedeUncheckedUpdateManyInput>
    /**
     * Filter which StockBySedes to update
     */
    where?: StockBySedeWhereInput
    /**
     * Limit how many StockBySedes to update.
     */
    limit?: number
  }

  /**
   * StockBySede updateManyAndReturn
   */
  export type StockBySedeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * The data used to update StockBySedes.
     */
    data: XOR<StockBySedeUpdateManyMutationInput, StockBySedeUncheckedUpdateManyInput>
    /**
     * Filter which StockBySedes to update
     */
    where?: StockBySedeWhereInput
    /**
     * Limit how many StockBySedes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockBySede upsert
   */
  export type StockBySedeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * The filter to search for the StockBySede to update in case it exists.
     */
    where: StockBySedeWhereUniqueInput
    /**
     * In case the StockBySede found by the `where` argument doesn't exist, create a new StockBySede with this data.
     */
    create: XOR<StockBySedeCreateInput, StockBySedeUncheckedCreateInput>
    /**
     * In case the StockBySede was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockBySedeUpdateInput, StockBySedeUncheckedUpdateInput>
  }

  /**
   * StockBySede delete
   */
  export type StockBySedeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
    /**
     * Filter which StockBySede to delete.
     */
    where: StockBySedeWhereUniqueInput
  }

  /**
   * StockBySede deleteMany
   */
  export type StockBySedeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockBySedes to delete
     */
    where?: StockBySedeWhereInput
    /**
     * Limit how many StockBySedes to delete.
     */
    limit?: number
  }

  /**
   * StockBySede without action
   */
  export type StockBySedeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockBySede
     */
    select?: StockBySedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockBySede
     */
    omit?: StockBySedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockBySedeInclude<ExtArgs> | null
  }


  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierAvgAggregateOutputType = {
    amountSupplied: number | null
  }

  export type SupplierSumAggregateOutputType = {
    amountSupplied: number | null
  }

  export type SupplierMinAggregateOutputType = {
    id: string | null
    name: string | null
    invoiceNumber: string | null
    amountSupplied: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: string | null
    name: string | null
    invoiceNumber: string | null
    amountSupplied: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    name: number
    invoiceNumber: number
    amountSupplied: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SupplierAvgAggregateInputType = {
    amountSupplied?: true
  }

  export type SupplierSumAggregateInputType = {
    amountSupplied?: true
  }

  export type SupplierMinAggregateInputType = {
    id?: true
    name?: true
    invoiceNumber?: true
    amountSupplied?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    name?: true
    invoiceNumber?: true
    amountSupplied?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    name?: true
    invoiceNumber?: true
    amountSupplied?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _avg?: SupplierAvgAggregateInputType
    _sum?: SupplierSumAggregateInputType
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: string
    name: string
    invoiceNumber: string | null
    amountSupplied: number
    createdAt: Date
    updatedAt: Date
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    invoiceNumber?: boolean
    amountSupplied?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    invoiceNumber?: boolean
    amountSupplied?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    invoiceNumber?: boolean
    amountSupplied?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    name?: boolean
    invoiceNumber?: boolean
    amountSupplied?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SupplierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "invoiceNumber" | "amountSupplied" | "createdAt" | "updatedAt", ExtArgs["result"]["supplier"]>

  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      invoiceNumber: string | null
      amountSupplied: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }

  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierFindUniqueArgs>(args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Supplier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierFindFirstArgs>(args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierFindManyArgs>(args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
     */
    create<T extends SupplierCreateArgs>(args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Suppliers.
     * @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCreateManyArgs>(args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {SupplierCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
     */
    delete<T extends SupplierDeleteArgs>(args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierUpdateArgs>(args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierDeleteManyArgs>(args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierUpdateManyArgs>(args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers and returns the data updated in the database.
     * @param {SupplierUpdateManyAndReturnArgs} args - Arguments to update many Suppliers.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SupplierUpdateManyAndReturnArgs>(args: SelectSubset<T, SupplierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
     */
    upsert<T extends SupplierUpsertArgs>(args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supplier model
   */
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'String'>
    readonly name: FieldRef<"Supplier", 'String'>
    readonly invoiceNumber: FieldRef<"Supplier", 'String'>
    readonly amountSupplied: FieldRef<"Supplier", 'Float'>
    readonly createdAt: FieldRef<"Supplier", 'DateTime'>
    readonly updatedAt: FieldRef<"Supplier", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }

  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
  }

  /**
   * Supplier createManyAndReturn
   */
  export type SupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
  }

  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
  }

  /**
   * Supplier updateManyAndReturn
   */
  export type SupplierUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
  }

  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }

  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to delete.
     */
    limit?: number
  }

  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    sedeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    sedeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    sedeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    sedeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    sedeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    sedeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    sedeId: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    sedeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    InventoryUsage?: boolean | User$InventoryUsageArgs<ExtArgs>
    Movement?: boolean | User$MovementArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    sedeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    sedeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    sedeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "role" | "sedeId" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InventoryUsage?: boolean | User$InventoryUsageArgs<ExtArgs>
    Movement?: boolean | User$MovementArgs<ExtArgs>
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sede?: boolean | SedeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      InventoryUsage: Prisma.$InventoryUsagePayload<ExtArgs>[]
      Movement: Prisma.$MovementPayload<ExtArgs>[]
      Sede: Prisma.$SedePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      role: $Enums.UserRole
      sedeId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InventoryUsage<T extends User$InventoryUsageArgs<ExtArgs> = {}>(args?: Subset<T, User$InventoryUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Movement<T extends User$MovementArgs<ExtArgs> = {}>(args?: Subset<T, User$MovementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly sedeId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.InventoryUsage
   */
  export type User$InventoryUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryUsage
     */
    select?: InventoryUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryUsage
     */
    omit?: InventoryUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryUsageInclude<ExtArgs> | null
    where?: InventoryUsageWhereInput
    orderBy?: InventoryUsageOrderByWithRelationInput | InventoryUsageOrderByWithRelationInput[]
    cursor?: InventoryUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryUsageScalarFieldEnum | InventoryUsageScalarFieldEnum[]
  }

  /**
   * User.Movement
   */
  export type User$MovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movement
     */
    omit?: MovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    cursor?: MovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model citas
   */

  export type AggregateCitas = {
    _count: CitasCountAggregateOutputType | null
    _min: CitasMinAggregateOutputType | null
    _max: CitasMaxAggregateOutputType | null
  }

  export type CitasMinAggregateOutputType = {
    id: string | null
    descripcion: string | null
    estado: $Enums.EstadoCita | null
    paciente_id: string | null
    usuario_id: string | null
    consultorio_id: string | null
    created_at: Date | null
    updated_at: Date | null
    color: string | null
    fecha_fin: Date | null
    fecha_inicio: Date | null
  }

  export type CitasMaxAggregateOutputType = {
    id: string | null
    descripcion: string | null
    estado: $Enums.EstadoCita | null
    paciente_id: string | null
    usuario_id: string | null
    consultorio_id: string | null
    created_at: Date | null
    updated_at: Date | null
    color: string | null
    fecha_fin: Date | null
    fecha_inicio: Date | null
  }

  export type CitasCountAggregateOutputType = {
    id: number
    descripcion: number
    estado: number
    paciente_id: number
    usuario_id: number
    consultorio_id: number
    created_at: number
    updated_at: number
    color: number
    fecha_fin: number
    fecha_inicio: number
    _all: number
  }


  export type CitasMinAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    created_at?: true
    updated_at?: true
    color?: true
    fecha_fin?: true
    fecha_inicio?: true
  }

  export type CitasMaxAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    created_at?: true
    updated_at?: true
    color?: true
    fecha_fin?: true
    fecha_inicio?: true
  }

  export type CitasCountAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
    paciente_id?: true
    usuario_id?: true
    consultorio_id?: true
    created_at?: true
    updated_at?: true
    color?: true
    fecha_fin?: true
    fecha_inicio?: true
    _all?: true
  }

  export type CitasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which citas to aggregate.
     */
    where?: citasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of citas to fetch.
     */
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: citasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned citas
    **/
    _count?: true | CitasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitasMaxAggregateInputType
  }

  export type GetCitasAggregateType<T extends CitasAggregateArgs> = {
        [P in keyof T & keyof AggregateCitas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCitas[P]>
      : GetScalarType<T[P], AggregateCitas[P]>
  }




  export type citasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: citasWhereInput
    orderBy?: citasOrderByWithAggregationInput | citasOrderByWithAggregationInput[]
    by: CitasScalarFieldEnum[] | CitasScalarFieldEnum
    having?: citasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitasCountAggregateInputType | true
    _min?: CitasMinAggregateInputType
    _max?: CitasMaxAggregateInputType
  }

  export type CitasGroupByOutputType = {
    id: string
    descripcion: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    created_at: Date
    updated_at: Date
    color: string | null
    fecha_fin: Date
    fecha_inicio: Date
    _count: CitasCountAggregateOutputType | null
    _min: CitasMinAggregateOutputType | null
    _max: CitasMaxAggregateOutputType | null
  }

  type GetCitasGroupByPayload<T extends citasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitasGroupByOutputType[P]>
            : GetScalarType<T[P], CitasGroupByOutputType[P]>
        }
      >
    >


  export type citasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    estado?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    color?: boolean
    fecha_fin?: boolean
    fecha_inicio?: boolean
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citas"]>

  export type citasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    estado?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    color?: boolean
    fecha_fin?: boolean
    fecha_inicio?: boolean
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citas"]>

  export type citasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    estado?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    color?: boolean
    fecha_fin?: boolean
    fecha_inicio?: boolean
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citas"]>

  export type citasSelectScalar = {
    id?: boolean
    descripcion?: boolean
    estado?: boolean
    paciente_id?: boolean
    usuario_id?: boolean
    consultorio_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    color?: boolean
    fecha_fin?: boolean
    fecha_inicio?: boolean
  }

  export type citasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descripcion" | "estado" | "paciente_id" | "usuario_id" | "consultorio_id" | "created_at" | "updated_at" | "color" | "fecha_fin" | "fecha_inicio", ExtArgs["result"]["citas"]>
  export type citasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type citasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type citasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | ConsultorioDefaultArgs<ExtArgs>
    pacientes?: boolean | PacienteDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $citasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "citas"
    objects: {
      consultorios: Prisma.$ConsultorioPayload<ExtArgs>
      pacientes: Prisma.$PacientePayload<ExtArgs>
      usuarios: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descripcion: string | null
      estado: $Enums.EstadoCita
      paciente_id: string
      usuario_id: string
      consultorio_id: string
      created_at: Date
      updated_at: Date
      color: string | null
      fecha_fin: Date
      fecha_inicio: Date
    }, ExtArgs["result"]["citas"]>
    composites: {}
  }

  type citasGetPayload<S extends boolean | null | undefined | citasDefaultArgs> = $Result.GetResult<Prisma.$citasPayload, S>

  type citasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<citasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CitasCountAggregateInputType | true
    }

  export interface citasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['citas'], meta: { name: 'citas' } }
    /**
     * Find zero or one Citas that matches the filter.
     * @param {citasFindUniqueArgs} args - Arguments to find a Citas
     * @example
     * // Get one Citas
     * const citas = await prisma.citas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends citasFindUniqueArgs>(args: SelectSubset<T, citasFindUniqueArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Citas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {citasFindUniqueOrThrowArgs} args - Arguments to find a Citas
     * @example
     * // Get one Citas
     * const citas = await prisma.citas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends citasFindUniqueOrThrowArgs>(args: SelectSubset<T, citasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Citas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasFindFirstArgs} args - Arguments to find a Citas
     * @example
     * // Get one Citas
     * const citas = await prisma.citas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends citasFindFirstArgs>(args?: SelectSubset<T, citasFindFirstArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Citas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasFindFirstOrThrowArgs} args - Arguments to find a Citas
     * @example
     * // Get one Citas
     * const citas = await prisma.citas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends citasFindFirstOrThrowArgs>(args?: SelectSubset<T, citasFindFirstOrThrowArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Citas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Citas
     * const citas = await prisma.citas.findMany()
     * 
     * // Get first 10 Citas
     * const citas = await prisma.citas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const citasWithIdOnly = await prisma.citas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends citasFindManyArgs>(args?: SelectSubset<T, citasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Citas.
     * @param {citasCreateArgs} args - Arguments to create a Citas.
     * @example
     * // Create one Citas
     * const Citas = await prisma.citas.create({
     *   data: {
     *     // ... data to create a Citas
     *   }
     * })
     * 
     */
    create<T extends citasCreateArgs>(args: SelectSubset<T, citasCreateArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Citas.
     * @param {citasCreateManyArgs} args - Arguments to create many Citas.
     * @example
     * // Create many Citas
     * const citas = await prisma.citas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends citasCreateManyArgs>(args?: SelectSubset<T, citasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Citas and returns the data saved in the database.
     * @param {citasCreateManyAndReturnArgs} args - Arguments to create many Citas.
     * @example
     * // Create many Citas
     * const citas = await prisma.citas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Citas and only return the `id`
     * const citasWithIdOnly = await prisma.citas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends citasCreateManyAndReturnArgs>(args?: SelectSubset<T, citasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Citas.
     * @param {citasDeleteArgs} args - Arguments to delete one Citas.
     * @example
     * // Delete one Citas
     * const Citas = await prisma.citas.delete({
     *   where: {
     *     // ... filter to delete one Citas
     *   }
     * })
     * 
     */
    delete<T extends citasDeleteArgs>(args: SelectSubset<T, citasDeleteArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Citas.
     * @param {citasUpdateArgs} args - Arguments to update one Citas.
     * @example
     * // Update one Citas
     * const citas = await prisma.citas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends citasUpdateArgs>(args: SelectSubset<T, citasUpdateArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Citas.
     * @param {citasDeleteManyArgs} args - Arguments to filter Citas to delete.
     * @example
     * // Delete a few Citas
     * const { count } = await prisma.citas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends citasDeleteManyArgs>(args?: SelectSubset<T, citasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Citas
     * const citas = await prisma.citas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends citasUpdateManyArgs>(args: SelectSubset<T, citasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citas and returns the data updated in the database.
     * @param {citasUpdateManyAndReturnArgs} args - Arguments to update many Citas.
     * @example
     * // Update many Citas
     * const citas = await prisma.citas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Citas and only return the `id`
     * const citasWithIdOnly = await prisma.citas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends citasUpdateManyAndReturnArgs>(args: SelectSubset<T, citasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Citas.
     * @param {citasUpsertArgs} args - Arguments to update or create a Citas.
     * @example
     * // Update or create a Citas
     * const citas = await prisma.citas.upsert({
     *   create: {
     *     // ... data to create a Citas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Citas we want to update
     *   }
     * })
     */
    upsert<T extends citasUpsertArgs>(args: SelectSubset<T, citasUpsertArgs<ExtArgs>>): Prisma__citasClient<$Result.GetResult<Prisma.$citasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasCountArgs} args - Arguments to filter Citas to count.
     * @example
     * // Count the number of Citas
     * const count = await prisma.citas.count({
     *   where: {
     *     // ... the filter for the Citas we want to count
     *   }
     * })
    **/
    count<T extends citasCountArgs>(
      args?: Subset<T, citasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitasAggregateArgs>(args: Subset<T, CitasAggregateArgs>): Prisma.PrismaPromise<GetCitasAggregateType<T>>

    /**
     * Group by Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends citasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: citasGroupByArgs['orderBy'] }
        : { orderBy?: citasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, citasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the citas model
   */
  readonly fields: citasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for citas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__citasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorios<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pacientes<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuarios<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the citas model
   */
  interface citasFieldRefs {
    readonly id: FieldRef<"citas", 'String'>
    readonly descripcion: FieldRef<"citas", 'String'>
    readonly estado: FieldRef<"citas", 'EstadoCita'>
    readonly paciente_id: FieldRef<"citas", 'String'>
    readonly usuario_id: FieldRef<"citas", 'String'>
    readonly consultorio_id: FieldRef<"citas", 'String'>
    readonly created_at: FieldRef<"citas", 'DateTime'>
    readonly updated_at: FieldRef<"citas", 'DateTime'>
    readonly color: FieldRef<"citas", 'String'>
    readonly fecha_fin: FieldRef<"citas", 'DateTime'>
    readonly fecha_inicio: FieldRef<"citas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * citas findUnique
   */
  export type citasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter, which citas to fetch.
     */
    where: citasWhereUniqueInput
  }

  /**
   * citas findUniqueOrThrow
   */
  export type citasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter, which citas to fetch.
     */
    where: citasWhereUniqueInput
  }

  /**
   * citas findFirst
   */
  export type citasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter, which citas to fetch.
     */
    where?: citasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of citas to fetch.
     */
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for citas.
     */
    cursor?: citasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of citas.
     */
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * citas findFirstOrThrow
   */
  export type citasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter, which citas to fetch.
     */
    where?: citasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of citas to fetch.
     */
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for citas.
     */
    cursor?: citasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of citas.
     */
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * citas findMany
   */
  export type citasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter, which citas to fetch.
     */
    where?: citasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of citas to fetch.
     */
    orderBy?: citasOrderByWithRelationInput | citasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing citas.
     */
    cursor?: citasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` citas.
     */
    skip?: number
    distinct?: CitasScalarFieldEnum | CitasScalarFieldEnum[]
  }

  /**
   * citas create
   */
  export type citasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * The data needed to create a citas.
     */
    data: XOR<citasCreateInput, citasUncheckedCreateInput>
  }

  /**
   * citas createMany
   */
  export type citasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many citas.
     */
    data: citasCreateManyInput | citasCreateManyInput[]
  }

  /**
   * citas createManyAndReturn
   */
  export type citasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * The data used to create many citas.
     */
    data: citasCreateManyInput | citasCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * citas update
   */
  export type citasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * The data needed to update a citas.
     */
    data: XOR<citasUpdateInput, citasUncheckedUpdateInput>
    /**
     * Choose, which citas to update.
     */
    where: citasWhereUniqueInput
  }

  /**
   * citas updateMany
   */
  export type citasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update citas.
     */
    data: XOR<citasUpdateManyMutationInput, citasUncheckedUpdateManyInput>
    /**
     * Filter which citas to update
     */
    where?: citasWhereInput
    /**
     * Limit how many citas to update.
     */
    limit?: number
  }

  /**
   * citas updateManyAndReturn
   */
  export type citasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * The data used to update citas.
     */
    data: XOR<citasUpdateManyMutationInput, citasUncheckedUpdateManyInput>
    /**
     * Filter which citas to update
     */
    where?: citasWhereInput
    /**
     * Limit how many citas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * citas upsert
   */
  export type citasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * The filter to search for the citas to update in case it exists.
     */
    where: citasWhereUniqueInput
    /**
     * In case the citas found by the `where` argument doesn't exist, create a new citas with this data.
     */
    create: XOR<citasCreateInput, citasUncheckedCreateInput>
    /**
     * In case the citas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<citasUpdateInput, citasUncheckedUpdateInput>
  }

  /**
   * citas delete
   */
  export type citasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
    /**
     * Filter which citas to delete.
     */
    where: citasWhereUniqueInput
  }

  /**
   * citas deleteMany
   */
  export type citasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which citas to delete
     */
    where?: citasWhereInput
    /**
     * Limit how many citas to delete.
     */
    limit?: number
  }

  /**
   * citas without action
   */
  export type citasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the citas
     */
    select?: citasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the citas
     */
    omit?: citasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: citasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PacienteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    fecha_nacimiento: 'fecha_nacimiento',
    genero: 'genero',
    direccion: 'direccion',
    telefono: 'telefono',
    email: 'email',
    documento_identidad: 'documento_identidad',
    created_at: 'created_at',
    updated_at: 'updated_at',
    apellido: 'apellido'
  };

  export type PacienteScalarFieldEnum = (typeof PacienteScalarFieldEnum)[keyof typeof PacienteScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    email: 'email',
    telefono: 'telefono',
    created_at: 'created_at',
    updated_at: 'updated_at',
    rol: 'rol',
    consultorio_id: 'consultorio_id'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ConsultorioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ConsultorioScalarFieldEnum = (typeof ConsultorioScalarFieldEnum)[keyof typeof ConsultorioScalarFieldEnum]


  export const PrecioConsultorioScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    concepto: 'concepto',
    consultorio_id: 'consultorio_id',
    precio: 'precio'
  };

  export type PrecioConsultorioScalarFieldEnum = (typeof PrecioConsultorioScalarFieldEnum)[keyof typeof PrecioConsultorioScalarFieldEnum]


  export const CobroScalarFieldEnum: {
    id: 'id',
    fecha_cobro: 'fecha_cobro',
    monto_total: 'monto_total',
    notas: 'notas',
    created_at: 'created_at',
    updated_at: 'updated_at',
    paciente_id: 'paciente_id',
    usuario_id: 'usuario_id',
    estado: 'estado',
    metodo_pago: 'metodo_pago'
  };

  export type CobroScalarFieldEnum = (typeof CobroScalarFieldEnum)[keyof typeof CobroScalarFieldEnum]


  export const CobroConceptoScalarFieldEnum: {
    id: 'id',
    cantidad: 'cantidad',
    subtotal: 'subtotal',
    created_at: 'created_at',
    updated_at: 'updated_at',
    cobro_id: 'cobro_id',
    consultorio_id: 'consultorio_id',
    precio_unitario: 'precio_unitario',
    servicio_id: 'servicio_id'
  };

  export type CobroConceptoScalarFieldEnum = (typeof CobroConceptoScalarFieldEnum)[keyof typeof CobroConceptoScalarFieldEnum]


  export const HistorialCobroScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    cobro_id: 'cobro_id',
    detalles_antes: 'detalles_antes',
    detalles_despues: 'detalles_despues',
    tipo_cambio: 'tipo_cambio',
    usuario_id: 'usuario_id'
  };

  export type HistorialCobroScalarFieldEnum = (typeof HistorialCobroScalarFieldEnum)[keyof typeof HistorialCobroScalarFieldEnum]


  export const ServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    precio_base: 'precio_base',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServicioScalarFieldEnum = (typeof ServicioScalarFieldEnum)[keyof typeof ServicioScalarFieldEnum]


  export const MetodoPagoCobroScalarFieldEnum: {
    id: 'id',
    cobro_id: 'cobro_id',
    metodo_pago: 'metodo_pago',
    monto: 'monto',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type MetodoPagoCobroScalarFieldEnum = (typeof MetodoPagoCobroScalarFieldEnum)[keyof typeof MetodoPagoCobroScalarFieldEnum]


  export const AllergenScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    alxoidType: 'alxoidType',
    isAlxoidExclusive: 'isAlxoidExclusive'
  };

  export type AllergenScalarFieldEnum = (typeof AllergenScalarFieldEnum)[keyof typeof AllergenScalarFieldEnum]


  export const InventoryUsageScalarFieldEnum: {
    id: 'id',
    nombrePaciente: 'nombrePaciente',
    pacienteId: 'pacienteId',
    tipoTratamiento: 'tipoTratamiento',
    observaciones: 'observaciones',
    tuvoReaccion: 'tuvoReaccion',
    descripcionReaccion: 'descripcionReaccion',
    createdAt: 'createdAt',
    sedeId: 'sedeId',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type InventoryUsageScalarFieldEnum = (typeof InventoryUsageScalarFieldEnum)[keyof typeof InventoryUsageScalarFieldEnum]


  export const InventoryUsageDetailScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    doses: 'doses',
    frascoLevel: 'frascoLevel',
    inventoryUsageId: 'inventoryUsageId',
    movementId: 'movementId',
    productId: 'productId',
    quantity: 'quantity',
    totalCost: 'totalCost',
    unitCost: 'unitCost',
    units: 'units',
    updatedAt: 'updatedAt'
  };

  export type InventoryUsageDetailScalarFieldEnum = (typeof InventoryUsageDetailScalarFieldEnum)[keyof typeof InventoryUsageDetailScalarFieldEnum]


  export const MovementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sedeId: 'sedeId',
    productId: 'productId',
    type: 'type',
    quantity: 'quantity',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    batchNumber: 'batchNumber',
    expiryDate: 'expiryDate',
    createdAt: 'createdAt'
  };

  export type MovementScalarFieldEnum = (typeof MovementScalarFieldEnum)[keyof typeof MovementScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    unit: 'unit',
    description: 'description',
    costPerUnit: 'costPerUnit',
    minStockLevel: 'minStockLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    category: 'category'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductAllergenScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    allergenId: 'allergenId',
    mlPerDose: 'mlPerDose',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductAllergenScalarFieldEnum = (typeof ProductAllergenScalarFieldEnum)[keyof typeof ProductAllergenScalarFieldEnum]


  export const ProductExpirationScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    sedeId: 'sedeId',
    batchNumber: 'batchNumber',
    expiryDate: 'expiryDate',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductExpirationScalarFieldEnum = (typeof ProductExpirationScalarFieldEnum)[keyof typeof ProductExpirationScalarFieldEnum]


  export const SedeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SedeScalarFieldEnum = (typeof SedeScalarFieldEnum)[keyof typeof SedeScalarFieldEnum]


  export const StockBySedeScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    sedeId: 'sedeId',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StockBySedeScalarFieldEnum = (typeof StockBySedeScalarFieldEnum)[keyof typeof StockBySedeScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    invoiceNumber: 'invoiceNumber',
    amountSupplied: 'amountSupplied',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role',
    sedeId: 'sedeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CitasScalarFieldEnum: {
    id: 'id',
    descripcion: 'descripcion',
    estado: 'estado',
    paciente_id: 'paciente_id',
    usuario_id: 'usuario_id',
    consultorio_id: 'consultorio_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    color: 'color',
    fecha_fin: 'fecha_fin',
    fecha_inicio: 'fecha_inicio'
  };

  export type CitasScalarFieldEnum = (typeof CitasScalarFieldEnum)[keyof typeof CitasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Rol'
   */
  export type EnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'EstadoCobro'
   */
  export type EnumEstadoCobroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCobro'>
    


  /**
   * Reference to a field of type 'MetodoPago'
   */
  export type EnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'TipoCambio'
   */
  export type EnumTipoCambioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCambio'>
    


  /**
   * Reference to a field of type 'AlxoidType'
   */
  export type EnumAlxoidTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlxoidType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TipoTratamiento'
   */
  export type EnumTipoTratamientoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoTratamiento'>
    


  /**
   * Reference to a field of type 'MovementType'
   */
  export type EnumMovementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MovementType'>
    


  /**
   * Reference to a field of type 'ProductType'
   */
  export type EnumProductTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductType'>
    


  /**
   * Reference to a field of type 'ProductUnit'
   */
  export type EnumProductUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductUnit'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'EstadoCita'
   */
  export type EnumEstadoCitaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCita'>
    
  /**
   * Deep Input Types
   */


  export type PacienteWhereInput = {
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    id?: StringFilter<"Paciente"> | string
    nombre?: StringFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringFilter<"Paciente"> | string
    email?: StringFilter<"Paciente"> | string
    documento_identidad?: StringNullableFilter<"Paciente"> | string | null
    created_at?: DateTimeFilter<"Paciente"> | Date | string
    updated_at?: DateTimeFilter<"Paciente"> | Date | string
    apellido?: StringFilter<"Paciente"> | string
    citas?: CitasListRelationFilter
    cobros?: CobroListRelationFilter
    InventoryUsage?: InventoryUsageListRelationFilter
  }

  export type PacienteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
    citas?: citasOrderByRelationAggregateInput
    cobros?: CobroOrderByRelationAggregateInput
    InventoryUsage?: InventoryUsageOrderByRelationAggregateInput
  }

  export type PacienteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    nombre?: StringFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringFilter<"Paciente"> | string
    email?: StringFilter<"Paciente"> | string
    documento_identidad?: StringNullableFilter<"Paciente"> | string | null
    created_at?: DateTimeFilter<"Paciente"> | Date | string
    updated_at?: DateTimeFilter<"Paciente"> | Date | string
    apellido?: StringFilter<"Paciente"> | string
    citas?: CitasListRelationFilter
    cobros?: CobroListRelationFilter
    InventoryUsage?: InventoryUsageListRelationFilter
  }, "id">

  export type PacienteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
    _count?: PacienteCountOrderByAggregateInput
    _max?: PacienteMaxOrderByAggregateInput
    _min?: PacienteMinOrderByAggregateInput
  }

  export type PacienteScalarWhereWithAggregatesInput = {
    AND?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    OR?: PacienteScalarWhereWithAggregatesInput[]
    NOT?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Paciente"> | string
    nombre?: StringWithAggregatesFilter<"Paciente"> | string
    fecha_nacimiento?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    genero?: StringWithAggregatesFilter<"Paciente"> | string
    direccion?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    telefono?: StringWithAggregatesFilter<"Paciente"> | string
    email?: StringWithAggregatesFilter<"Paciente"> | string
    documento_identidad?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    apellido?: StringWithAggregatesFilter<"Paciente"> | string
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    apellido?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    telefono?: StringFilter<"Usuario"> | string
    created_at?: DateTimeFilter<"Usuario"> | Date | string
    updated_at?: DateTimeFilter<"Usuario"> | Date | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    consultorio_id?: StringFilter<"Usuario"> | string
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    citas?: CitasListRelationFilter
    cobros?: CobroListRelationFilter
    historial?: HistorialCobroListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    consultorio_id?: SortOrder
    consultorio?: ConsultorioOrderByWithRelationInput
    citas?: citasOrderByRelationAggregateInput
    cobros?: CobroOrderByRelationAggregateInput
    historial?: HistorialCobroOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    apellido?: StringFilter<"Usuario"> | string
    telefono?: StringFilter<"Usuario"> | string
    created_at?: DateTimeFilter<"Usuario"> | Date | string
    updated_at?: DateTimeFilter<"Usuario"> | Date | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    consultorio_id?: StringFilter<"Usuario"> | string
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    citas?: CitasListRelationFilter
    cobros?: CobroListRelationFilter
    historial?: HistorialCobroListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    consultorio_id?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    apellido?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    telefono?: StringWithAggregatesFilter<"Usuario"> | string
    created_at?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    rol?: EnumRolWithAggregatesFilter<"Usuario"> | $Enums.Rol
    consultorio_id?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type ConsultorioWhereInput = {
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    id?: StringFilter<"Consultorio"> | string
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringFilter<"Consultorio"> | string
    created_at?: DateTimeFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeFilter<"Consultorio"> | Date | string
    citas?: CitasListRelationFilter
    conceptos?: CobroConceptoListRelationFilter
    precios?: PrecioConsultorioListRelationFilter
    usuarios?: UsuarioListRelationFilter
  }

  export type ConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    citas?: citasOrderByRelationAggregateInput
    conceptos?: CobroConceptoOrderByRelationAggregateInput
    precios?: PrecioConsultorioOrderByRelationAggregateInput
    usuarios?: UsuarioOrderByRelationAggregateInput
  }

  export type ConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringFilter<"Consultorio"> | string
    created_at?: DateTimeFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeFilter<"Consultorio"> | Date | string
    citas?: CitasListRelationFilter
    conceptos?: CobroConceptoListRelationFilter
    precios?: PrecioConsultorioListRelationFilter
    usuarios?: UsuarioListRelationFilter
  }, "id">

  export type ConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ConsultorioCountOrderByAggregateInput
    _max?: ConsultorioMaxOrderByAggregateInput
    _min?: ConsultorioMinOrderByAggregateInput
  }

  export type ConsultorioScalarWhereWithAggregatesInput = {
    AND?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    OR?: ConsultorioScalarWhereWithAggregatesInput[]
    NOT?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Consultorio"> | string
    nombre?: StringWithAggregatesFilter<"Consultorio"> | string
    direccion?: StringWithAggregatesFilter<"Consultorio"> | string
    created_at?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
  }

  export type PrecioConsultorioWhereInput = {
    AND?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    OR?: PrecioConsultorioWhereInput[]
    NOT?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    id?: StringFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }

  export type PrecioConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
    consultorio?: ConsultorioOrderByWithRelationInput
  }

  export type PrecioConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    OR?: PrecioConsultorioWhereInput[]
    NOT?: PrecioConsultorioWhereInput | PrecioConsultorioWhereInput[]
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
  }, "id">

  export type PrecioConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
    _count?: PrecioConsultorioCountOrderByAggregateInput
    _avg?: PrecioConsultorioAvgOrderByAggregateInput
    _max?: PrecioConsultorioMaxOrderByAggregateInput
    _min?: PrecioConsultorioMinOrderByAggregateInput
    _sum?: PrecioConsultorioSumOrderByAggregateInput
  }

  export type PrecioConsultorioScalarWhereWithAggregatesInput = {
    AND?: PrecioConsultorioScalarWhereWithAggregatesInput | PrecioConsultorioScalarWhereWithAggregatesInput[]
    OR?: PrecioConsultorioScalarWhereWithAggregatesInput[]
    NOT?: PrecioConsultorioScalarWhereWithAggregatesInput | PrecioConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeWithAggregatesFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringWithAggregatesFilter<"PrecioConsultorio"> | string
    precio?: FloatWithAggregatesFilter<"PrecioConsultorio"> | number
  }

  export type CobroWhereInput = {
    AND?: CobroWhereInput | CobroWhereInput[]
    OR?: CobroWhereInput[]
    NOT?: CobroWhereInput | CobroWhereInput[]
    id?: StringFilter<"Cobro"> | string
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
    conceptos?: CobroConceptoListRelationFilter
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    historial?: HistorialCobroListRelationFilter
    metodos_pago?: MetodoPagoCobroListRelationFilter
  }

  export type CobroOrderByWithRelationInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrderInput | SortOrder
    conceptos?: CobroConceptoOrderByRelationAggregateInput
    paciente?: PacienteOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
    historial?: HistorialCobroOrderByRelationAggregateInput
    metodos_pago?: MetodoPagoCobroOrderByRelationAggregateInput
  }

  export type CobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CobroWhereInput | CobroWhereInput[]
    OR?: CobroWhereInput[]
    NOT?: CobroWhereInput | CobroWhereInput[]
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
    conceptos?: CobroConceptoListRelationFilter
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    historial?: HistorialCobroListRelationFilter
    metodos_pago?: MetodoPagoCobroListRelationFilter
  }, "id">

  export type CobroOrderByWithAggregationInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrderInput | SortOrder
    _count?: CobroCountOrderByAggregateInput
    _avg?: CobroAvgOrderByAggregateInput
    _max?: CobroMaxOrderByAggregateInput
    _min?: CobroMinOrderByAggregateInput
    _sum?: CobroSumOrderByAggregateInput
  }

  export type CobroScalarWhereWithAggregatesInput = {
    AND?: CobroScalarWhereWithAggregatesInput | CobroScalarWhereWithAggregatesInput[]
    OR?: CobroScalarWhereWithAggregatesInput[]
    NOT?: CobroScalarWhereWithAggregatesInput | CobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cobro"> | string
    fecha_cobro?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    monto_total?: FloatWithAggregatesFilter<"Cobro"> | number
    notas?: StringNullableWithAggregatesFilter<"Cobro"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Cobro"> | Date | string
    paciente_id?: StringWithAggregatesFilter<"Cobro"> | string
    usuario_id?: StringWithAggregatesFilter<"Cobro"> | string
    estado?: EnumEstadoCobroWithAggregatesFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableWithAggregatesFilter<"Cobro"> | $Enums.MetodoPago | null
  }

  export type CobroConceptoWhereInput = {
    AND?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    OR?: CobroConceptoWhereInput[]
    NOT?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    id?: StringFilter<"CobroConcepto"> | string
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    servicio?: XOR<ServicioScalarRelationFilter, ServicioWhereInput>
  }

  export type CobroConceptoOrderByWithRelationInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
    cobro?: CobroOrderByWithRelationInput
    consultorio?: ConsultorioOrderByWithRelationInput
    servicio?: ServicioOrderByWithRelationInput
  }

  export type CobroConceptoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    OR?: CobroConceptoWhereInput[]
    NOT?: CobroConceptoWhereInput | CobroConceptoWhereInput[]
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    servicio?: XOR<ServicioScalarRelationFilter, ServicioWhereInput>
  }, "id">

  export type CobroConceptoOrderByWithAggregationInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
    _count?: CobroConceptoCountOrderByAggregateInput
    _avg?: CobroConceptoAvgOrderByAggregateInput
    _max?: CobroConceptoMaxOrderByAggregateInput
    _min?: CobroConceptoMinOrderByAggregateInput
    _sum?: CobroConceptoSumOrderByAggregateInput
  }

  export type CobroConceptoScalarWhereWithAggregatesInput = {
    AND?: CobroConceptoScalarWhereWithAggregatesInput | CobroConceptoScalarWhereWithAggregatesInput[]
    OR?: CobroConceptoScalarWhereWithAggregatesInput[]
    NOT?: CobroConceptoScalarWhereWithAggregatesInput | CobroConceptoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    cantidad?: IntWithAggregatesFilter<"CobroConcepto"> | number
    subtotal?: FloatWithAggregatesFilter<"CobroConcepto"> | number
    created_at?: DateTimeWithAggregatesFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    consultorio_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
    precio_unitario?: FloatWithAggregatesFilter<"CobroConcepto"> | number
    servicio_id?: StringWithAggregatesFilter<"CobroConcepto"> | string
  }

  export type HistorialCobroWhereInput = {
    AND?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    OR?: HistorialCobroWhereInput[]
    NOT?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    id?: StringFilter<"HistorialCobro"> | string
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: StringNullableFilter<"HistorialCobro"> | string | null
    detalles_despues?: StringFilter<"HistorialCobro"> | string
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type HistorialCobroOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrderInput | SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
    cobro?: CobroOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type HistorialCobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    OR?: HistorialCobroWhereInput[]
    NOT?: HistorialCobroWhereInput | HistorialCobroWhereInput[]
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: StringNullableFilter<"HistorialCobro"> | string | null
    detalles_despues?: StringFilter<"HistorialCobro"> | string
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type HistorialCobroOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrderInput | SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
    _count?: HistorialCobroCountOrderByAggregateInput
    _max?: HistorialCobroMaxOrderByAggregateInput
    _min?: HistorialCobroMinOrderByAggregateInput
  }

  export type HistorialCobroScalarWhereWithAggregatesInput = {
    AND?: HistorialCobroScalarWhereWithAggregatesInput | HistorialCobroScalarWhereWithAggregatesInput[]
    OR?: HistorialCobroScalarWhereWithAggregatesInput[]
    NOT?: HistorialCobroScalarWhereWithAggregatesInput | HistorialCobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HistorialCobro"> | string
    created_at?: DateTimeWithAggregatesFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringWithAggregatesFilter<"HistorialCobro"> | string
    detalles_antes?: StringNullableWithAggregatesFilter<"HistorialCobro"> | string | null
    detalles_despues?: StringWithAggregatesFilter<"HistorialCobro"> | string
    tipo_cambio?: EnumTipoCambioWithAggregatesFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringWithAggregatesFilter<"HistorialCobro"> | string
  }

  export type ServicioWhereInput = {
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    id?: StringFilter<"Servicio"> | string
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio_base?: FloatFilter<"Servicio"> | number
    created_at?: DateTimeFilter<"Servicio"> | Date | string
    updated_at?: DateTimeFilter<"Servicio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
  }

  export type ServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    conceptos?: CobroConceptoOrderByRelationAggregateInput
  }

  export type ServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio_base?: FloatFilter<"Servicio"> | number
    created_at?: DateTimeFilter<"Servicio"> | Date | string
    updated_at?: DateTimeFilter<"Servicio"> | Date | string
    conceptos?: CobroConceptoListRelationFilter
  }, "id">

  export type ServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ServicioCountOrderByAggregateInput
    _avg?: ServicioAvgOrderByAggregateInput
    _max?: ServicioMaxOrderByAggregateInput
    _min?: ServicioMinOrderByAggregateInput
    _sum?: ServicioSumOrderByAggregateInput
  }

  export type ServicioScalarWhereWithAggregatesInput = {
    AND?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    OR?: ServicioScalarWhereWithAggregatesInput[]
    NOT?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Servicio"> | string
    nombre?: StringWithAggregatesFilter<"Servicio"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Servicio"> | string | null
    precio_base?: FloatWithAggregatesFilter<"Servicio"> | number
    created_at?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
  }

  export type MetodoPagoCobroWhereInput = {
    AND?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    OR?: MetodoPagoCobroWhereInput[]
    NOT?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    id?: StringFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
  }

  export type MetodoPagoCobroOrderByWithRelationInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro?: CobroOrderByWithRelationInput
  }

  export type MetodoPagoCobroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    OR?: MetodoPagoCobroWhereInput[]
    NOT?: MetodoPagoCobroWhereInput | MetodoPagoCobroWhereInput[]
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    cobro?: XOR<CobroScalarRelationFilter, CobroWhereInput>
  }, "id">

  export type MetodoPagoCobroOrderByWithAggregationInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: MetodoPagoCobroCountOrderByAggregateInput
    _avg?: MetodoPagoCobroAvgOrderByAggregateInput
    _max?: MetodoPagoCobroMaxOrderByAggregateInput
    _min?: MetodoPagoCobroMinOrderByAggregateInput
    _sum?: MetodoPagoCobroSumOrderByAggregateInput
  }

  export type MetodoPagoCobroScalarWhereWithAggregatesInput = {
    AND?: MetodoPagoCobroScalarWhereWithAggregatesInput | MetodoPagoCobroScalarWhereWithAggregatesInput[]
    OR?: MetodoPagoCobroScalarWhereWithAggregatesInput[]
    NOT?: MetodoPagoCobroScalarWhereWithAggregatesInput | MetodoPagoCobroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringWithAggregatesFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoWithAggregatesFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatWithAggregatesFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeWithAggregatesFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"MetodoPagoCobro"> | Date | string
  }

  export type AllergenWhereInput = {
    AND?: AllergenWhereInput | AllergenWhereInput[]
    OR?: AllergenWhereInput[]
    NOT?: AllergenWhereInput | AllergenWhereInput[]
    id?: StringFilter<"Allergen"> | string
    name?: StringFilter<"Allergen"> | string
    createdAt?: DateTimeFilter<"Allergen"> | Date | string
    updatedAt?: DateTimeFilter<"Allergen"> | Date | string
    alxoidType?: EnumAlxoidTypeNullableFilter<"Allergen"> | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFilter<"Allergen"> | boolean
    ProductAllergen?: ProductAllergenListRelationFilter
  }

  export type AllergenOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    alxoidType?: SortOrderInput | SortOrder
    isAlxoidExclusive?: SortOrder
    ProductAllergen?: ProductAllergenOrderByRelationAggregateInput
  }

  export type AllergenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AllergenWhereInput | AllergenWhereInput[]
    OR?: AllergenWhereInput[]
    NOT?: AllergenWhereInput | AllergenWhereInput[]
    name?: StringFilter<"Allergen"> | string
    createdAt?: DateTimeFilter<"Allergen"> | Date | string
    updatedAt?: DateTimeFilter<"Allergen"> | Date | string
    alxoidType?: EnumAlxoidTypeNullableFilter<"Allergen"> | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFilter<"Allergen"> | boolean
    ProductAllergen?: ProductAllergenListRelationFilter
  }, "id">

  export type AllergenOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    alxoidType?: SortOrderInput | SortOrder
    isAlxoidExclusive?: SortOrder
    _count?: AllergenCountOrderByAggregateInput
    _max?: AllergenMaxOrderByAggregateInput
    _min?: AllergenMinOrderByAggregateInput
  }

  export type AllergenScalarWhereWithAggregatesInput = {
    AND?: AllergenScalarWhereWithAggregatesInput | AllergenScalarWhereWithAggregatesInput[]
    OR?: AllergenScalarWhereWithAggregatesInput[]
    NOT?: AllergenScalarWhereWithAggregatesInput | AllergenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Allergen"> | string
    name?: StringWithAggregatesFilter<"Allergen"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Allergen"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Allergen"> | Date | string
    alxoidType?: EnumAlxoidTypeNullableWithAggregatesFilter<"Allergen"> | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolWithAggregatesFilter<"Allergen"> | boolean
  }

  export type InventoryUsageWhereInput = {
    AND?: InventoryUsageWhereInput | InventoryUsageWhereInput[]
    OR?: InventoryUsageWhereInput[]
    NOT?: InventoryUsageWhereInput | InventoryUsageWhereInput[]
    id?: StringFilter<"InventoryUsage"> | string
    nombrePaciente?: StringFilter<"InventoryUsage"> | string
    pacienteId?: StringNullableFilter<"InventoryUsage"> | string | null
    tipoTratamiento?: EnumTipoTratamientoFilter<"InventoryUsage"> | $Enums.TipoTratamiento
    observaciones?: StringNullableFilter<"InventoryUsage"> | string | null
    tuvoReaccion?: BoolFilter<"InventoryUsage"> | boolean
    descripcionReaccion?: StringNullableFilter<"InventoryUsage"> | string | null
    createdAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    sedeId?: StringFilter<"InventoryUsage"> | string
    updatedAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    userId?: StringFilter<"InventoryUsage"> | string
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Paciente?: XOR<PacienteNullableScalarRelationFilter, PacienteWhereInput> | null
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
  }

  export type InventoryUsageOrderByWithRelationInput = {
    id?: SortOrder
    nombrePaciente?: SortOrder
    pacienteId?: SortOrderInput | SortOrder
    tipoTratamiento?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    tuvoReaccion?: SortOrder
    descripcionReaccion?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sedeId?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    Sede?: SedeOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    Paciente?: PacienteOrderByWithRelationInput
    InventoryUsageDetail?: InventoryUsageDetailOrderByRelationAggregateInput
  }

  export type InventoryUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InventoryUsageWhereInput | InventoryUsageWhereInput[]
    OR?: InventoryUsageWhereInput[]
    NOT?: InventoryUsageWhereInput | InventoryUsageWhereInput[]
    nombrePaciente?: StringFilter<"InventoryUsage"> | string
    pacienteId?: StringNullableFilter<"InventoryUsage"> | string | null
    tipoTratamiento?: EnumTipoTratamientoFilter<"InventoryUsage"> | $Enums.TipoTratamiento
    observaciones?: StringNullableFilter<"InventoryUsage"> | string | null
    tuvoReaccion?: BoolFilter<"InventoryUsage"> | boolean
    descripcionReaccion?: StringNullableFilter<"InventoryUsage"> | string | null
    createdAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    sedeId?: StringFilter<"InventoryUsage"> | string
    updatedAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    userId?: StringFilter<"InventoryUsage"> | string
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Paciente?: XOR<PacienteNullableScalarRelationFilter, PacienteWhereInput> | null
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
  }, "id">

  export type InventoryUsageOrderByWithAggregationInput = {
    id?: SortOrder
    nombrePaciente?: SortOrder
    pacienteId?: SortOrderInput | SortOrder
    tipoTratamiento?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    tuvoReaccion?: SortOrder
    descripcionReaccion?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sedeId?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: InventoryUsageCountOrderByAggregateInput
    _max?: InventoryUsageMaxOrderByAggregateInput
    _min?: InventoryUsageMinOrderByAggregateInput
  }

  export type InventoryUsageScalarWhereWithAggregatesInput = {
    AND?: InventoryUsageScalarWhereWithAggregatesInput | InventoryUsageScalarWhereWithAggregatesInput[]
    OR?: InventoryUsageScalarWhereWithAggregatesInput[]
    NOT?: InventoryUsageScalarWhereWithAggregatesInput | InventoryUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryUsage"> | string
    nombrePaciente?: StringWithAggregatesFilter<"InventoryUsage"> | string
    pacienteId?: StringNullableWithAggregatesFilter<"InventoryUsage"> | string | null
    tipoTratamiento?: EnumTipoTratamientoWithAggregatesFilter<"InventoryUsage"> | $Enums.TipoTratamiento
    observaciones?: StringNullableWithAggregatesFilter<"InventoryUsage"> | string | null
    tuvoReaccion?: BoolWithAggregatesFilter<"InventoryUsage"> | boolean
    descripcionReaccion?: StringNullableWithAggregatesFilter<"InventoryUsage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryUsage"> | Date | string
    sedeId?: StringWithAggregatesFilter<"InventoryUsage"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryUsage"> | Date | string
    userId?: StringWithAggregatesFilter<"InventoryUsage"> | string
  }

  export type InventoryUsageDetailWhereInput = {
    AND?: InventoryUsageDetailWhereInput | InventoryUsageDetailWhereInput[]
    OR?: InventoryUsageDetailWhereInput[]
    NOT?: InventoryUsageDetailWhereInput | InventoryUsageDetailWhereInput[]
    id?: StringFilter<"InventoryUsageDetail"> | string
    createdAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
    doses?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    frascoLevel?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    inventoryUsageId?: StringFilter<"InventoryUsageDetail"> | string
    movementId?: StringNullableFilter<"InventoryUsageDetail"> | string | null
    productId?: StringFilter<"InventoryUsageDetail"> | string
    quantity?: FloatFilter<"InventoryUsageDetail"> | number
    totalCost?: FloatFilter<"InventoryUsageDetail"> | number
    unitCost?: FloatFilter<"InventoryUsageDetail"> | number
    units?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    updatedAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
    InventoryUsage?: XOR<InventoryUsageScalarRelationFilter, InventoryUsageWhereInput>
    Movement?: XOR<MovementNullableScalarRelationFilter, MovementWhereInput> | null
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type InventoryUsageDetailOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    doses?: SortOrderInput | SortOrder
    frascoLevel?: SortOrderInput | SortOrder
    inventoryUsageId?: SortOrder
    movementId?: SortOrderInput | SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    InventoryUsage?: InventoryUsageOrderByWithRelationInput
    Movement?: MovementOrderByWithRelationInput
    Product?: ProductOrderByWithRelationInput
  }

  export type InventoryUsageDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InventoryUsageDetailWhereInput | InventoryUsageDetailWhereInput[]
    OR?: InventoryUsageDetailWhereInput[]
    NOT?: InventoryUsageDetailWhereInput | InventoryUsageDetailWhereInput[]
    createdAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
    doses?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    frascoLevel?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    inventoryUsageId?: StringFilter<"InventoryUsageDetail"> | string
    movementId?: StringNullableFilter<"InventoryUsageDetail"> | string | null
    productId?: StringFilter<"InventoryUsageDetail"> | string
    quantity?: FloatFilter<"InventoryUsageDetail"> | number
    totalCost?: FloatFilter<"InventoryUsageDetail"> | number
    unitCost?: FloatFilter<"InventoryUsageDetail"> | number
    units?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    updatedAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
    InventoryUsage?: XOR<InventoryUsageScalarRelationFilter, InventoryUsageWhereInput>
    Movement?: XOR<MovementNullableScalarRelationFilter, MovementWhereInput> | null
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type InventoryUsageDetailOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    doses?: SortOrderInput | SortOrder
    frascoLevel?: SortOrderInput | SortOrder
    inventoryUsageId?: SortOrder
    movementId?: SortOrderInput | SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: InventoryUsageDetailCountOrderByAggregateInput
    _avg?: InventoryUsageDetailAvgOrderByAggregateInput
    _max?: InventoryUsageDetailMaxOrderByAggregateInput
    _min?: InventoryUsageDetailMinOrderByAggregateInput
    _sum?: InventoryUsageDetailSumOrderByAggregateInput
  }

  export type InventoryUsageDetailScalarWhereWithAggregatesInput = {
    AND?: InventoryUsageDetailScalarWhereWithAggregatesInput | InventoryUsageDetailScalarWhereWithAggregatesInput[]
    OR?: InventoryUsageDetailScalarWhereWithAggregatesInput[]
    NOT?: InventoryUsageDetailScalarWhereWithAggregatesInput | InventoryUsageDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryUsageDetail"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InventoryUsageDetail"> | Date | string
    doses?: IntNullableWithAggregatesFilter<"InventoryUsageDetail"> | number | null
    frascoLevel?: IntNullableWithAggregatesFilter<"InventoryUsageDetail"> | number | null
    inventoryUsageId?: StringWithAggregatesFilter<"InventoryUsageDetail"> | string
    movementId?: StringNullableWithAggregatesFilter<"InventoryUsageDetail"> | string | null
    productId?: StringWithAggregatesFilter<"InventoryUsageDetail"> | string
    quantity?: FloatWithAggregatesFilter<"InventoryUsageDetail"> | number
    totalCost?: FloatWithAggregatesFilter<"InventoryUsageDetail"> | number
    unitCost?: FloatWithAggregatesFilter<"InventoryUsageDetail"> | number
    units?: IntNullableWithAggregatesFilter<"InventoryUsageDetail"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryUsageDetail"> | Date | string
  }

  export type MovementWhereInput = {
    AND?: MovementWhereInput | MovementWhereInput[]
    OR?: MovementWhereInput[]
    NOT?: MovementWhereInput | MovementWhereInput[]
    id?: StringFilter<"Movement"> | string
    userId?: StringFilter<"Movement"> | string
    sedeId?: StringFilter<"Movement"> | string
    productId?: StringFilter<"Movement"> | string
    type?: EnumMovementTypeFilter<"Movement"> | $Enums.MovementType
    quantity?: FloatFilter<"Movement"> | number
    unitCost?: FloatFilter<"Movement"> | number
    totalCost?: FloatFilter<"Movement"> | number
    batchNumber?: StringNullableFilter<"Movement"> | string | null
    expiryDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MovementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sedeId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    batchNumber?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    InventoryUsageDetail?: InventoryUsageDetailOrderByRelationAggregateInput
    Product?: ProductOrderByWithRelationInput
    Sede?: SedeOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type MovementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MovementWhereInput | MovementWhereInput[]
    OR?: MovementWhereInput[]
    NOT?: MovementWhereInput | MovementWhereInput[]
    userId?: StringFilter<"Movement"> | string
    sedeId?: StringFilter<"Movement"> | string
    productId?: StringFilter<"Movement"> | string
    type?: EnumMovementTypeFilter<"Movement"> | $Enums.MovementType
    quantity?: FloatFilter<"Movement"> | number
    unitCost?: FloatFilter<"Movement"> | number
    totalCost?: FloatFilter<"Movement"> | number
    batchNumber?: StringNullableFilter<"Movement"> | string | null
    expiryDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MovementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sedeId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    batchNumber?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MovementCountOrderByAggregateInput
    _avg?: MovementAvgOrderByAggregateInput
    _max?: MovementMaxOrderByAggregateInput
    _min?: MovementMinOrderByAggregateInput
    _sum?: MovementSumOrderByAggregateInput
  }

  export type MovementScalarWhereWithAggregatesInput = {
    AND?: MovementScalarWhereWithAggregatesInput | MovementScalarWhereWithAggregatesInput[]
    OR?: MovementScalarWhereWithAggregatesInput[]
    NOT?: MovementScalarWhereWithAggregatesInput | MovementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Movement"> | string
    userId?: StringWithAggregatesFilter<"Movement"> | string
    sedeId?: StringWithAggregatesFilter<"Movement"> | string
    productId?: StringWithAggregatesFilter<"Movement"> | string
    type?: EnumMovementTypeWithAggregatesFilter<"Movement"> | $Enums.MovementType
    quantity?: FloatWithAggregatesFilter<"Movement"> | number
    unitCost?: FloatWithAggregatesFilter<"Movement"> | number
    totalCost?: FloatWithAggregatesFilter<"Movement"> | number
    batchNumber?: StringNullableWithAggregatesFilter<"Movement"> | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Movement"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    type?: EnumProductTypeFilter<"Product"> | $Enums.ProductType
    unit?: EnumProductUnitFilter<"Product"> | $Enums.ProductUnit
    description?: StringNullableFilter<"Product"> | string | null
    costPerUnit?: FloatFilter<"Product"> | number
    minStockLevel?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    category?: StringNullableFilter<"Product"> | string | null
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
    Movement?: MovementListRelationFilter
    ProductAllergen?: ProductAllergenListRelationFilter
    ProductExpiration?: ProductExpirationListRelationFilter
    StockBySede?: StockBySedeListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    description?: SortOrderInput | SortOrder
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrderInput | SortOrder
    InventoryUsageDetail?: InventoryUsageDetailOrderByRelationAggregateInput
    Movement?: MovementOrderByRelationAggregateInput
    ProductAllergen?: ProductAllergenOrderByRelationAggregateInput
    ProductExpiration?: ProductExpirationOrderByRelationAggregateInput
    StockBySede?: StockBySedeOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    type?: EnumProductTypeFilter<"Product"> | $Enums.ProductType
    unit?: EnumProductUnitFilter<"Product"> | $Enums.ProductUnit
    description?: StringNullableFilter<"Product"> | string | null
    costPerUnit?: FloatFilter<"Product"> | number
    minStockLevel?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    category?: StringNullableFilter<"Product"> | string | null
    InventoryUsageDetail?: InventoryUsageDetailListRelationFilter
    Movement?: MovementListRelationFilter
    ProductAllergen?: ProductAllergenListRelationFilter
    ProductExpiration?: ProductExpirationListRelationFilter
    StockBySede?: StockBySedeListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    description?: SortOrderInput | SortOrder
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    type?: EnumProductTypeWithAggregatesFilter<"Product"> | $Enums.ProductType
    unit?: EnumProductUnitWithAggregatesFilter<"Product"> | $Enums.ProductUnit
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    costPerUnit?: FloatWithAggregatesFilter<"Product"> | number
    minStockLevel?: IntWithAggregatesFilter<"Product"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    category?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type ProductAllergenWhereInput = {
    AND?: ProductAllergenWhereInput | ProductAllergenWhereInput[]
    OR?: ProductAllergenWhereInput[]
    NOT?: ProductAllergenWhereInput | ProductAllergenWhereInput[]
    id?: StringFilter<"ProductAllergen"> | string
    productId?: StringFilter<"ProductAllergen"> | string
    allergenId?: StringFilter<"ProductAllergen"> | string
    mlPerDose?: FloatFilter<"ProductAllergen"> | number
    createdAt?: DateTimeFilter<"ProductAllergen"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAllergen"> | Date | string
    Allergen?: XOR<AllergenScalarRelationFilter, AllergenWhereInput>
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductAllergenOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    allergenId?: SortOrder
    mlPerDose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Allergen?: AllergenOrderByWithRelationInput
    Product?: ProductOrderByWithRelationInput
  }

  export type ProductAllergenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_allergenId?: ProductAllergenProductIdAllergenIdCompoundUniqueInput
    AND?: ProductAllergenWhereInput | ProductAllergenWhereInput[]
    OR?: ProductAllergenWhereInput[]
    NOT?: ProductAllergenWhereInput | ProductAllergenWhereInput[]
    productId?: StringFilter<"ProductAllergen"> | string
    allergenId?: StringFilter<"ProductAllergen"> | string
    mlPerDose?: FloatFilter<"ProductAllergen"> | number
    createdAt?: DateTimeFilter<"ProductAllergen"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAllergen"> | Date | string
    Allergen?: XOR<AllergenScalarRelationFilter, AllergenWhereInput>
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "productId_allergenId">

  export type ProductAllergenOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    allergenId?: SortOrder
    mlPerDose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductAllergenCountOrderByAggregateInput
    _avg?: ProductAllergenAvgOrderByAggregateInput
    _max?: ProductAllergenMaxOrderByAggregateInput
    _min?: ProductAllergenMinOrderByAggregateInput
    _sum?: ProductAllergenSumOrderByAggregateInput
  }

  export type ProductAllergenScalarWhereWithAggregatesInput = {
    AND?: ProductAllergenScalarWhereWithAggregatesInput | ProductAllergenScalarWhereWithAggregatesInput[]
    OR?: ProductAllergenScalarWhereWithAggregatesInput[]
    NOT?: ProductAllergenScalarWhereWithAggregatesInput | ProductAllergenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductAllergen"> | string
    productId?: StringWithAggregatesFilter<"ProductAllergen"> | string
    allergenId?: StringWithAggregatesFilter<"ProductAllergen"> | string
    mlPerDose?: FloatWithAggregatesFilter<"ProductAllergen"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ProductAllergen"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductAllergen"> | Date | string
  }

  export type ProductExpirationWhereInput = {
    AND?: ProductExpirationWhereInput | ProductExpirationWhereInput[]
    OR?: ProductExpirationWhereInput[]
    NOT?: ProductExpirationWhereInput | ProductExpirationWhereInput[]
    id?: StringFilter<"ProductExpiration"> | string
    productId?: StringFilter<"ProductExpiration"> | string
    sedeId?: StringFilter<"ProductExpiration"> | string
    batchNumber?: StringFilter<"ProductExpiration"> | string
    expiryDate?: DateTimeFilter<"ProductExpiration"> | Date | string
    quantity?: IntFilter<"ProductExpiration"> | number
    createdAt?: DateTimeFilter<"ProductExpiration"> | Date | string
    updatedAt?: DateTimeFilter<"ProductExpiration"> | Date | string
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }

  export type ProductExpirationOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Product?: ProductOrderByWithRelationInput
    Sede?: SedeOrderByWithRelationInput
  }

  export type ProductExpirationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductExpirationWhereInput | ProductExpirationWhereInput[]
    OR?: ProductExpirationWhereInput[]
    NOT?: ProductExpirationWhereInput | ProductExpirationWhereInput[]
    productId?: StringFilter<"ProductExpiration"> | string
    sedeId?: StringFilter<"ProductExpiration"> | string
    batchNumber?: StringFilter<"ProductExpiration"> | string
    expiryDate?: DateTimeFilter<"ProductExpiration"> | Date | string
    quantity?: IntFilter<"ProductExpiration"> | number
    createdAt?: DateTimeFilter<"ProductExpiration"> | Date | string
    updatedAt?: DateTimeFilter<"ProductExpiration"> | Date | string
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }, "id">

  export type ProductExpirationOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductExpirationCountOrderByAggregateInput
    _avg?: ProductExpirationAvgOrderByAggregateInput
    _max?: ProductExpirationMaxOrderByAggregateInput
    _min?: ProductExpirationMinOrderByAggregateInput
    _sum?: ProductExpirationSumOrderByAggregateInput
  }

  export type ProductExpirationScalarWhereWithAggregatesInput = {
    AND?: ProductExpirationScalarWhereWithAggregatesInput | ProductExpirationScalarWhereWithAggregatesInput[]
    OR?: ProductExpirationScalarWhereWithAggregatesInput[]
    NOT?: ProductExpirationScalarWhereWithAggregatesInput | ProductExpirationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductExpiration"> | string
    productId?: StringWithAggregatesFilter<"ProductExpiration"> | string
    sedeId?: StringWithAggregatesFilter<"ProductExpiration"> | string
    batchNumber?: StringWithAggregatesFilter<"ProductExpiration"> | string
    expiryDate?: DateTimeWithAggregatesFilter<"ProductExpiration"> | Date | string
    quantity?: IntWithAggregatesFilter<"ProductExpiration"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ProductExpiration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductExpiration"> | Date | string
  }

  export type SedeWhereInput = {
    AND?: SedeWhereInput | SedeWhereInput[]
    OR?: SedeWhereInput[]
    NOT?: SedeWhereInput | SedeWhereInput[]
    id?: StringFilter<"Sede"> | string
    name?: StringFilter<"Sede"> | string
    address?: StringFilter<"Sede"> | string
    createdAt?: DateTimeFilter<"Sede"> | Date | string
    updatedAt?: DateTimeFilter<"Sede"> | Date | string
    InventoryUsage?: InventoryUsageListRelationFilter
    Movement?: MovementListRelationFilter
    ProductExpiration?: ProductExpirationListRelationFilter
    StockBySede?: StockBySedeListRelationFilter
    User?: UserListRelationFilter
  }

  export type SedeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    InventoryUsage?: InventoryUsageOrderByRelationAggregateInput
    Movement?: MovementOrderByRelationAggregateInput
    ProductExpiration?: ProductExpirationOrderByRelationAggregateInput
    StockBySede?: StockBySedeOrderByRelationAggregateInput
    User?: UserOrderByRelationAggregateInput
  }

  export type SedeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SedeWhereInput | SedeWhereInput[]
    OR?: SedeWhereInput[]
    NOT?: SedeWhereInput | SedeWhereInput[]
    name?: StringFilter<"Sede"> | string
    address?: StringFilter<"Sede"> | string
    createdAt?: DateTimeFilter<"Sede"> | Date | string
    updatedAt?: DateTimeFilter<"Sede"> | Date | string
    InventoryUsage?: InventoryUsageListRelationFilter
    Movement?: MovementListRelationFilter
    ProductExpiration?: ProductExpirationListRelationFilter
    StockBySede?: StockBySedeListRelationFilter
    User?: UserListRelationFilter
  }, "id">

  export type SedeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SedeCountOrderByAggregateInput
    _max?: SedeMaxOrderByAggregateInput
    _min?: SedeMinOrderByAggregateInput
  }

  export type SedeScalarWhereWithAggregatesInput = {
    AND?: SedeScalarWhereWithAggregatesInput | SedeScalarWhereWithAggregatesInput[]
    OR?: SedeScalarWhereWithAggregatesInput[]
    NOT?: SedeScalarWhereWithAggregatesInput | SedeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sede"> | string
    name?: StringWithAggregatesFilter<"Sede"> | string
    address?: StringWithAggregatesFilter<"Sede"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sede"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sede"> | Date | string
  }

  export type StockBySedeWhereInput = {
    AND?: StockBySedeWhereInput | StockBySedeWhereInput[]
    OR?: StockBySedeWhereInput[]
    NOT?: StockBySedeWhereInput | StockBySedeWhereInput[]
    id?: StringFilter<"StockBySede"> | string
    productId?: StringFilter<"StockBySede"> | string
    sedeId?: StringFilter<"StockBySede"> | string
    quantity?: FloatFilter<"StockBySede"> | number
    createdAt?: DateTimeFilter<"StockBySede"> | Date | string
    updatedAt?: DateTimeFilter<"StockBySede"> | Date | string
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }

  export type StockBySedeOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Product?: ProductOrderByWithRelationInput
    Sede?: SedeOrderByWithRelationInput
  }

  export type StockBySedeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_sedeId?: StockBySedeProductIdSedeIdCompoundUniqueInput
    AND?: StockBySedeWhereInput | StockBySedeWhereInput[]
    OR?: StockBySedeWhereInput[]
    NOT?: StockBySedeWhereInput | StockBySedeWhereInput[]
    productId?: StringFilter<"StockBySede"> | string
    sedeId?: StringFilter<"StockBySede"> | string
    quantity?: FloatFilter<"StockBySede"> | number
    createdAt?: DateTimeFilter<"StockBySede"> | Date | string
    updatedAt?: DateTimeFilter<"StockBySede"> | Date | string
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }, "id" | "productId_sedeId">

  export type StockBySedeOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StockBySedeCountOrderByAggregateInput
    _avg?: StockBySedeAvgOrderByAggregateInput
    _max?: StockBySedeMaxOrderByAggregateInput
    _min?: StockBySedeMinOrderByAggregateInput
    _sum?: StockBySedeSumOrderByAggregateInput
  }

  export type StockBySedeScalarWhereWithAggregatesInput = {
    AND?: StockBySedeScalarWhereWithAggregatesInput | StockBySedeScalarWhereWithAggregatesInput[]
    OR?: StockBySedeScalarWhereWithAggregatesInput[]
    NOT?: StockBySedeScalarWhereWithAggregatesInput | StockBySedeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StockBySede"> | string
    productId?: StringWithAggregatesFilter<"StockBySede"> | string
    sedeId?: StringWithAggregatesFilter<"StockBySede"> | string
    quantity?: FloatWithAggregatesFilter<"StockBySede"> | number
    createdAt?: DateTimeWithAggregatesFilter<"StockBySede"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StockBySede"> | Date | string
  }

  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: StringFilter<"Supplier"> | string
    name?: StringFilter<"Supplier"> | string
    invoiceNumber?: StringNullableFilter<"Supplier"> | string | null
    amountSupplied?: FloatFilter<"Supplier"> | number
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    amountSupplied?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    name?: StringFilter<"Supplier"> | string
    invoiceNumber?: StringNullableFilter<"Supplier"> | string | null
    amountSupplied?: FloatFilter<"Supplier"> | number
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
  }, "id">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    amountSupplied?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _avg?: SupplierAvgOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
    _sum?: SupplierSumOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Supplier"> | string
    name?: StringWithAggregatesFilter<"Supplier"> | string
    invoiceNumber?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    amountSupplied?: FloatWithAggregatesFilter<"Supplier"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    sedeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    InventoryUsage?: InventoryUsageListRelationFilter
    Movement?: MovementListRelationFilter
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    sedeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    InventoryUsage?: InventoryUsageOrderByRelationAggregateInput
    Movement?: MovementOrderByRelationAggregateInput
    Sede?: SedeOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    sedeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    InventoryUsage?: InventoryUsageListRelationFilter
    Movement?: MovementListRelationFilter
    Sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    sedeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    sedeId?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type citasWhereInput = {
    AND?: citasWhereInput | citasWhereInput[]
    OR?: citasWhereInput[]
    NOT?: citasWhereInput | citasWhereInput[]
    id?: StringFilter<"citas"> | string
    descripcion?: StringNullableFilter<"citas"> | string | null
    estado?: EnumEstadoCitaFilter<"citas"> | $Enums.EstadoCita
    paciente_id?: StringFilter<"citas"> | string
    usuario_id?: StringFilter<"citas"> | string
    consultorio_id?: StringFilter<"citas"> | string
    created_at?: DateTimeFilter<"citas"> | Date | string
    updated_at?: DateTimeFilter<"citas"> | Date | string
    color?: StringNullableFilter<"citas"> | string | null
    fecha_fin?: DateTimeFilter<"citas"> | Date | string
    fecha_inicio?: DateTimeFilter<"citas"> | Date | string
    consultorios?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    pacientes?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuarios?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type citasOrderByWithRelationInput = {
    id?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    color?: SortOrderInput | SortOrder
    fecha_fin?: SortOrder
    fecha_inicio?: SortOrder
    consultorios?: ConsultorioOrderByWithRelationInput
    pacientes?: PacienteOrderByWithRelationInput
    usuarios?: UsuarioOrderByWithRelationInput
  }

  export type citasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: citasWhereInput | citasWhereInput[]
    OR?: citasWhereInput[]
    NOT?: citasWhereInput | citasWhereInput[]
    descripcion?: StringNullableFilter<"citas"> | string | null
    estado?: EnumEstadoCitaFilter<"citas"> | $Enums.EstadoCita
    paciente_id?: StringFilter<"citas"> | string
    usuario_id?: StringFilter<"citas"> | string
    consultorio_id?: StringFilter<"citas"> | string
    created_at?: DateTimeFilter<"citas"> | Date | string
    updated_at?: DateTimeFilter<"citas"> | Date | string
    color?: StringNullableFilter<"citas"> | string | null
    fecha_fin?: DateTimeFilter<"citas"> | Date | string
    fecha_inicio?: DateTimeFilter<"citas"> | Date | string
    consultorios?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    pacientes?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    usuarios?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type citasOrderByWithAggregationInput = {
    id?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    color?: SortOrderInput | SortOrder
    fecha_fin?: SortOrder
    fecha_inicio?: SortOrder
    _count?: citasCountOrderByAggregateInput
    _max?: citasMaxOrderByAggregateInput
    _min?: citasMinOrderByAggregateInput
  }

  export type citasScalarWhereWithAggregatesInput = {
    AND?: citasScalarWhereWithAggregatesInput | citasScalarWhereWithAggregatesInput[]
    OR?: citasScalarWhereWithAggregatesInput[]
    NOT?: citasScalarWhereWithAggregatesInput | citasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"citas"> | string
    descripcion?: StringNullableWithAggregatesFilter<"citas"> | string | null
    estado?: EnumEstadoCitaWithAggregatesFilter<"citas"> | $Enums.EstadoCita
    paciente_id?: StringWithAggregatesFilter<"citas"> | string
    usuario_id?: StringWithAggregatesFilter<"citas"> | string
    consultorio_id?: StringWithAggregatesFilter<"citas"> | string
    created_at?: DateTimeWithAggregatesFilter<"citas"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"citas"> | Date | string
    color?: StringNullableWithAggregatesFilter<"citas"> | string | null
    fecha_fin?: DateTimeWithAggregatesFilter<"citas"> | Date | string
    fecha_inicio?: DateTimeWithAggregatesFilter<"citas"> | Date | string
  }

  export type PacienteCreateInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasCreateNestedManyWithoutPacientesInput
    cobros?: CobroCreateNestedManyWithoutPacienteInput
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasUncheckedCreateNestedManyWithoutPacientesInput
    cobros?: CobroUncheckedCreateNestedManyWithoutPacienteInput
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUpdateManyWithoutPacientesNestedInput
    cobros?: CobroUpdateManyWithoutPacienteNestedInput
    InventoryUsage?: InventoryUsageUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutPacientesNestedInput
    cobros?: CobroUncheckedUpdateManyWithoutPacienteNestedInput
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteCreateManyInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
  }

  export type PacienteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type PacienteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio: ConsultorioCreateNestedOneWithoutUsuariosInput
    citas?: citasCreateNestedManyWithoutUsuariosInput
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio_id: string
    citas?: citasUncheckedCreateNestedManyWithoutUsuariosInput
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio?: ConsultorioUpdateOneRequiredWithoutUsuariosNestedInput
    citas?: citasUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio_id?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio_id: string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio_id?: StringFieldUpdateOperationsInput | string
  }

  export type ConsultorioCreateInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasUncheckedCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUncheckedUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioCreateManyInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrecioConsultorioCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
    consultorio: ConsultorioCreateNestedOneWithoutPreciosInput
  }

  export type PrecioConsultorioUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    consultorio_id: string
    precio: number
  }

  export type PrecioConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    consultorio?: ConsultorioUpdateOneRequiredWithoutPreciosNestedInput
  }

  export type PrecioConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    consultorio_id: string
    precio: number
  }

  export type PrecioConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroCreateInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroCreateManyInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type CobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type CobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type CobroConceptoCreateInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoCreateManyInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroConceptoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroCreateInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    cobro: CobroCreateNestedOneWithoutHistorialInput
    usuario: UsuarioCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    cobro?: CobroUpdateOneRequiredWithoutHistorialNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroCreateManyInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type HistorialCobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type ServicioCreateInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroCreateInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro: CobroCreateNestedOneWithoutMetodos_pagoInput
  }

  export type MetodoPagoCobroUncheckedCreateInput = {
    id?: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro?: CobroUpdateOneRequiredWithoutMetodos_pagoNestedInput
  }

  export type MetodoPagoCobroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroCreateManyInput = {
    id?: string
    cobro_id: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergenCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    alxoidType?: $Enums.AlxoidType | null
    isAlxoidExclusive?: boolean
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutAllergenInput
  }

  export type AllergenUncheckedCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    alxoidType?: $Enums.AlxoidType | null
    isAlxoidExclusive?: boolean
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutAllergenInput
  }

  export type AllergenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
    ProductAllergen?: ProductAllergenUpdateManyWithoutAllergenNestedInput
  }

  export type AllergenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutAllergenNestedInput
  }

  export type AllergenCreateManyInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    alxoidType?: $Enums.AlxoidType | null
    isAlxoidExclusive?: boolean
  }

  export type AllergenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AllergenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryUsageCreateInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutInventoryUsageInput
    User: UserCreateNestedOneWithoutInventoryUsageInput
    Paciente?: PacienteCreateNestedOneWithoutInventoryUsageInput
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageUncheckedCreateInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    userId: string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutInventoryUsageNestedInput
    User?: UserUpdateOneRequiredWithoutInventoryUsageNestedInput
    Paciente?: PacienteUpdateOneWithoutInventoryUsageNestedInput
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageCreateManyInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    userId: string
  }

  export type InventoryUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryUsageDetailCreateInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
    InventoryUsage: InventoryUsageCreateNestedOneWithoutInventoryUsageDetailInput
    Movement?: MovementCreateNestedOneWithoutInventoryUsageDetailInput
    Product: ProductCreateNestedOneWithoutInventoryUsageDetailInput
  }

  export type InventoryUsageDetailUncheckedCreateInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    movementId?: string | null
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
    Movement?: MovementUpdateOneWithoutInventoryUsageDetailNestedInput
    Product?: ProductUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
  }

  export type InventoryUsageDetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailCreateManyInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    movementId?: string | null
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementCreateInput = {
    id: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutMovementInput
    Product: ProductCreateNestedOneWithoutMovementInput
    Sede: SedeCreateNestedOneWithoutMovementInput
    User: UserCreateNestedOneWithoutMovementInput
  }

  export type MovementUncheckedCreateInput = {
    id: string
    userId: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutMovementInput
  }

  export type MovementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutMovementNestedInput
    Product?: ProductUpdateOneRequiredWithoutMovementNestedInput
    Sede?: SedeUpdateOneRequiredWithoutMovementNestedInput
    User?: UserUpdateOneRequiredWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutMovementNestedInput
  }

  export type MovementCreateManyInput = {
    id: string
    userId: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutProductInput
    Movement?: MovementCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput
    Movement?: MovementUncheckedCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutProductNestedInput
    Movement?: MovementUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductAllergenCreateInput = {
    id: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
    Allergen: AllergenCreateNestedOneWithoutProductAllergenInput
    Product: ProductCreateNestedOneWithoutProductAllergenInput
  }

  export type ProductAllergenUncheckedCreateInput = {
    id: string
    productId: string
    allergenId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductAllergenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Allergen?: AllergenUpdateOneRequiredWithoutProductAllergenNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductAllergenNestedInput
  }

  export type ProductAllergenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    allergenId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAllergenCreateManyInput = {
    id: string
    productId: string
    allergenId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductAllergenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAllergenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    allergenId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationCreateInput = {
    id: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Product: ProductCreateNestedOneWithoutProductExpirationInput
    Sede: SedeCreateNestedOneWithoutProductExpirationInput
  }

  export type ProductExpirationUncheckedCreateInput = {
    id: string
    productId: string
    sedeId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductExpirationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutProductExpirationNestedInput
    Sede?: SedeUpdateOneRequiredWithoutProductExpirationNestedInput
  }

  export type ProductExpirationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationCreateManyInput = {
    id: string
    productId: string
    sedeId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductExpirationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SedeCreateInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutSedeInput
    Movement?: MovementCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeCreateNestedManyWithoutSedeInput
    User?: UserCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutSedeInput
    Movement?: MovementUncheckedCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutSedeInput
    User?: UserUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutSedeNestedInput
    Movement?: MovementUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutSedeNestedInput
    User?: UserUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutSedeNestedInput
    User?: UserUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type SedeCreateManyInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SedeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SedeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeCreateInput = {
    id: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Product: ProductCreateNestedOneWithoutStockBySedeInput
    Sede: SedeCreateNestedOneWithoutStockBySedeInput
  }

  export type StockBySedeUncheckedCreateInput = {
    id: string
    productId: string
    sedeId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutStockBySedeNestedInput
    Sede?: SedeUpdateOneRequiredWithoutStockBySedeNestedInput
  }

  export type StockBySedeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeCreateManyInput = {
    id: string
    productId: string
    sedeId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreateInput = {
    id: string
    name: string
    invoiceNumber?: string | null
    amountSupplied: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SupplierUncheckedCreateInput = {
    id: string
    name: string
    invoiceNumber?: string | null
    amountSupplied: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    amountSupplied?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    amountSupplied?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreateManyInput = {
    id: string
    name: string
    invoiceNumber?: string | null
    amountSupplied: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    amountSupplied?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    amountSupplied?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutUserInput
    Movement?: MovementCreateNestedManyWithoutUserInput
    Sede: SedeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    sedeId: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutUserInput
    Movement?: MovementUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutUserNestedInput
    Movement?: MovementUpdateManyWithoutUserNestedInput
    Sede?: SedeUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    sedeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutUserNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    sedeId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    sedeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasCreateInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
    consultorios: ConsultorioCreateNestedOneWithoutCitasInput
    pacientes: PacienteCreateNestedOneWithoutCitasInput
    usuarios: UsuarioCreateNestedOneWithoutCitasInput
  }

  export type citasUncheckedCreateInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type citasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
    pacientes?: PacienteUpdateOneRequiredWithoutCitasNestedInput
    usuarios?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type citasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasCreateManyInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    usuario_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type citasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CitasListRelationFilter = {
    every?: citasWhereInput
    some?: citasWhereInput
    none?: citasWhereInput
  }

  export type CobroListRelationFilter = {
    every?: CobroWhereInput
    some?: CobroWhereInput
    none?: CobroWhereInput
  }

  export type InventoryUsageListRelationFilter = {
    every?: InventoryUsageWhereInput
    some?: InventoryUsageWhereInput
    none?: InventoryUsageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type citasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PacienteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type PacienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type PacienteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    documento_identidad?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    apellido?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[]
    notIn?: $Enums.Rol[]
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type ConsultorioScalarRelationFilter = {
    is?: ConsultorioWhereInput
    isNot?: ConsultorioWhereInput
  }

  export type HistorialCobroListRelationFilter = {
    every?: HistorialCobroWhereInput
    some?: HistorialCobroWhereInput
    none?: HistorialCobroWhereInput
  }

  export type HistorialCobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    consultorio_id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    consultorio_id?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    rol?: SortOrder
    consultorio_id?: SortOrder
  }

  export type EnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[]
    notIn?: $Enums.Rol[]
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type CobroConceptoListRelationFilter = {
    every?: CobroConceptoWhereInput
    some?: CobroConceptoWhereInput
    none?: CobroConceptoWhereInput
  }

  export type PrecioConsultorioListRelationFilter = {
    every?: PrecioConsultorioWhereInput
    some?: PrecioConsultorioWhereInput
    none?: PrecioConsultorioWhereInput
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type CobroConceptoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrecioConsultorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PrecioConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioAvgOrderByAggregateInput = {
    precio?: SortOrder
  }

  export type PrecioConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    concepto?: SortOrder
    consultorio_id?: SortOrder
    precio?: SortOrder
  }

  export type PrecioConsultorioSumOrderByAggregateInput = {
    precio?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumEstadoCobroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[]
    notIn?: $Enums.EstadoCobro[]
    not?: NestedEnumEstadoCobroFilter<$PrismaModel> | $Enums.EstadoCobro
  }

  export type EnumMetodoPagoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | null
    notIn?: $Enums.MetodoPago[] | null
    not?: NestedEnumMetodoPagoNullableFilter<$PrismaModel> | $Enums.MetodoPago | null
  }

  export type PacienteScalarRelationFilter = {
    is?: PacienteWhereInput
    isNot?: PacienteWhereInput
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type MetodoPagoCobroListRelationFilter = {
    every?: MetodoPagoCobroWhereInput
    some?: MetodoPagoCobroWhereInput
    none?: MetodoPagoCobroWhereInput
  }

  export type MetodoPagoCobroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CobroCountOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroAvgOrderByAggregateInput = {
    monto_total?: SortOrder
  }

  export type CobroMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroMinOrderByAggregateInput = {
    id?: SortOrder
    fecha_cobro?: SortOrder
    monto_total?: SortOrder
    notas?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    estado?: SortOrder
    metodo_pago?: SortOrder
  }

  export type CobroSumOrderByAggregateInput = {
    monto_total?: SortOrder
  }

  export type EnumEstadoCobroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[]
    notIn?: $Enums.EstadoCobro[]
    not?: NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCobro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCobroFilter<$PrismaModel>
    _max?: NestedEnumEstadoCobroFilter<$PrismaModel>
  }

  export type EnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | null
    notIn?: $Enums.MetodoPago[] | null
    not?: NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CobroScalarRelationFilter = {
    is?: CobroWhereInput
    isNot?: CobroWhereInput
  }

  export type ServicioScalarRelationFilter = {
    is?: ServicioWhereInput
    isNot?: ServicioWhereInput
  }

  export type CobroConceptoCountOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoAvgOrderByAggregateInput = {
    cantidad?: SortOrder
    subtotal?: SortOrder
    precio_unitario?: SortOrder
  }

  export type CobroConceptoMaxOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoMinOrderByAggregateInput = {
    id?: SortOrder
    cantidad?: SortOrder
    subtotal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cobro_id?: SortOrder
    consultorio_id?: SortOrder
    precio_unitario?: SortOrder
    servicio_id?: SortOrder
  }

  export type CobroConceptoSumOrderByAggregateInput = {
    cantidad?: SortOrder
    subtotal?: SortOrder
    precio_unitario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[]
    notIn?: $Enums.TipoCambio[]
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }

  export type HistorialCobroCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }

  export type HistorialCobroMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }

  export type HistorialCobroMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    cobro_id?: SortOrder
    detalles_antes?: SortOrder
    detalles_despues?: SortOrder
    tipo_cambio?: SortOrder
    usuario_id?: SortOrder
  }

  export type EnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[]
    notIn?: $Enums.TipoCambio[]
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type ServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioAvgOrderByAggregateInput = {
    precio_base?: SortOrder
  }

  export type ServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio_base?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicioSumOrderByAggregateInput = {
    precio_base?: SortOrder
  }

  export type EnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type MetodoPagoCobroCountOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroAvgOrderByAggregateInput = {
    monto?: SortOrder
  }

  export type MetodoPagoCobroMaxOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroMinOrderByAggregateInput = {
    id?: SortOrder
    cobro_id?: SortOrder
    metodo_pago?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MetodoPagoCobroSumOrderByAggregateInput = {
    monto?: SortOrder
  }

  export type EnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type EnumAlxoidTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AlxoidType | EnumAlxoidTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AlxoidType[] | null
    notIn?: $Enums.AlxoidType[] | null
    not?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel> | $Enums.AlxoidType | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProductAllergenListRelationFilter = {
    every?: ProductAllergenWhereInput
    some?: ProductAllergenWhereInput
    none?: ProductAllergenWhereInput
  }

  export type ProductAllergenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllergenCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    alxoidType?: SortOrder
    isAlxoidExclusive?: SortOrder
  }

  export type AllergenMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    alxoidType?: SortOrder
    isAlxoidExclusive?: SortOrder
  }

  export type AllergenMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    alxoidType?: SortOrder
    isAlxoidExclusive?: SortOrder
  }

  export type EnumAlxoidTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlxoidType | EnumAlxoidTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AlxoidType[] | null
    notIn?: $Enums.AlxoidType[] | null
    not?: NestedEnumAlxoidTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AlxoidType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTipoTratamientoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoTratamiento | EnumTipoTratamientoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoTratamiento[]
    notIn?: $Enums.TipoTratamiento[]
    not?: NestedEnumTipoTratamientoFilter<$PrismaModel> | $Enums.TipoTratamiento
  }

  export type SedeScalarRelationFilter = {
    is?: SedeWhereInput
    isNot?: SedeWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PacienteNullableScalarRelationFilter = {
    is?: PacienteWhereInput | null
    isNot?: PacienteWhereInput | null
  }

  export type InventoryUsageDetailListRelationFilter = {
    every?: InventoryUsageDetailWhereInput
    some?: InventoryUsageDetailWhereInput
    none?: InventoryUsageDetailWhereInput
  }

  export type InventoryUsageDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryUsageCountOrderByAggregateInput = {
    id?: SortOrder
    nombrePaciente?: SortOrder
    pacienteId?: SortOrder
    tipoTratamiento?: SortOrder
    observaciones?: SortOrder
    tuvoReaccion?: SortOrder
    descripcionReaccion?: SortOrder
    createdAt?: SortOrder
    sedeId?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type InventoryUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    nombrePaciente?: SortOrder
    pacienteId?: SortOrder
    tipoTratamiento?: SortOrder
    observaciones?: SortOrder
    tuvoReaccion?: SortOrder
    descripcionReaccion?: SortOrder
    createdAt?: SortOrder
    sedeId?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type InventoryUsageMinOrderByAggregateInput = {
    id?: SortOrder
    nombrePaciente?: SortOrder
    pacienteId?: SortOrder
    tipoTratamiento?: SortOrder
    observaciones?: SortOrder
    tuvoReaccion?: SortOrder
    descripcionReaccion?: SortOrder
    createdAt?: SortOrder
    sedeId?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumTipoTratamientoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoTratamiento | EnumTipoTratamientoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoTratamiento[]
    notIn?: $Enums.TipoTratamiento[]
    not?: NestedEnumTipoTratamientoWithAggregatesFilter<$PrismaModel> | $Enums.TipoTratamiento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoTratamientoFilter<$PrismaModel>
    _max?: NestedEnumTipoTratamientoFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type InventoryUsageScalarRelationFilter = {
    is?: InventoryUsageWhereInput
    isNot?: InventoryUsageWhereInput
  }

  export type MovementNullableScalarRelationFilter = {
    is?: MovementWhereInput | null
    isNot?: MovementWhereInput | null
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type InventoryUsageDetailCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    doses?: SortOrder
    frascoLevel?: SortOrder
    inventoryUsageId?: SortOrder
    movementId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryUsageDetailAvgOrderByAggregateInput = {
    doses?: SortOrder
    frascoLevel?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrder
  }

  export type InventoryUsageDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    doses?: SortOrder
    frascoLevel?: SortOrder
    inventoryUsageId?: SortOrder
    movementId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryUsageDetailMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    doses?: SortOrder
    frascoLevel?: SortOrder
    inventoryUsageId?: SortOrder
    movementId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryUsageDetailSumOrderByAggregateInput = {
    doses?: SortOrder
    frascoLevel?: SortOrder
    quantity?: SortOrder
    totalCost?: SortOrder
    unitCost?: SortOrder
    units?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumMovementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementType | EnumMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MovementType[]
    notIn?: $Enums.MovementType[]
    not?: NestedEnumMovementTypeFilter<$PrismaModel> | $Enums.MovementType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MovementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sedeId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type MovementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sedeId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sedeId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type EnumMovementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementType | EnumMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MovementType[]
    notIn?: $Enums.MovementType[]
    not?: NestedEnumMovementTypeWithAggregatesFilter<$PrismaModel> | $Enums.MovementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMovementTypeFilter<$PrismaModel>
    _max?: NestedEnumMovementTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[]
    notIn?: $Enums.ProductType[]
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type EnumProductUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductUnit | EnumProductUnitFieldRefInput<$PrismaModel>
    in?: $Enums.ProductUnit[]
    notIn?: $Enums.ProductUnit[]
    not?: NestedEnumProductUnitFilter<$PrismaModel> | $Enums.ProductUnit
  }

  export type MovementListRelationFilter = {
    every?: MovementWhereInput
    some?: MovementWhereInput
    none?: MovementWhereInput
  }

  export type ProductExpirationListRelationFilter = {
    every?: ProductExpirationWhereInput
    some?: ProductExpirationWhereInput
    none?: ProductExpirationWhereInput
  }

  export type StockBySedeListRelationFilter = {
    every?: StockBySedeWhereInput
    some?: StockBySedeWhereInput
    none?: StockBySedeWhereInput
  }

  export type MovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductExpirationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockBySedeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    costPerUnit?: SortOrder
    minStockLevel?: SortOrder
  }

  export type EnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[]
    notIn?: $Enums.ProductType[]
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type EnumProductUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductUnit | EnumProductUnitFieldRefInput<$PrismaModel>
    in?: $Enums.ProductUnit[]
    notIn?: $Enums.ProductUnit[]
    not?: NestedEnumProductUnitWithAggregatesFilter<$PrismaModel> | $Enums.ProductUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductUnitFilter<$PrismaModel>
    _max?: NestedEnumProductUnitFilter<$PrismaModel>
  }

  export type AllergenScalarRelationFilter = {
    is?: AllergenWhereInput
    isNot?: AllergenWhereInput
  }

  export type ProductAllergenProductIdAllergenIdCompoundUniqueInput = {
    productId: string
    allergenId: string
  }

  export type ProductAllergenCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    allergenId?: SortOrder
    mlPerDose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAllergenAvgOrderByAggregateInput = {
    mlPerDose?: SortOrder
  }

  export type ProductAllergenMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    allergenId?: SortOrder
    mlPerDose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAllergenMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    allergenId?: SortOrder
    mlPerDose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAllergenSumOrderByAggregateInput = {
    mlPerDose?: SortOrder
  }

  export type ProductExpirationCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductExpirationAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type ProductExpirationMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductExpirationMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    batchNumber?: SortOrder
    expiryDate?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductExpirationSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SedeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SedeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SedeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockBySedeProductIdSedeIdCompoundUniqueInput = {
    productId: string
    sedeId: string
  }

  export type StockBySedeCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockBySedeAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type StockBySedeMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockBySedeMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sedeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockBySedeSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    invoiceNumber?: SortOrder
    amountSupplied?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierAvgOrderByAggregateInput = {
    amountSupplied?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    invoiceNumber?: SortOrder
    amountSupplied?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    invoiceNumber?: SortOrder
    amountSupplied?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierSumOrderByAggregateInput = {
    amountSupplied?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    sedeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    sedeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    sedeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumEstadoCitaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[]
    notIn?: $Enums.EstadoCita[]
    not?: NestedEnumEstadoCitaFilter<$PrismaModel> | $Enums.EstadoCita
  }

  export type citasCountOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    color?: SortOrder
    fecha_fin?: SortOrder
    fecha_inicio?: SortOrder
  }

  export type citasMaxOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    color?: SortOrder
    fecha_fin?: SortOrder
    fecha_inicio?: SortOrder
  }

  export type citasMinOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    paciente_id?: SortOrder
    usuario_id?: SortOrder
    consultorio_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    color?: SortOrder
    fecha_fin?: SortOrder
    fecha_inicio?: SortOrder
  }

  export type EnumEstadoCitaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[]
    notIn?: $Enums.EstadoCita[]
    not?: NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCita
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCitaFilter<$PrismaModel>
    _max?: NestedEnumEstadoCitaFilter<$PrismaModel>
  }

  export type citasCreateNestedManyWithoutPacientesInput = {
    create?: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput> | citasCreateWithoutPacientesInput[] | citasUncheckedCreateWithoutPacientesInput[]
    connectOrCreate?: citasCreateOrConnectWithoutPacientesInput | citasCreateOrConnectWithoutPacientesInput[]
    createMany?: citasCreateManyPacientesInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type InventoryUsageCreateNestedManyWithoutPacienteInput = {
    create?: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput> | InventoryUsageCreateWithoutPacienteInput[] | InventoryUsageUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutPacienteInput | InventoryUsageCreateOrConnectWithoutPacienteInput[]
    createMany?: InventoryUsageCreateManyPacienteInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type citasUncheckedCreateNestedManyWithoutPacientesInput = {
    create?: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput> | citasCreateWithoutPacientesInput[] | citasUncheckedCreateWithoutPacientesInput[]
    connectOrCreate?: citasCreateOrConnectWithoutPacientesInput | citasCreateOrConnectWithoutPacientesInput[]
    createMany?: citasCreateManyPacientesInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type InventoryUsageUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput> | InventoryUsageCreateWithoutPacienteInput[] | InventoryUsageUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutPacienteInput | InventoryUsageCreateOrConnectWithoutPacienteInput[]
    createMany?: InventoryUsageCreateManyPacienteInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type citasUpdateManyWithoutPacientesNestedInput = {
    create?: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput> | citasCreateWithoutPacientesInput[] | citasUncheckedCreateWithoutPacientesInput[]
    connectOrCreate?: citasCreateOrConnectWithoutPacientesInput | citasCreateOrConnectWithoutPacientesInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutPacientesInput | citasUpsertWithWhereUniqueWithoutPacientesInput[]
    createMany?: citasCreateManyPacientesInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutPacientesInput | citasUpdateWithWhereUniqueWithoutPacientesInput[]
    updateMany?: citasUpdateManyWithWhereWithoutPacientesInput | citasUpdateManyWithWhereWithoutPacientesInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutPacienteInput | CobroUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutPacienteInput | CobroUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutPacienteInput | CobroUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type InventoryUsageUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput> | InventoryUsageCreateWithoutPacienteInput[] | InventoryUsageUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutPacienteInput | InventoryUsageCreateOrConnectWithoutPacienteInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutPacienteInput | InventoryUsageUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: InventoryUsageCreateManyPacienteInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutPacienteInput | InventoryUsageUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutPacienteInput | InventoryUsageUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type citasUncheckedUpdateManyWithoutPacientesNestedInput = {
    create?: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput> | citasCreateWithoutPacientesInput[] | citasUncheckedCreateWithoutPacientesInput[]
    connectOrCreate?: citasCreateOrConnectWithoutPacientesInput | citasCreateOrConnectWithoutPacientesInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutPacientesInput | citasUpsertWithWhereUniqueWithoutPacientesInput[]
    createMany?: citasCreateManyPacientesInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutPacientesInput | citasUpdateWithWhereUniqueWithoutPacientesInput[]
    updateMany?: citasUpdateManyWithWhereWithoutPacientesInput | citasUpdateManyWithWhereWithoutPacientesInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput> | CobroCreateWithoutPacienteInput[] | CobroUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutPacienteInput | CobroCreateOrConnectWithoutPacienteInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutPacienteInput | CobroUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: CobroCreateManyPacienteInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutPacienteInput | CobroUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutPacienteInput | CobroUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type InventoryUsageUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput> | InventoryUsageCreateWithoutPacienteInput[] | InventoryUsageUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutPacienteInput | InventoryUsageCreateOrConnectWithoutPacienteInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutPacienteInput | InventoryUsageUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: InventoryUsageCreateManyPacienteInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutPacienteInput | InventoryUsageUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutPacienteInput | InventoryUsageUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type ConsultorioCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<ConsultorioCreateWithoutUsuariosInput, ConsultorioUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutUsuariosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type citasCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput> | citasCreateWithoutUsuariosInput[] | citasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutUsuariosInput | citasCreateOrConnectWithoutUsuariosInput[]
    createMany?: citasCreateManyUsuariosInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type HistorialCobroCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type citasUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput> | citasCreateWithoutUsuariosInput[] | citasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutUsuariosInput | citasCreateOrConnectWithoutUsuariosInput[]
    createMany?: citasCreateManyUsuariosInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
  }

  export type HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type EnumRolFieldUpdateOperationsInput = {
    set?: $Enums.Rol
  }

  export type ConsultorioUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutUsuariosInput, ConsultorioUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutUsuariosInput
    upsert?: ConsultorioUpsertWithoutUsuariosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutUsuariosInput, ConsultorioUpdateWithoutUsuariosInput>, ConsultorioUncheckedUpdateWithoutUsuariosInput>
  }

  export type citasUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput> | citasCreateWithoutUsuariosInput[] | citasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutUsuariosInput | citasCreateOrConnectWithoutUsuariosInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutUsuariosInput | citasUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: citasCreateManyUsuariosInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutUsuariosInput | citasUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: citasUpdateManyWithWhereWithoutUsuariosInput | citasUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutUsuarioInput | CobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutUsuarioInput | CobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutUsuarioInput | CobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type HistorialCobroUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutUsuarioInput | HistorialCobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type citasUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput> | citasCreateWithoutUsuariosInput[] | citasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutUsuariosInput | citasCreateOrConnectWithoutUsuariosInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutUsuariosInput | citasUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: citasCreateManyUsuariosInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutUsuariosInput | citasUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: citasUpdateManyWithWhereWithoutUsuariosInput | citasUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput> | CobroCreateWithoutUsuarioInput[] | CobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CobroCreateOrConnectWithoutUsuarioInput | CobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: CobroUpsertWithWhereUniqueWithoutUsuarioInput | CobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CobroCreateManyUsuarioInputEnvelope
    set?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    disconnect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    delete?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    connect?: CobroWhereUniqueInput | CobroWhereUniqueInput[]
    update?: CobroUpdateWithWhereUniqueWithoutUsuarioInput | CobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CobroUpdateManyWithWhereWithoutUsuarioInput | CobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CobroScalarWhereInput | CobroScalarWhereInput[]
  }

  export type HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput> | HistorialCobroCreateWithoutUsuarioInput[] | HistorialCobroUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutUsuarioInput | HistorialCobroCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCobroCreateManyUsuarioInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput | HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutUsuarioInput | HistorialCobroUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type citasCreateNestedManyWithoutConsultoriosInput = {
    create?: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput> | citasCreateWithoutConsultoriosInput[] | citasUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutConsultoriosInput | citasCreateOrConnectWithoutConsultoriosInput[]
    createMany?: citasCreateManyConsultoriosInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroConceptoCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PrecioConsultorioCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
  }

  export type UsuarioCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput> | UsuarioCreateWithoutConsultorioInput[] | UsuarioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutConsultorioInput | UsuarioCreateOrConnectWithoutConsultorioInput[]
    createMany?: UsuarioCreateManyConsultorioInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type citasUncheckedCreateNestedManyWithoutConsultoriosInput = {
    create?: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput> | citasCreateWithoutConsultoriosInput[] | citasUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutConsultoriosInput | citasCreateOrConnectWithoutConsultoriosInput[]
    createMany?: citasCreateManyConsultoriosInputEnvelope
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
  }

  export type UsuarioUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput> | UsuarioCreateWithoutConsultorioInput[] | UsuarioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutConsultorioInput | UsuarioCreateOrConnectWithoutConsultorioInput[]
    createMany?: UsuarioCreateManyConsultorioInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type citasUpdateManyWithoutConsultoriosNestedInput = {
    create?: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput> | citasCreateWithoutConsultoriosInput[] | citasUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutConsultoriosInput | citasCreateOrConnectWithoutConsultoriosInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutConsultoriosInput | citasUpsertWithWhereUniqueWithoutConsultoriosInput[]
    createMany?: citasCreateManyConsultoriosInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutConsultoriosInput | citasUpdateWithWhereUniqueWithoutConsultoriosInput[]
    updateMany?: citasUpdateManyWithWhereWithoutConsultoriosInput | citasUpdateManyWithWhereWithoutConsultoriosInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroConceptoUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutConsultorioInput | CobroConceptoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PrecioConsultorioUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    upsert?: PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    set?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    disconnect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    delete?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    update?: PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput | PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
  }

  export type UsuarioUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput> | UsuarioCreateWithoutConsultorioInput[] | UsuarioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutConsultorioInput | UsuarioCreateOrConnectWithoutConsultorioInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutConsultorioInput | UsuarioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: UsuarioCreateManyConsultorioInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutConsultorioInput | UsuarioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutConsultorioInput | UsuarioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type citasUncheckedUpdateManyWithoutConsultoriosNestedInput = {
    create?: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput> | citasCreateWithoutConsultoriosInput[] | citasUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: citasCreateOrConnectWithoutConsultoriosInput | citasCreateOrConnectWithoutConsultoriosInput[]
    upsert?: citasUpsertWithWhereUniqueWithoutConsultoriosInput | citasUpsertWithWhereUniqueWithoutConsultoriosInput[]
    createMany?: citasCreateManyConsultoriosInputEnvelope
    set?: citasWhereUniqueInput | citasWhereUniqueInput[]
    disconnect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    delete?: citasWhereUniqueInput | citasWhereUniqueInput[]
    connect?: citasWhereUniqueInput | citasWhereUniqueInput[]
    update?: citasUpdateWithWhereUniqueWithoutConsultoriosInput | citasUpdateWithWhereUniqueWithoutConsultoriosInput[]
    updateMany?: citasUpdateManyWithWhereWithoutConsultoriosInput | citasUpdateManyWithWhereWithoutConsultoriosInput[]
    deleteMany?: citasScalarWhereInput | citasScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput> | CobroConceptoCreateWithoutConsultorioInput[] | CobroConceptoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutConsultorioInput | CobroConceptoCreateOrConnectWithoutConsultorioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: CobroConceptoCreateManyConsultorioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput | CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutConsultorioInput | CobroConceptoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput> | PrecioConsultorioCreateWithoutConsultorioInput[] | PrecioConsultorioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: PrecioConsultorioCreateOrConnectWithoutConsultorioInput | PrecioConsultorioCreateOrConnectWithoutConsultorioInput[]
    upsert?: PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: PrecioConsultorioCreateManyConsultorioInputEnvelope
    set?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    disconnect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    delete?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    connect?: PrecioConsultorioWhereUniqueInput | PrecioConsultorioWhereUniqueInput[]
    update?: PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput | PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput | PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
  }

  export type UsuarioUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput> | UsuarioCreateWithoutConsultorioInput[] | UsuarioUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutConsultorioInput | UsuarioCreateOrConnectWithoutConsultorioInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutConsultorioInput | UsuarioUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: UsuarioCreateManyConsultorioInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutConsultorioInput | UsuarioUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutConsultorioInput | UsuarioUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type ConsultorioCreateNestedOneWithoutPreciosInput = {
    create?: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutPreciosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConsultorioUpdateOneRequiredWithoutPreciosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutPreciosInput
    upsert?: ConsultorioUpsertWithoutPreciosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutPreciosInput, ConsultorioUpdateWithoutPreciosInput>, ConsultorioUncheckedUpdateWithoutPreciosInput>
  }

  export type CobroConceptoCreateNestedManyWithoutCobroInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type PacienteCreateNestedOneWithoutCobrosInput = {
    create?: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCobrosInput
    connect?: PacienteWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutCobrosInput = {
    create?: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCobrosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type HistorialCobroCreateNestedManyWithoutCobroInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type MetodoPagoCobroCreateNestedManyWithoutCobroInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type HistorialCobroUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
  }

  export type MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
  }

  export type EnumEstadoCobroFieldUpdateOperationsInput = {
    set?: $Enums.EstadoCobro
  }

  export type NullableEnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago | null
  }

  export type CobroConceptoUpdateManyWithoutCobroNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutCobroInput | CobroConceptoUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutCobroInput | CobroConceptoUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutCobroInput | CobroConceptoUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type PacienteUpdateOneRequiredWithoutCobrosNestedInput = {
    create?: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCobrosInput
    upsert?: PacienteUpsertWithoutCobrosInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutCobrosInput, PacienteUpdateWithoutCobrosInput>, PacienteUncheckedUpdateWithoutCobrosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutCobrosNestedInput = {
    create?: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCobrosInput
    upsert?: UsuarioUpsertWithoutCobrosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCobrosInput, UsuarioUpdateWithoutCobrosInput>, UsuarioUncheckedUpdateWithoutCobrosInput>
  }

  export type HistorialCobroUpdateManyWithoutCobroNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutCobroInput | HistorialCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutCobroInput | HistorialCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutCobroInput | HistorialCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type MetodoPagoCobroUpdateManyWithoutCobroNestedInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    upsert?: MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    set?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    disconnect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    delete?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    update?: MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput | MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput> | CobroConceptoCreateWithoutCobroInput[] | CobroConceptoUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutCobroInput | CobroConceptoCreateOrConnectWithoutCobroInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutCobroInput | CobroConceptoUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: CobroConceptoCreateManyCobroInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutCobroInput | CobroConceptoUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutCobroInput | CobroConceptoUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput> | HistorialCobroCreateWithoutCobroInput[] | HistorialCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: HistorialCobroCreateOrConnectWithoutCobroInput | HistorialCobroCreateOrConnectWithoutCobroInput[]
    upsert?: HistorialCobroUpsertWithWhereUniqueWithoutCobroInput | HistorialCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: HistorialCobroCreateManyCobroInputEnvelope
    set?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    disconnect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    delete?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    connect?: HistorialCobroWhereUniqueInput | HistorialCobroWhereUniqueInput[]
    update?: HistorialCobroUpdateWithWhereUniqueWithoutCobroInput | HistorialCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: HistorialCobroUpdateManyWithWhereWithoutCobroInput | HistorialCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
  }

  export type MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput = {
    create?: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput> | MetodoPagoCobroCreateWithoutCobroInput[] | MetodoPagoCobroUncheckedCreateWithoutCobroInput[]
    connectOrCreate?: MetodoPagoCobroCreateOrConnectWithoutCobroInput | MetodoPagoCobroCreateOrConnectWithoutCobroInput[]
    upsert?: MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput[]
    createMany?: MetodoPagoCobroCreateManyCobroInputEnvelope
    set?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    disconnect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    delete?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    connect?: MetodoPagoCobroWhereUniqueInput | MetodoPagoCobroWhereUniqueInput[]
    update?: MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput | MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput[]
    updateMany?: MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput | MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput[]
    deleteMany?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
  }

  export type CobroCreateNestedOneWithoutConceptosInput = {
    create?: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: CobroCreateOrConnectWithoutConceptosInput
    connect?: CobroWhereUniqueInput
  }

  export type ConsultorioCreateNestedOneWithoutConceptosInput = {
    create?: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutConceptosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type ServicioCreateNestedOneWithoutConceptosInput = {
    create?: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutConceptosInput
    connect?: ServicioWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CobroUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: CobroCreateOrConnectWithoutConceptosInput
    upsert?: CobroUpsertWithoutConceptosInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutConceptosInput, CobroUpdateWithoutConceptosInput>, CobroUncheckedUpdateWithoutConceptosInput>
  }

  export type ConsultorioUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutConceptosInput
    upsert?: ConsultorioUpsertWithoutConceptosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutConceptosInput, ConsultorioUpdateWithoutConceptosInput>, ConsultorioUncheckedUpdateWithoutConceptosInput>
  }

  export type ServicioUpdateOneRequiredWithoutConceptosNestedInput = {
    create?: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutConceptosInput
    upsert?: ServicioUpsertWithoutConceptosInput
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutConceptosInput, ServicioUpdateWithoutConceptosInput>, ServicioUncheckedUpdateWithoutConceptosInput>
  }

  export type CobroCreateNestedOneWithoutHistorialInput = {
    create?: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: CobroCreateOrConnectWithoutHistorialInput
    connect?: CobroWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutHistorialInput = {
    create?: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutHistorialInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumTipoCambioFieldUpdateOperationsInput = {
    set?: $Enums.TipoCambio
  }

  export type CobroUpdateOneRequiredWithoutHistorialNestedInput = {
    create?: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: CobroCreateOrConnectWithoutHistorialInput
    upsert?: CobroUpsertWithoutHistorialInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutHistorialInput, CobroUpdateWithoutHistorialInput>, CobroUncheckedUpdateWithoutHistorialInput>
  }

  export type UsuarioUpdateOneRequiredWithoutHistorialNestedInput = {
    create?: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutHistorialInput
    upsert?: UsuarioUpsertWithoutHistorialInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutHistorialInput, UsuarioUpdateWithoutHistorialInput>, UsuarioUncheckedUpdateWithoutHistorialInput>
  }

  export type CobroConceptoCreateNestedManyWithoutServicioInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type CobroConceptoUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
  }

  export type CobroConceptoUpdateManyWithoutServicioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutServicioInput | CobroConceptoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutServicioInput | CobroConceptoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutServicioInput | CobroConceptoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type CobroConceptoUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput> | CobroConceptoCreateWithoutServicioInput[] | CobroConceptoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: CobroConceptoCreateOrConnectWithoutServicioInput | CobroConceptoCreateOrConnectWithoutServicioInput[]
    upsert?: CobroConceptoUpsertWithWhereUniqueWithoutServicioInput | CobroConceptoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: CobroConceptoCreateManyServicioInputEnvelope
    set?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    disconnect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    delete?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    connect?: CobroConceptoWhereUniqueInput | CobroConceptoWhereUniqueInput[]
    update?: CobroConceptoUpdateWithWhereUniqueWithoutServicioInput | CobroConceptoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: CobroConceptoUpdateManyWithWhereWithoutServicioInput | CobroConceptoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
  }

  export type CobroCreateNestedOneWithoutMetodos_pagoInput = {
    create?: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    connectOrCreate?: CobroCreateOrConnectWithoutMetodos_pagoInput
    connect?: CobroWhereUniqueInput
  }

  export type EnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago
  }

  export type CobroUpdateOneRequiredWithoutMetodos_pagoNestedInput = {
    create?: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    connectOrCreate?: CobroCreateOrConnectWithoutMetodos_pagoInput
    upsert?: CobroUpsertWithoutMetodos_pagoInput
    connect?: CobroWhereUniqueInput
    update?: XOR<XOR<CobroUpdateToOneWithWhereWithoutMetodos_pagoInput, CobroUpdateWithoutMetodos_pagoInput>, CobroUncheckedUpdateWithoutMetodos_pagoInput>
  }

  export type ProductAllergenCreateNestedManyWithoutAllergenInput = {
    create?: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput> | ProductAllergenCreateWithoutAllergenInput[] | ProductAllergenUncheckedCreateWithoutAllergenInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutAllergenInput | ProductAllergenCreateOrConnectWithoutAllergenInput[]
    createMany?: ProductAllergenCreateManyAllergenInputEnvelope
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
  }

  export type ProductAllergenUncheckedCreateNestedManyWithoutAllergenInput = {
    create?: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput> | ProductAllergenCreateWithoutAllergenInput[] | ProductAllergenUncheckedCreateWithoutAllergenInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutAllergenInput | ProductAllergenCreateOrConnectWithoutAllergenInput[]
    createMany?: ProductAllergenCreateManyAllergenInputEnvelope
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
  }

  export type NullableEnumAlxoidTypeFieldUpdateOperationsInput = {
    set?: $Enums.AlxoidType | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProductAllergenUpdateManyWithoutAllergenNestedInput = {
    create?: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput> | ProductAllergenCreateWithoutAllergenInput[] | ProductAllergenUncheckedCreateWithoutAllergenInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutAllergenInput | ProductAllergenCreateOrConnectWithoutAllergenInput[]
    upsert?: ProductAllergenUpsertWithWhereUniqueWithoutAllergenInput | ProductAllergenUpsertWithWhereUniqueWithoutAllergenInput[]
    createMany?: ProductAllergenCreateManyAllergenInputEnvelope
    set?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    disconnect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    delete?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    update?: ProductAllergenUpdateWithWhereUniqueWithoutAllergenInput | ProductAllergenUpdateWithWhereUniqueWithoutAllergenInput[]
    updateMany?: ProductAllergenUpdateManyWithWhereWithoutAllergenInput | ProductAllergenUpdateManyWithWhereWithoutAllergenInput[]
    deleteMany?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
  }

  export type ProductAllergenUncheckedUpdateManyWithoutAllergenNestedInput = {
    create?: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput> | ProductAllergenCreateWithoutAllergenInput[] | ProductAllergenUncheckedCreateWithoutAllergenInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutAllergenInput | ProductAllergenCreateOrConnectWithoutAllergenInput[]
    upsert?: ProductAllergenUpsertWithWhereUniqueWithoutAllergenInput | ProductAllergenUpsertWithWhereUniqueWithoutAllergenInput[]
    createMany?: ProductAllergenCreateManyAllergenInputEnvelope
    set?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    disconnect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    delete?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    update?: ProductAllergenUpdateWithWhereUniqueWithoutAllergenInput | ProductAllergenUpdateWithWhereUniqueWithoutAllergenInput[]
    updateMany?: ProductAllergenUpdateManyWithWhereWithoutAllergenInput | ProductAllergenUpdateManyWithWhereWithoutAllergenInput[]
    deleteMany?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
  }

  export type SedeCreateNestedOneWithoutInventoryUsageInput = {
    create?: XOR<SedeCreateWithoutInventoryUsageInput, SedeUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: SedeCreateOrConnectWithoutInventoryUsageInput
    connect?: SedeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInventoryUsageInput = {
    create?: XOR<UserCreateWithoutInventoryUsageInput, UserUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryUsageInput
    connect?: UserWhereUniqueInput
  }

  export type PacienteCreateNestedOneWithoutInventoryUsageInput = {
    create?: XOR<PacienteCreateWithoutInventoryUsageInput, PacienteUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutInventoryUsageInput
    connect?: PacienteWhereUniqueInput
  }

  export type InventoryUsageDetailCreateNestedManyWithoutInventoryUsageInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput> | InventoryUsageDetailCreateWithoutInventoryUsageInput[] | InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput | InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput[]
    createMany?: InventoryUsageDetailCreateManyInventoryUsageInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type InventoryUsageDetailUncheckedCreateNestedManyWithoutInventoryUsageInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput> | InventoryUsageDetailCreateWithoutInventoryUsageInput[] | InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput | InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput[]
    createMany?: InventoryUsageDetailCreateManyInventoryUsageInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type EnumTipoTratamientoFieldUpdateOperationsInput = {
    set?: $Enums.TipoTratamiento
  }

  export type SedeUpdateOneRequiredWithoutInventoryUsageNestedInput = {
    create?: XOR<SedeCreateWithoutInventoryUsageInput, SedeUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: SedeCreateOrConnectWithoutInventoryUsageInput
    upsert?: SedeUpsertWithoutInventoryUsageInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutInventoryUsageInput, SedeUpdateWithoutInventoryUsageInput>, SedeUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type UserUpdateOneRequiredWithoutInventoryUsageNestedInput = {
    create?: XOR<UserCreateWithoutInventoryUsageInput, UserUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryUsageInput
    upsert?: UserUpsertWithoutInventoryUsageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInventoryUsageInput, UserUpdateWithoutInventoryUsageInput>, UserUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type PacienteUpdateOneWithoutInventoryUsageNestedInput = {
    create?: XOR<PacienteCreateWithoutInventoryUsageInput, PacienteUncheckedCreateWithoutInventoryUsageInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutInventoryUsageInput
    upsert?: PacienteUpsertWithoutInventoryUsageInput
    disconnect?: PacienteWhereInput | boolean
    delete?: PacienteWhereInput | boolean
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutInventoryUsageInput, PacienteUpdateWithoutInventoryUsageInput>, PacienteUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailUpdateManyWithoutInventoryUsageNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput> | InventoryUsageDetailCreateWithoutInventoryUsageInput[] | InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput | InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutInventoryUsageInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutInventoryUsageInput[]
    createMany?: InventoryUsageDetailCreateManyInventoryUsageInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutInventoryUsageInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutInventoryUsageInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutInventoryUsageInput | InventoryUsageDetailUpdateManyWithWhereWithoutInventoryUsageInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput> | InventoryUsageDetailCreateWithoutInventoryUsageInput[] | InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput | InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutInventoryUsageInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutInventoryUsageInput[]
    createMany?: InventoryUsageDetailCreateManyInventoryUsageInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutInventoryUsageInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutInventoryUsageInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutInventoryUsageInput | InventoryUsageDetailUpdateManyWithWhereWithoutInventoryUsageInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type InventoryUsageCreateNestedOneWithoutInventoryUsageDetailInput = {
    create?: XOR<InventoryUsageCreateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutInventoryUsageDetailInput
    connect?: InventoryUsageWhereUniqueInput
  }

  export type MovementCreateNestedOneWithoutInventoryUsageDetailInput = {
    create?: XOR<MovementCreateWithoutInventoryUsageDetailInput, MovementUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: MovementCreateOrConnectWithoutInventoryUsageDetailInput
    connect?: MovementWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutInventoryUsageDetailInput = {
    create?: XOR<ProductCreateWithoutInventoryUsageDetailInput, ProductUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutInventoryUsageDetailInput
    connect?: ProductWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InventoryUsageUpdateOneRequiredWithoutInventoryUsageDetailNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutInventoryUsageDetailInput
    upsert?: InventoryUsageUpsertWithoutInventoryUsageDetailInput
    connect?: InventoryUsageWhereUniqueInput
    update?: XOR<XOR<InventoryUsageUpdateToOneWithWhereWithoutInventoryUsageDetailInput, InventoryUsageUpdateWithoutInventoryUsageDetailInput>, InventoryUsageUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type MovementUpdateOneWithoutInventoryUsageDetailNestedInput = {
    create?: XOR<MovementCreateWithoutInventoryUsageDetailInput, MovementUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: MovementCreateOrConnectWithoutInventoryUsageDetailInput
    upsert?: MovementUpsertWithoutInventoryUsageDetailInput
    disconnect?: MovementWhereInput | boolean
    delete?: MovementWhereInput | boolean
    connect?: MovementWhereUniqueInput
    update?: XOR<XOR<MovementUpdateToOneWithWhereWithoutInventoryUsageDetailInput, MovementUpdateWithoutInventoryUsageDetailInput>, MovementUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type ProductUpdateOneRequiredWithoutInventoryUsageDetailNestedInput = {
    create?: XOR<ProductCreateWithoutInventoryUsageDetailInput, ProductUncheckedCreateWithoutInventoryUsageDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutInventoryUsageDetailInput
    upsert?: ProductUpsertWithoutInventoryUsageDetailInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutInventoryUsageDetailInput, ProductUpdateWithoutInventoryUsageDetailInput>, ProductUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type InventoryUsageDetailCreateNestedManyWithoutMovementInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput> | InventoryUsageDetailCreateWithoutMovementInput[] | InventoryUsageDetailUncheckedCreateWithoutMovementInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutMovementInput | InventoryUsageDetailCreateOrConnectWithoutMovementInput[]
    createMany?: InventoryUsageDetailCreateManyMovementInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type ProductCreateNestedOneWithoutMovementInput = {
    create?: XOR<ProductCreateWithoutMovementInput, ProductUncheckedCreateWithoutMovementInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMovementInput
    connect?: ProductWhereUniqueInput
  }

  export type SedeCreateNestedOneWithoutMovementInput = {
    create?: XOR<SedeCreateWithoutMovementInput, SedeUncheckedCreateWithoutMovementInput>
    connectOrCreate?: SedeCreateOrConnectWithoutMovementInput
    connect?: SedeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMovementInput = {
    create?: XOR<UserCreateWithoutMovementInput, UserUncheckedCreateWithoutMovementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMovementInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryUsageDetailUncheckedCreateNestedManyWithoutMovementInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput> | InventoryUsageDetailCreateWithoutMovementInput[] | InventoryUsageDetailUncheckedCreateWithoutMovementInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutMovementInput | InventoryUsageDetailCreateOrConnectWithoutMovementInput[]
    createMany?: InventoryUsageDetailCreateManyMovementInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type EnumMovementTypeFieldUpdateOperationsInput = {
    set?: $Enums.MovementType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type InventoryUsageDetailUpdateManyWithoutMovementNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput> | InventoryUsageDetailCreateWithoutMovementInput[] | InventoryUsageDetailUncheckedCreateWithoutMovementInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutMovementInput | InventoryUsageDetailCreateOrConnectWithoutMovementInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutMovementInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutMovementInput[]
    createMany?: InventoryUsageDetailCreateManyMovementInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutMovementInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutMovementInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutMovementInput | InventoryUsageDetailUpdateManyWithWhereWithoutMovementInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type ProductUpdateOneRequiredWithoutMovementNestedInput = {
    create?: XOR<ProductCreateWithoutMovementInput, ProductUncheckedCreateWithoutMovementInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMovementInput
    upsert?: ProductUpsertWithoutMovementInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutMovementInput, ProductUpdateWithoutMovementInput>, ProductUncheckedUpdateWithoutMovementInput>
  }

  export type SedeUpdateOneRequiredWithoutMovementNestedInput = {
    create?: XOR<SedeCreateWithoutMovementInput, SedeUncheckedCreateWithoutMovementInput>
    connectOrCreate?: SedeCreateOrConnectWithoutMovementInput
    upsert?: SedeUpsertWithoutMovementInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutMovementInput, SedeUpdateWithoutMovementInput>, SedeUncheckedUpdateWithoutMovementInput>
  }

  export type UserUpdateOneRequiredWithoutMovementNestedInput = {
    create?: XOR<UserCreateWithoutMovementInput, UserUncheckedCreateWithoutMovementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMovementInput
    upsert?: UserUpsertWithoutMovementInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMovementInput, UserUpdateWithoutMovementInput>, UserUncheckedUpdateWithoutMovementInput>
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutMovementNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput> | InventoryUsageDetailCreateWithoutMovementInput[] | InventoryUsageDetailUncheckedCreateWithoutMovementInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutMovementInput | InventoryUsageDetailCreateOrConnectWithoutMovementInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutMovementInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutMovementInput[]
    createMany?: InventoryUsageDetailCreateManyMovementInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutMovementInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutMovementInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutMovementInput | InventoryUsageDetailUpdateManyWithWhereWithoutMovementInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type InventoryUsageDetailCreateNestedManyWithoutProductInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput> | InventoryUsageDetailCreateWithoutProductInput[] | InventoryUsageDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutProductInput | InventoryUsageDetailCreateOrConnectWithoutProductInput[]
    createMany?: InventoryUsageDetailCreateManyProductInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type MovementCreateNestedManyWithoutProductInput = {
    create?: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput> | MovementCreateWithoutProductInput[] | MovementUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutProductInput | MovementCreateOrConnectWithoutProductInput[]
    createMany?: MovementCreateManyProductInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type ProductAllergenCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput> | ProductAllergenCreateWithoutProductInput[] | ProductAllergenUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutProductInput | ProductAllergenCreateOrConnectWithoutProductInput[]
    createMany?: ProductAllergenCreateManyProductInputEnvelope
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
  }

  export type ProductExpirationCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput> | ProductExpirationCreateWithoutProductInput[] | ProductExpirationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutProductInput | ProductExpirationCreateOrConnectWithoutProductInput[]
    createMany?: ProductExpirationCreateManyProductInputEnvelope
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
  }

  export type StockBySedeCreateNestedManyWithoutProductInput = {
    create?: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput> | StockBySedeCreateWithoutProductInput[] | StockBySedeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutProductInput | StockBySedeCreateOrConnectWithoutProductInput[]
    createMany?: StockBySedeCreateManyProductInputEnvelope
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
  }

  export type InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput> | InventoryUsageDetailCreateWithoutProductInput[] | InventoryUsageDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutProductInput | InventoryUsageDetailCreateOrConnectWithoutProductInput[]
    createMany?: InventoryUsageDetailCreateManyProductInputEnvelope
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
  }

  export type MovementUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput> | MovementCreateWithoutProductInput[] | MovementUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutProductInput | MovementCreateOrConnectWithoutProductInput[]
    createMany?: MovementCreateManyProductInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type ProductAllergenUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput> | ProductAllergenCreateWithoutProductInput[] | ProductAllergenUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutProductInput | ProductAllergenCreateOrConnectWithoutProductInput[]
    createMany?: ProductAllergenCreateManyProductInputEnvelope
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
  }

  export type ProductExpirationUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput> | ProductExpirationCreateWithoutProductInput[] | ProductExpirationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutProductInput | ProductExpirationCreateOrConnectWithoutProductInput[]
    createMany?: ProductExpirationCreateManyProductInputEnvelope
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
  }

  export type StockBySedeUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput> | StockBySedeCreateWithoutProductInput[] | StockBySedeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutProductInput | StockBySedeCreateOrConnectWithoutProductInput[]
    createMany?: StockBySedeCreateManyProductInputEnvelope
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
  }

  export type EnumProductTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProductType
  }

  export type EnumProductUnitFieldUpdateOperationsInput = {
    set?: $Enums.ProductUnit
  }

  export type InventoryUsageDetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput> | InventoryUsageDetailCreateWithoutProductInput[] | InventoryUsageDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutProductInput | InventoryUsageDetailCreateOrConnectWithoutProductInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutProductInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: InventoryUsageDetailCreateManyProductInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutProductInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutProductInput | InventoryUsageDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type MovementUpdateManyWithoutProductNestedInput = {
    create?: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput> | MovementCreateWithoutProductInput[] | MovementUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutProductInput | MovementCreateOrConnectWithoutProductInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutProductInput | MovementUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MovementCreateManyProductInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutProductInput | MovementUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutProductInput | MovementUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type ProductAllergenUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput> | ProductAllergenCreateWithoutProductInput[] | ProductAllergenUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutProductInput | ProductAllergenCreateOrConnectWithoutProductInput[]
    upsert?: ProductAllergenUpsertWithWhereUniqueWithoutProductInput | ProductAllergenUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductAllergenCreateManyProductInputEnvelope
    set?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    disconnect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    delete?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    update?: ProductAllergenUpdateWithWhereUniqueWithoutProductInput | ProductAllergenUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductAllergenUpdateManyWithWhereWithoutProductInput | ProductAllergenUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
  }

  export type ProductExpirationUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput> | ProductExpirationCreateWithoutProductInput[] | ProductExpirationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutProductInput | ProductExpirationCreateOrConnectWithoutProductInput[]
    upsert?: ProductExpirationUpsertWithWhereUniqueWithoutProductInput | ProductExpirationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductExpirationCreateManyProductInputEnvelope
    set?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    disconnect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    delete?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    update?: ProductExpirationUpdateWithWhereUniqueWithoutProductInput | ProductExpirationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductExpirationUpdateManyWithWhereWithoutProductInput | ProductExpirationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
  }

  export type StockBySedeUpdateManyWithoutProductNestedInput = {
    create?: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput> | StockBySedeCreateWithoutProductInput[] | StockBySedeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutProductInput | StockBySedeCreateOrConnectWithoutProductInput[]
    upsert?: StockBySedeUpsertWithWhereUniqueWithoutProductInput | StockBySedeUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StockBySedeCreateManyProductInputEnvelope
    set?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    disconnect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    delete?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    update?: StockBySedeUpdateWithWhereUniqueWithoutProductInput | StockBySedeUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StockBySedeUpdateManyWithWhereWithoutProductInput | StockBySedeUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput> | InventoryUsageDetailCreateWithoutProductInput[] | InventoryUsageDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InventoryUsageDetailCreateOrConnectWithoutProductInput | InventoryUsageDetailCreateOrConnectWithoutProductInput[]
    upsert?: InventoryUsageDetailUpsertWithWhereUniqueWithoutProductInput | InventoryUsageDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: InventoryUsageDetailCreateManyProductInputEnvelope
    set?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    disconnect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    delete?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    connect?: InventoryUsageDetailWhereUniqueInput | InventoryUsageDetailWhereUniqueInput[]
    update?: InventoryUsageDetailUpdateWithWhereUniqueWithoutProductInput | InventoryUsageDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: InventoryUsageDetailUpdateManyWithWhereWithoutProductInput | InventoryUsageDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
  }

  export type MovementUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput> | MovementCreateWithoutProductInput[] | MovementUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutProductInput | MovementCreateOrConnectWithoutProductInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutProductInput | MovementUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MovementCreateManyProductInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutProductInput | MovementUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutProductInput | MovementUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type ProductAllergenUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput> | ProductAllergenCreateWithoutProductInput[] | ProductAllergenUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAllergenCreateOrConnectWithoutProductInput | ProductAllergenCreateOrConnectWithoutProductInput[]
    upsert?: ProductAllergenUpsertWithWhereUniqueWithoutProductInput | ProductAllergenUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductAllergenCreateManyProductInputEnvelope
    set?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    disconnect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    delete?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    connect?: ProductAllergenWhereUniqueInput | ProductAllergenWhereUniqueInput[]
    update?: ProductAllergenUpdateWithWhereUniqueWithoutProductInput | ProductAllergenUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductAllergenUpdateManyWithWhereWithoutProductInput | ProductAllergenUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
  }

  export type ProductExpirationUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput> | ProductExpirationCreateWithoutProductInput[] | ProductExpirationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutProductInput | ProductExpirationCreateOrConnectWithoutProductInput[]
    upsert?: ProductExpirationUpsertWithWhereUniqueWithoutProductInput | ProductExpirationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductExpirationCreateManyProductInputEnvelope
    set?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    disconnect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    delete?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    update?: ProductExpirationUpdateWithWhereUniqueWithoutProductInput | ProductExpirationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductExpirationUpdateManyWithWhereWithoutProductInput | ProductExpirationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
  }

  export type StockBySedeUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput> | StockBySedeCreateWithoutProductInput[] | StockBySedeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutProductInput | StockBySedeCreateOrConnectWithoutProductInput[]
    upsert?: StockBySedeUpsertWithWhereUniqueWithoutProductInput | StockBySedeUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StockBySedeCreateManyProductInputEnvelope
    set?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    disconnect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    delete?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    update?: StockBySedeUpdateWithWhereUniqueWithoutProductInput | StockBySedeUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StockBySedeUpdateManyWithWhereWithoutProductInput | StockBySedeUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
  }

  export type AllergenCreateNestedOneWithoutProductAllergenInput = {
    create?: XOR<AllergenCreateWithoutProductAllergenInput, AllergenUncheckedCreateWithoutProductAllergenInput>
    connectOrCreate?: AllergenCreateOrConnectWithoutProductAllergenInput
    connect?: AllergenWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductAllergenInput = {
    create?: XOR<ProductCreateWithoutProductAllergenInput, ProductUncheckedCreateWithoutProductAllergenInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductAllergenInput
    connect?: ProductWhereUniqueInput
  }

  export type AllergenUpdateOneRequiredWithoutProductAllergenNestedInput = {
    create?: XOR<AllergenCreateWithoutProductAllergenInput, AllergenUncheckedCreateWithoutProductAllergenInput>
    connectOrCreate?: AllergenCreateOrConnectWithoutProductAllergenInput
    upsert?: AllergenUpsertWithoutProductAllergenInput
    connect?: AllergenWhereUniqueInput
    update?: XOR<XOR<AllergenUpdateToOneWithWhereWithoutProductAllergenInput, AllergenUpdateWithoutProductAllergenInput>, AllergenUncheckedUpdateWithoutProductAllergenInput>
  }

  export type ProductUpdateOneRequiredWithoutProductAllergenNestedInput = {
    create?: XOR<ProductCreateWithoutProductAllergenInput, ProductUncheckedCreateWithoutProductAllergenInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductAllergenInput
    upsert?: ProductUpsertWithoutProductAllergenInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductAllergenInput, ProductUpdateWithoutProductAllergenInput>, ProductUncheckedUpdateWithoutProductAllergenInput>
  }

  export type ProductCreateNestedOneWithoutProductExpirationInput = {
    create?: XOR<ProductCreateWithoutProductExpirationInput, ProductUncheckedCreateWithoutProductExpirationInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductExpirationInput
    connect?: ProductWhereUniqueInput
  }

  export type SedeCreateNestedOneWithoutProductExpirationInput = {
    create?: XOR<SedeCreateWithoutProductExpirationInput, SedeUncheckedCreateWithoutProductExpirationInput>
    connectOrCreate?: SedeCreateOrConnectWithoutProductExpirationInput
    connect?: SedeWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProductExpirationNestedInput = {
    create?: XOR<ProductCreateWithoutProductExpirationInput, ProductUncheckedCreateWithoutProductExpirationInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductExpirationInput
    upsert?: ProductUpsertWithoutProductExpirationInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductExpirationInput, ProductUpdateWithoutProductExpirationInput>, ProductUncheckedUpdateWithoutProductExpirationInput>
  }

  export type SedeUpdateOneRequiredWithoutProductExpirationNestedInput = {
    create?: XOR<SedeCreateWithoutProductExpirationInput, SedeUncheckedCreateWithoutProductExpirationInput>
    connectOrCreate?: SedeCreateOrConnectWithoutProductExpirationInput
    upsert?: SedeUpsertWithoutProductExpirationInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutProductExpirationInput, SedeUpdateWithoutProductExpirationInput>, SedeUncheckedUpdateWithoutProductExpirationInput>
  }

  export type InventoryUsageCreateNestedManyWithoutSedeInput = {
    create?: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput> | InventoryUsageCreateWithoutSedeInput[] | InventoryUsageUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutSedeInput | InventoryUsageCreateOrConnectWithoutSedeInput[]
    createMany?: InventoryUsageCreateManySedeInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type MovementCreateNestedManyWithoutSedeInput = {
    create?: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput> | MovementCreateWithoutSedeInput[] | MovementUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSedeInput | MovementCreateOrConnectWithoutSedeInput[]
    createMany?: MovementCreateManySedeInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type ProductExpirationCreateNestedManyWithoutSedeInput = {
    create?: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput> | ProductExpirationCreateWithoutSedeInput[] | ProductExpirationUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutSedeInput | ProductExpirationCreateOrConnectWithoutSedeInput[]
    createMany?: ProductExpirationCreateManySedeInputEnvelope
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
  }

  export type StockBySedeCreateNestedManyWithoutSedeInput = {
    create?: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput> | StockBySedeCreateWithoutSedeInput[] | StockBySedeUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutSedeInput | StockBySedeCreateOrConnectWithoutSedeInput[]
    createMany?: StockBySedeCreateManySedeInputEnvelope
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutSedeInput = {
    create?: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput> | UserCreateWithoutSedeInput[] | UserUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSedeInput | UserCreateOrConnectWithoutSedeInput[]
    createMany?: UserCreateManySedeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type InventoryUsageUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput> | InventoryUsageCreateWithoutSedeInput[] | InventoryUsageUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutSedeInput | InventoryUsageCreateOrConnectWithoutSedeInput[]
    createMany?: InventoryUsageCreateManySedeInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type MovementUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput> | MovementCreateWithoutSedeInput[] | MovementUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSedeInput | MovementCreateOrConnectWithoutSedeInput[]
    createMany?: MovementCreateManySedeInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type ProductExpirationUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput> | ProductExpirationCreateWithoutSedeInput[] | ProductExpirationUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutSedeInput | ProductExpirationCreateOrConnectWithoutSedeInput[]
    createMany?: ProductExpirationCreateManySedeInputEnvelope
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
  }

  export type StockBySedeUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput> | StockBySedeCreateWithoutSedeInput[] | StockBySedeUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutSedeInput | StockBySedeCreateOrConnectWithoutSedeInput[]
    createMany?: StockBySedeCreateManySedeInputEnvelope
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput> | UserCreateWithoutSedeInput[] | UserUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSedeInput | UserCreateOrConnectWithoutSedeInput[]
    createMany?: UserCreateManySedeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type InventoryUsageUpdateManyWithoutSedeNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput> | InventoryUsageCreateWithoutSedeInput[] | InventoryUsageUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutSedeInput | InventoryUsageCreateOrConnectWithoutSedeInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutSedeInput | InventoryUsageUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: InventoryUsageCreateManySedeInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutSedeInput | InventoryUsageUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutSedeInput | InventoryUsageUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type MovementUpdateManyWithoutSedeNestedInput = {
    create?: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput> | MovementCreateWithoutSedeInput[] | MovementUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSedeInput | MovementCreateOrConnectWithoutSedeInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutSedeInput | MovementUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: MovementCreateManySedeInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutSedeInput | MovementUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutSedeInput | MovementUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type ProductExpirationUpdateManyWithoutSedeNestedInput = {
    create?: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput> | ProductExpirationCreateWithoutSedeInput[] | ProductExpirationUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutSedeInput | ProductExpirationCreateOrConnectWithoutSedeInput[]
    upsert?: ProductExpirationUpsertWithWhereUniqueWithoutSedeInput | ProductExpirationUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: ProductExpirationCreateManySedeInputEnvelope
    set?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    disconnect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    delete?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    update?: ProductExpirationUpdateWithWhereUniqueWithoutSedeInput | ProductExpirationUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: ProductExpirationUpdateManyWithWhereWithoutSedeInput | ProductExpirationUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
  }

  export type StockBySedeUpdateManyWithoutSedeNestedInput = {
    create?: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput> | StockBySedeCreateWithoutSedeInput[] | StockBySedeUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutSedeInput | StockBySedeCreateOrConnectWithoutSedeInput[]
    upsert?: StockBySedeUpsertWithWhereUniqueWithoutSedeInput | StockBySedeUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: StockBySedeCreateManySedeInputEnvelope
    set?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    disconnect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    delete?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    update?: StockBySedeUpdateWithWhereUniqueWithoutSedeInput | StockBySedeUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: StockBySedeUpdateManyWithWhereWithoutSedeInput | StockBySedeUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
  }

  export type UserUpdateManyWithoutSedeNestedInput = {
    create?: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput> | UserCreateWithoutSedeInput[] | UserUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSedeInput | UserCreateOrConnectWithoutSedeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSedeInput | UserUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: UserCreateManySedeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSedeInput | UserUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSedeInput | UserUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput> | InventoryUsageCreateWithoutSedeInput[] | InventoryUsageUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutSedeInput | InventoryUsageCreateOrConnectWithoutSedeInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutSedeInput | InventoryUsageUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: InventoryUsageCreateManySedeInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutSedeInput | InventoryUsageUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutSedeInput | InventoryUsageUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type MovementUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput> | MovementCreateWithoutSedeInput[] | MovementUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSedeInput | MovementCreateOrConnectWithoutSedeInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutSedeInput | MovementUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: MovementCreateManySedeInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutSedeInput | MovementUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutSedeInput | MovementUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput> | ProductExpirationCreateWithoutSedeInput[] | ProductExpirationUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ProductExpirationCreateOrConnectWithoutSedeInput | ProductExpirationCreateOrConnectWithoutSedeInput[]
    upsert?: ProductExpirationUpsertWithWhereUniqueWithoutSedeInput | ProductExpirationUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: ProductExpirationCreateManySedeInputEnvelope
    set?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    disconnect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    delete?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    connect?: ProductExpirationWhereUniqueInput | ProductExpirationWhereUniqueInput[]
    update?: ProductExpirationUpdateWithWhereUniqueWithoutSedeInput | ProductExpirationUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: ProductExpirationUpdateManyWithWhereWithoutSedeInput | ProductExpirationUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
  }

  export type StockBySedeUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput> | StockBySedeCreateWithoutSedeInput[] | StockBySedeUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: StockBySedeCreateOrConnectWithoutSedeInput | StockBySedeCreateOrConnectWithoutSedeInput[]
    upsert?: StockBySedeUpsertWithWhereUniqueWithoutSedeInput | StockBySedeUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: StockBySedeCreateManySedeInputEnvelope
    set?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    disconnect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    delete?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    connect?: StockBySedeWhereUniqueInput | StockBySedeWhereUniqueInput[]
    update?: StockBySedeUpdateWithWhereUniqueWithoutSedeInput | StockBySedeUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: StockBySedeUpdateManyWithWhereWithoutSedeInput | StockBySedeUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput> | UserCreateWithoutSedeInput[] | UserUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSedeInput | UserCreateOrConnectWithoutSedeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSedeInput | UserUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: UserCreateManySedeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSedeInput | UserUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSedeInput | UserUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutStockBySedeInput = {
    create?: XOR<ProductCreateWithoutStockBySedeInput, ProductUncheckedCreateWithoutStockBySedeInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockBySedeInput
    connect?: ProductWhereUniqueInput
  }

  export type SedeCreateNestedOneWithoutStockBySedeInput = {
    create?: XOR<SedeCreateWithoutStockBySedeInput, SedeUncheckedCreateWithoutStockBySedeInput>
    connectOrCreate?: SedeCreateOrConnectWithoutStockBySedeInput
    connect?: SedeWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutStockBySedeNestedInput = {
    create?: XOR<ProductCreateWithoutStockBySedeInput, ProductUncheckedCreateWithoutStockBySedeInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockBySedeInput
    upsert?: ProductUpsertWithoutStockBySedeInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutStockBySedeInput, ProductUpdateWithoutStockBySedeInput>, ProductUncheckedUpdateWithoutStockBySedeInput>
  }

  export type SedeUpdateOneRequiredWithoutStockBySedeNestedInput = {
    create?: XOR<SedeCreateWithoutStockBySedeInput, SedeUncheckedCreateWithoutStockBySedeInput>
    connectOrCreate?: SedeCreateOrConnectWithoutStockBySedeInput
    upsert?: SedeUpsertWithoutStockBySedeInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutStockBySedeInput, SedeUpdateWithoutStockBySedeInput>, SedeUncheckedUpdateWithoutStockBySedeInput>
  }

  export type InventoryUsageCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput> | InventoryUsageCreateWithoutUserInput[] | InventoryUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutUserInput | InventoryUsageCreateOrConnectWithoutUserInput[]
    createMany?: InventoryUsageCreateManyUserInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type MovementCreateNestedManyWithoutUserInput = {
    create?: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput> | MovementCreateWithoutUserInput[] | MovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutUserInput | MovementCreateOrConnectWithoutUserInput[]
    createMany?: MovementCreateManyUserInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type SedeCreateNestedOneWithoutUserInput = {
    create?: XOR<SedeCreateWithoutUserInput, SedeUncheckedCreateWithoutUserInput>
    connectOrCreate?: SedeCreateOrConnectWithoutUserInput
    connect?: SedeWhereUniqueInput
  }

  export type InventoryUsageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput> | InventoryUsageCreateWithoutUserInput[] | InventoryUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutUserInput | InventoryUsageCreateOrConnectWithoutUserInput[]
    createMany?: InventoryUsageCreateManyUserInputEnvelope
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
  }

  export type MovementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput> | MovementCreateWithoutUserInput[] | MovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutUserInput | MovementCreateOrConnectWithoutUserInput[]
    createMany?: MovementCreateManyUserInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type InventoryUsageUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput> | InventoryUsageCreateWithoutUserInput[] | InventoryUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutUserInput | InventoryUsageCreateOrConnectWithoutUserInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutUserInput | InventoryUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryUsageCreateManyUserInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutUserInput | InventoryUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutUserInput | InventoryUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type MovementUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput> | MovementCreateWithoutUserInput[] | MovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutUserInput | MovementCreateOrConnectWithoutUserInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutUserInput | MovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovementCreateManyUserInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutUserInput | MovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutUserInput | MovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type SedeUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<SedeCreateWithoutUserInput, SedeUncheckedCreateWithoutUserInput>
    connectOrCreate?: SedeCreateOrConnectWithoutUserInput
    upsert?: SedeUpsertWithoutUserInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutUserInput, SedeUpdateWithoutUserInput>, SedeUncheckedUpdateWithoutUserInput>
  }

  export type InventoryUsageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput> | InventoryUsageCreateWithoutUserInput[] | InventoryUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryUsageCreateOrConnectWithoutUserInput | InventoryUsageCreateOrConnectWithoutUserInput[]
    upsert?: InventoryUsageUpsertWithWhereUniqueWithoutUserInput | InventoryUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryUsageCreateManyUserInputEnvelope
    set?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    disconnect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    delete?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    connect?: InventoryUsageWhereUniqueInput | InventoryUsageWhereUniqueInput[]
    update?: InventoryUsageUpdateWithWhereUniqueWithoutUserInput | InventoryUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryUsageUpdateManyWithWhereWithoutUserInput | InventoryUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
  }

  export type MovementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput> | MovementCreateWithoutUserInput[] | MovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutUserInput | MovementCreateOrConnectWithoutUserInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutUserInput | MovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovementCreateManyUserInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutUserInput | MovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutUserInput | MovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type ConsultorioCreateNestedOneWithoutCitasInput = {
    create?: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutCitasInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type PacienteCreateNestedOneWithoutCitasInput = {
    create?: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCitasInput
    connect?: PacienteWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutCitasInput = {
    create?: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCitasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumEstadoCitaFieldUpdateOperationsInput = {
    set?: $Enums.EstadoCita
  }

  export type ConsultorioUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutCitasInput
    upsert?: ConsultorioUpsertWithoutCitasInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutCitasInput, ConsultorioUpdateWithoutCitasInput>, ConsultorioUncheckedUpdateWithoutCitasInput>
  }

  export type PacienteUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutCitasInput
    upsert?: PacienteUpsertWithoutCitasInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutCitasInput, PacienteUpdateWithoutCitasInput>, PacienteUncheckedUpdateWithoutCitasInput>
  }

  export type UsuarioUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCitasInput
    upsert?: UsuarioUpsertWithoutCitasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCitasInput, UsuarioUpdateWithoutCitasInput>, UsuarioUncheckedUpdateWithoutCitasInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[]
    notIn?: $Enums.Rol[]
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type NestedEnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[]
    notIn?: $Enums.Rol[]
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumEstadoCobroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[]
    notIn?: $Enums.EstadoCobro[]
    not?: NestedEnumEstadoCobroFilter<$PrismaModel> | $Enums.EstadoCobro
  }

  export type NestedEnumMetodoPagoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | null
    notIn?: $Enums.MetodoPago[] | null
    not?: NestedEnumMetodoPagoNullableFilter<$PrismaModel> | $Enums.MetodoPago | null
  }

  export type NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCobro | EnumEstadoCobroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCobro[]
    notIn?: $Enums.EstadoCobro[]
    not?: NestedEnumEstadoCobroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCobro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCobroFilter<$PrismaModel>
    _max?: NestedEnumEstadoCobroFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel> | null
    in?: $Enums.MetodoPago[] | null
    notIn?: $Enums.MetodoPago[] | null
    not?: NestedEnumMetodoPagoNullableWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[]
    notIn?: $Enums.TipoCambio[]
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }

  export type NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[]
    notIn?: $Enums.TipoCambio[]
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type NestedEnumAlxoidTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AlxoidType | EnumAlxoidTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AlxoidType[] | null
    notIn?: $Enums.AlxoidType[] | null
    not?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel> | $Enums.AlxoidType | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAlxoidTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlxoidType | EnumAlxoidTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AlxoidType[] | null
    notIn?: $Enums.AlxoidType[] | null
    not?: NestedEnumAlxoidTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AlxoidType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAlxoidTypeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTipoTratamientoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoTratamiento | EnumTipoTratamientoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoTratamiento[]
    notIn?: $Enums.TipoTratamiento[]
    not?: NestedEnumTipoTratamientoFilter<$PrismaModel> | $Enums.TipoTratamiento
  }

  export type NestedEnumTipoTratamientoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoTratamiento | EnumTipoTratamientoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoTratamiento[]
    notIn?: $Enums.TipoTratamiento[]
    not?: NestedEnumTipoTratamientoWithAggregatesFilter<$PrismaModel> | $Enums.TipoTratamiento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoTratamientoFilter<$PrismaModel>
    _max?: NestedEnumTipoTratamientoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMovementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementType | EnumMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MovementType[]
    notIn?: $Enums.MovementType[]
    not?: NestedEnumMovementTypeFilter<$PrismaModel> | $Enums.MovementType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumMovementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementType | EnumMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MovementType[]
    notIn?: $Enums.MovementType[]
    not?: NestedEnumMovementTypeWithAggregatesFilter<$PrismaModel> | $Enums.MovementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMovementTypeFilter<$PrismaModel>
    _max?: NestedEnumMovementTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[]
    notIn?: $Enums.ProductType[]
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type NestedEnumProductUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductUnit | EnumProductUnitFieldRefInput<$PrismaModel>
    in?: $Enums.ProductUnit[]
    notIn?: $Enums.ProductUnit[]
    not?: NestedEnumProductUnitFilter<$PrismaModel> | $Enums.ProductUnit
  }

  export type NestedEnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[]
    notIn?: $Enums.ProductType[]
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type NestedEnumProductUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductUnit | EnumProductUnitFieldRefInput<$PrismaModel>
    in?: $Enums.ProductUnit[]
    notIn?: $Enums.ProductUnit[]
    not?: NestedEnumProductUnitWithAggregatesFilter<$PrismaModel> | $Enums.ProductUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductUnitFilter<$PrismaModel>
    _max?: NestedEnumProductUnitFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumEstadoCitaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[]
    notIn?: $Enums.EstadoCita[]
    not?: NestedEnumEstadoCitaFilter<$PrismaModel> | $Enums.EstadoCita
  }

  export type NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCita | EnumEstadoCitaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCita[]
    notIn?: $Enums.EstadoCita[]
    not?: NestedEnumEstadoCitaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCita
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoCitaFilter<$PrismaModel>
    _max?: NestedEnumEstadoCitaFilter<$PrismaModel>
  }

  export type citasCreateWithoutPacientesInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
    consultorios: ConsultorioCreateNestedOneWithoutCitasInput
    usuarios: UsuarioCreateNestedOneWithoutCitasInput
  }

  export type citasUncheckedCreateWithoutPacientesInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    usuario_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type citasCreateOrConnectWithoutPacientesInput = {
    where: citasWhereUniqueInput
    create: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput>
  }

  export type citasCreateManyPacientesInputEnvelope = {
    data: citasCreateManyPacientesInput | citasCreateManyPacientesInput[]
  }

  export type CobroCreateWithoutPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput>
  }

  export type CobroCreateManyPacienteInputEnvelope = {
    data: CobroCreateManyPacienteInput | CobroCreateManyPacienteInput[]
  }

  export type InventoryUsageCreateWithoutPacienteInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutInventoryUsageInput
    User: UserCreateNestedOneWithoutInventoryUsageInput
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageUncheckedCreateWithoutPacienteInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    userId: string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageCreateOrConnectWithoutPacienteInput = {
    where: InventoryUsageWhereUniqueInput
    create: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput>
  }

  export type InventoryUsageCreateManyPacienteInputEnvelope = {
    data: InventoryUsageCreateManyPacienteInput | InventoryUsageCreateManyPacienteInput[]
  }

  export type citasUpsertWithWhereUniqueWithoutPacientesInput = {
    where: citasWhereUniqueInput
    update: XOR<citasUpdateWithoutPacientesInput, citasUncheckedUpdateWithoutPacientesInput>
    create: XOR<citasCreateWithoutPacientesInput, citasUncheckedCreateWithoutPacientesInput>
  }

  export type citasUpdateWithWhereUniqueWithoutPacientesInput = {
    where: citasWhereUniqueInput
    data: XOR<citasUpdateWithoutPacientesInput, citasUncheckedUpdateWithoutPacientesInput>
  }

  export type citasUpdateManyWithWhereWithoutPacientesInput = {
    where: citasScalarWhereInput
    data: XOR<citasUpdateManyMutationInput, citasUncheckedUpdateManyWithoutPacientesInput>
  }

  export type citasScalarWhereInput = {
    AND?: citasScalarWhereInput | citasScalarWhereInput[]
    OR?: citasScalarWhereInput[]
    NOT?: citasScalarWhereInput | citasScalarWhereInput[]
    id?: StringFilter<"citas"> | string
    descripcion?: StringNullableFilter<"citas"> | string | null
    estado?: EnumEstadoCitaFilter<"citas"> | $Enums.EstadoCita
    paciente_id?: StringFilter<"citas"> | string
    usuario_id?: StringFilter<"citas"> | string
    consultorio_id?: StringFilter<"citas"> | string
    created_at?: DateTimeFilter<"citas"> | Date | string
    updated_at?: DateTimeFilter<"citas"> | Date | string
    color?: StringNullableFilter<"citas"> | string | null
    fecha_fin?: DateTimeFilter<"citas"> | Date | string
    fecha_inicio?: DateTimeFilter<"citas"> | Date | string
  }

  export type CobroUpsertWithWhereUniqueWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    update: XOR<CobroUpdateWithoutPacienteInput, CobroUncheckedUpdateWithoutPacienteInput>
    create: XOR<CobroCreateWithoutPacienteInput, CobroUncheckedCreateWithoutPacienteInput>
  }

  export type CobroUpdateWithWhereUniqueWithoutPacienteInput = {
    where: CobroWhereUniqueInput
    data: XOR<CobroUpdateWithoutPacienteInput, CobroUncheckedUpdateWithoutPacienteInput>
  }

  export type CobroUpdateManyWithWhereWithoutPacienteInput = {
    where: CobroScalarWhereInput
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyWithoutPacienteInput>
  }

  export type CobroScalarWhereInput = {
    AND?: CobroScalarWhereInput | CobroScalarWhereInput[]
    OR?: CobroScalarWhereInput[]
    NOT?: CobroScalarWhereInput | CobroScalarWhereInput[]
    id?: StringFilter<"Cobro"> | string
    fecha_cobro?: DateTimeFilter<"Cobro"> | Date | string
    monto_total?: FloatFilter<"Cobro"> | number
    notas?: StringNullableFilter<"Cobro"> | string | null
    created_at?: DateTimeFilter<"Cobro"> | Date | string
    updated_at?: DateTimeFilter<"Cobro"> | Date | string
    paciente_id?: StringFilter<"Cobro"> | string
    usuario_id?: StringFilter<"Cobro"> | string
    estado?: EnumEstadoCobroFilter<"Cobro"> | $Enums.EstadoCobro
    metodo_pago?: EnumMetodoPagoNullableFilter<"Cobro"> | $Enums.MetodoPago | null
  }

  export type InventoryUsageUpsertWithWhereUniqueWithoutPacienteInput = {
    where: InventoryUsageWhereUniqueInput
    update: XOR<InventoryUsageUpdateWithoutPacienteInput, InventoryUsageUncheckedUpdateWithoutPacienteInput>
    create: XOR<InventoryUsageCreateWithoutPacienteInput, InventoryUsageUncheckedCreateWithoutPacienteInput>
  }

  export type InventoryUsageUpdateWithWhereUniqueWithoutPacienteInput = {
    where: InventoryUsageWhereUniqueInput
    data: XOR<InventoryUsageUpdateWithoutPacienteInput, InventoryUsageUncheckedUpdateWithoutPacienteInput>
  }

  export type InventoryUsageUpdateManyWithWhereWithoutPacienteInput = {
    where: InventoryUsageScalarWhereInput
    data: XOR<InventoryUsageUpdateManyMutationInput, InventoryUsageUncheckedUpdateManyWithoutPacienteInput>
  }

  export type InventoryUsageScalarWhereInput = {
    AND?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
    OR?: InventoryUsageScalarWhereInput[]
    NOT?: InventoryUsageScalarWhereInput | InventoryUsageScalarWhereInput[]
    id?: StringFilter<"InventoryUsage"> | string
    nombrePaciente?: StringFilter<"InventoryUsage"> | string
    pacienteId?: StringNullableFilter<"InventoryUsage"> | string | null
    tipoTratamiento?: EnumTipoTratamientoFilter<"InventoryUsage"> | $Enums.TipoTratamiento
    observaciones?: StringNullableFilter<"InventoryUsage"> | string | null
    tuvoReaccion?: BoolFilter<"InventoryUsage"> | boolean
    descripcionReaccion?: StringNullableFilter<"InventoryUsage"> | string | null
    createdAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    sedeId?: StringFilter<"InventoryUsage"> | string
    updatedAt?: DateTimeFilter<"InventoryUsage"> | Date | string
    userId?: StringFilter<"InventoryUsage"> | string
  }

  export type ConsultorioCreateWithoutUsuariosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutUsuariosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasUncheckedCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutUsuariosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutUsuariosInput, ConsultorioUncheckedCreateWithoutUsuariosInput>
  }

  export type citasCreateWithoutUsuariosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
    consultorios: ConsultorioCreateNestedOneWithoutCitasInput
    pacientes: PacienteCreateNestedOneWithoutCitasInput
  }

  export type citasUncheckedCreateWithoutUsuariosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type citasCreateOrConnectWithoutUsuariosInput = {
    where: citasWhereUniqueInput
    create: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput>
  }

  export type citasCreateManyUsuariosInputEnvelope = {
    data: citasCreateManyUsuariosInput | citasCreateManyUsuariosInput[]
  }

  export type CobroCreateWithoutUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput>
  }

  export type CobroCreateManyUsuarioInputEnvelope = {
    data: CobroCreateManyUsuarioInput | CobroCreateManyUsuarioInput[]
  }

  export type HistorialCobroCreateWithoutUsuarioInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    cobro: CobroCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateWithoutUsuarioInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
  }

  export type HistorialCobroCreateOrConnectWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    create: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialCobroCreateManyUsuarioInputEnvelope = {
    data: HistorialCobroCreateManyUsuarioInput | HistorialCobroCreateManyUsuarioInput[]
  }

  export type ConsultorioUpsertWithoutUsuariosInput = {
    update: XOR<ConsultorioUpdateWithoutUsuariosInput, ConsultorioUncheckedUpdateWithoutUsuariosInput>
    create: XOR<ConsultorioCreateWithoutUsuariosInput, ConsultorioUncheckedCreateWithoutUsuariosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutUsuariosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutUsuariosInput, ConsultorioUncheckedUpdateWithoutUsuariosInput>
  }

  export type ConsultorioUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUncheckedUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type citasUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: citasWhereUniqueInput
    update: XOR<citasUpdateWithoutUsuariosInput, citasUncheckedUpdateWithoutUsuariosInput>
    create: XOR<citasCreateWithoutUsuariosInput, citasUncheckedCreateWithoutUsuariosInput>
  }

  export type citasUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: citasWhereUniqueInput
    data: XOR<citasUpdateWithoutUsuariosInput, citasUncheckedUpdateWithoutUsuariosInput>
  }

  export type citasUpdateManyWithWhereWithoutUsuariosInput = {
    where: citasScalarWhereInput
    data: XOR<citasUpdateManyMutationInput, citasUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type CobroUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    update: XOR<CobroUpdateWithoutUsuarioInput, CobroUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CobroCreateWithoutUsuarioInput, CobroUncheckedCreateWithoutUsuarioInput>
  }

  export type CobroUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CobroWhereUniqueInput
    data: XOR<CobroUpdateWithoutUsuarioInput, CobroUncheckedUpdateWithoutUsuarioInput>
  }

  export type CobroUpdateManyWithWhereWithoutUsuarioInput = {
    where: CobroScalarWhereInput
    data: XOR<CobroUpdateManyMutationInput, CobroUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type HistorialCobroUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    update: XOR<HistorialCobroUpdateWithoutUsuarioInput, HistorialCobroUncheckedUpdateWithoutUsuarioInput>
    create: XOR<HistorialCobroCreateWithoutUsuarioInput, HistorialCobroUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialCobroUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialCobroWhereUniqueInput
    data: XOR<HistorialCobroUpdateWithoutUsuarioInput, HistorialCobroUncheckedUpdateWithoutUsuarioInput>
  }

  export type HistorialCobroUpdateManyWithWhereWithoutUsuarioInput = {
    where: HistorialCobroScalarWhereInput
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type HistorialCobroScalarWhereInput = {
    AND?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
    OR?: HistorialCobroScalarWhereInput[]
    NOT?: HistorialCobroScalarWhereInput | HistorialCobroScalarWhereInput[]
    id?: StringFilter<"HistorialCobro"> | string
    created_at?: DateTimeFilter<"HistorialCobro"> | Date | string
    cobro_id?: StringFilter<"HistorialCobro"> | string
    detalles_antes?: StringNullableFilter<"HistorialCobro"> | string | null
    detalles_despues?: StringFilter<"HistorialCobro"> | string
    tipo_cambio?: EnumTipoCambioFilter<"HistorialCobro"> | $Enums.TipoCambio
    usuario_id?: StringFilter<"HistorialCobro"> | string
  }

  export type citasCreateWithoutConsultoriosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
    pacientes: PacienteCreateNestedOneWithoutCitasInput
    usuarios: UsuarioCreateNestedOneWithoutCitasInput
  }

  export type citasUncheckedCreateWithoutConsultoriosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    usuario_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type citasCreateOrConnectWithoutConsultoriosInput = {
    where: citasWhereUniqueInput
    create: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput>
  }

  export type citasCreateManyConsultoriosInputEnvelope = {
    data: citasCreateManyConsultoriosInput | citasCreateManyConsultoriosInput[]
  }

  export type CobroConceptoCreateWithoutConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoCreateOrConnectWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput>
  }

  export type CobroConceptoCreateManyConsultorioInputEnvelope = {
    data: CobroConceptoCreateManyConsultorioInput | CobroConceptoCreateManyConsultorioInput[]
  }

  export type PrecioConsultorioCreateWithoutConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type PrecioConsultorioUncheckedCreateWithoutConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type PrecioConsultorioCreateOrConnectWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    create: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput>
  }

  export type PrecioConsultorioCreateManyConsultorioInputEnvelope = {
    data: PrecioConsultorioCreateManyConsultorioInput | PrecioConsultorioCreateManyConsultorioInput[]
  }

  export type UsuarioCreateWithoutConsultorioInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    citas?: citasCreateNestedManyWithoutUsuariosInput
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutConsultorioInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    citas?: citasUncheckedCreateNestedManyWithoutUsuariosInput
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutConsultorioInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput>
  }

  export type UsuarioCreateManyConsultorioInputEnvelope = {
    data: UsuarioCreateManyConsultorioInput | UsuarioCreateManyConsultorioInput[]
  }

  export type citasUpsertWithWhereUniqueWithoutConsultoriosInput = {
    where: citasWhereUniqueInput
    update: XOR<citasUpdateWithoutConsultoriosInput, citasUncheckedUpdateWithoutConsultoriosInput>
    create: XOR<citasCreateWithoutConsultoriosInput, citasUncheckedCreateWithoutConsultoriosInput>
  }

  export type citasUpdateWithWhereUniqueWithoutConsultoriosInput = {
    where: citasWhereUniqueInput
    data: XOR<citasUpdateWithoutConsultoriosInput, citasUncheckedUpdateWithoutConsultoriosInput>
  }

  export type citasUpdateManyWithWhereWithoutConsultoriosInput = {
    where: citasScalarWhereInput
    data: XOR<citasUpdateManyMutationInput, citasUncheckedUpdateManyWithoutConsultoriosInput>
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutConsultorioInput, CobroConceptoUncheckedUpdateWithoutConsultorioInput>
    create: XOR<CobroConceptoCreateWithoutConsultorioInput, CobroConceptoUncheckedCreateWithoutConsultorioInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutConsultorioInput, CobroConceptoUncheckedUpdateWithoutConsultorioInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutConsultorioInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type CobroConceptoScalarWhereInput = {
    AND?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
    OR?: CobroConceptoScalarWhereInput[]
    NOT?: CobroConceptoScalarWhereInput | CobroConceptoScalarWhereInput[]
    id?: StringFilter<"CobroConcepto"> | string
    cantidad?: IntFilter<"CobroConcepto"> | number
    subtotal?: FloatFilter<"CobroConcepto"> | number
    created_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    updated_at?: DateTimeFilter<"CobroConcepto"> | Date | string
    cobro_id?: StringFilter<"CobroConcepto"> | string
    consultorio_id?: StringFilter<"CobroConcepto"> | string
    precio_unitario?: FloatFilter<"CobroConcepto"> | number
    servicio_id?: StringFilter<"CobroConcepto"> | string
  }

  export type PrecioConsultorioUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    update: XOR<PrecioConsultorioUpdateWithoutConsultorioInput, PrecioConsultorioUncheckedUpdateWithoutConsultorioInput>
    create: XOR<PrecioConsultorioCreateWithoutConsultorioInput, PrecioConsultorioUncheckedCreateWithoutConsultorioInput>
  }

  export type PrecioConsultorioUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: PrecioConsultorioWhereUniqueInput
    data: XOR<PrecioConsultorioUpdateWithoutConsultorioInput, PrecioConsultorioUncheckedUpdateWithoutConsultorioInput>
  }

  export type PrecioConsultorioUpdateManyWithWhereWithoutConsultorioInput = {
    where: PrecioConsultorioScalarWhereInput
    data: XOR<PrecioConsultorioUpdateManyMutationInput, PrecioConsultorioUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type PrecioConsultorioScalarWhereInput = {
    AND?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
    OR?: PrecioConsultorioScalarWhereInput[]
    NOT?: PrecioConsultorioScalarWhereInput | PrecioConsultorioScalarWhereInput[]
    id?: StringFilter<"PrecioConsultorio"> | string
    created_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    updated_at?: DateTimeFilter<"PrecioConsultorio"> | Date | string
    concepto?: StringFilter<"PrecioConsultorio"> | string
    consultorio_id?: StringFilter<"PrecioConsultorio"> | string
    precio?: FloatFilter<"PrecioConsultorio"> | number
  }

  export type UsuarioUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutConsultorioInput, UsuarioUncheckedUpdateWithoutConsultorioInput>
    create: XOR<UsuarioCreateWithoutConsultorioInput, UsuarioUncheckedCreateWithoutConsultorioInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutConsultorioInput, UsuarioUncheckedUpdateWithoutConsultorioInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutConsultorioInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    OR?: UsuarioScalarWhereInput[]
    NOT?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    apellido?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    telefono?: StringFilter<"Usuario"> | string
    created_at?: DateTimeFilter<"Usuario"> | Date | string
    updated_at?: DateTimeFilter<"Usuario"> | Date | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    consultorio_id?: StringFilter<"Usuario"> | string
  }

  export type ConsultorioCreateWithoutPreciosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutPreciosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasUncheckedCreateNestedManyWithoutConsultoriosInput
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutPreciosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
  }

  export type ConsultorioUpsertWithoutPreciosInput = {
    update: XOR<ConsultorioUpdateWithoutPreciosInput, ConsultorioUncheckedUpdateWithoutPreciosInput>
    create: XOR<ConsultorioCreateWithoutPreciosInput, ConsultorioUncheckedCreateWithoutPreciosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutPreciosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutPreciosInput, ConsultorioUncheckedUpdateWithoutPreciosInput>
  }

  export type ConsultorioUpdateWithoutPreciosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutPreciosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUncheckedUpdateManyWithoutConsultoriosNestedInput
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type CobroConceptoCreateWithoutCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
    servicio: ServicioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type CobroConceptoCreateOrConnectWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput>
  }

  export type CobroConceptoCreateManyCobroInputEnvelope = {
    data: CobroConceptoCreateManyCobroInput | CobroConceptoCreateManyCobroInput[]
  }

  export type PacienteCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasCreateNestedManyWithoutPacientesInput
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasUncheckedCreateNestedManyWithoutPacientesInput
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCobrosInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
  }

  export type UsuarioCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio: ConsultorioCreateNestedOneWithoutUsuariosInput
    citas?: citasCreateNestedManyWithoutUsuariosInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCobrosInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio_id: string
    citas?: citasUncheckedCreateNestedManyWithoutUsuariosInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCobrosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
  }

  export type HistorialCobroCreateWithoutCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario: UsuarioCreateNestedOneWithoutHistorialInput
  }

  export type HistorialCobroUncheckedCreateWithoutCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type HistorialCobroCreateOrConnectWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    create: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput>
  }

  export type HistorialCobroCreateManyCobroInputEnvelope = {
    data: HistorialCobroCreateManyCobroInput | HistorialCobroCreateManyCobroInput[]
  }

  export type MetodoPagoCobroCreateWithoutCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroUncheckedCreateWithoutCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MetodoPagoCobroCreateOrConnectWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    create: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput>
  }

  export type MetodoPagoCobroCreateManyCobroInputEnvelope = {
    data: MetodoPagoCobroCreateManyCobroInput | MetodoPagoCobroCreateManyCobroInput[]
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutCobroInput, CobroConceptoUncheckedUpdateWithoutCobroInput>
    create: XOR<CobroConceptoCreateWithoutCobroInput, CobroConceptoUncheckedCreateWithoutCobroInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutCobroInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutCobroInput, CobroConceptoUncheckedUpdateWithoutCobroInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutCobroInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutCobroInput>
  }

  export type PacienteUpsertWithoutCobrosInput = {
    update: XOR<PacienteUpdateWithoutCobrosInput, PacienteUncheckedUpdateWithoutCobrosInput>
    create: XOR<PacienteCreateWithoutCobrosInput, PacienteUncheckedCreateWithoutCobrosInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutCobrosInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutCobrosInput, PacienteUncheckedUpdateWithoutCobrosInput>
  }

  export type PacienteUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUpdateManyWithoutPacientesNestedInput
    InventoryUsage?: InventoryUsageUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutPacientesNestedInput
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type UsuarioUpsertWithoutCobrosInput = {
    update: XOR<UsuarioUpdateWithoutCobrosInput, UsuarioUncheckedUpdateWithoutCobrosInput>
    create: XOR<UsuarioCreateWithoutCobrosInput, UsuarioUncheckedCreateWithoutCobrosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCobrosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCobrosInput, UsuarioUncheckedUpdateWithoutCobrosInput>
  }

  export type UsuarioUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio?: ConsultorioUpdateOneRequiredWithoutUsuariosNestedInput
    citas?: citasUpdateManyWithoutUsuariosNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCobrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio_id?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutUsuariosNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type HistorialCobroUpsertWithWhereUniqueWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    update: XOR<HistorialCobroUpdateWithoutCobroInput, HistorialCobroUncheckedUpdateWithoutCobroInput>
    create: XOR<HistorialCobroCreateWithoutCobroInput, HistorialCobroUncheckedCreateWithoutCobroInput>
  }

  export type HistorialCobroUpdateWithWhereUniqueWithoutCobroInput = {
    where: HistorialCobroWhereUniqueInput
    data: XOR<HistorialCobroUpdateWithoutCobroInput, HistorialCobroUncheckedUpdateWithoutCobroInput>
  }

  export type HistorialCobroUpdateManyWithWhereWithoutCobroInput = {
    where: HistorialCobroScalarWhereInput
    data: XOR<HistorialCobroUpdateManyMutationInput, HistorialCobroUncheckedUpdateManyWithoutCobroInput>
  }

  export type MetodoPagoCobroUpsertWithWhereUniqueWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    update: XOR<MetodoPagoCobroUpdateWithoutCobroInput, MetodoPagoCobroUncheckedUpdateWithoutCobroInput>
    create: XOR<MetodoPagoCobroCreateWithoutCobroInput, MetodoPagoCobroUncheckedCreateWithoutCobroInput>
  }

  export type MetodoPagoCobroUpdateWithWhereUniqueWithoutCobroInput = {
    where: MetodoPagoCobroWhereUniqueInput
    data: XOR<MetodoPagoCobroUpdateWithoutCobroInput, MetodoPagoCobroUncheckedUpdateWithoutCobroInput>
  }

  export type MetodoPagoCobroUpdateManyWithWhereWithoutCobroInput = {
    where: MetodoPagoCobroScalarWhereInput
    data: XOR<MetodoPagoCobroUpdateManyMutationInput, MetodoPagoCobroUncheckedUpdateManyWithoutCobroInput>
  }

  export type MetodoPagoCobroScalarWhereInput = {
    AND?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
    OR?: MetodoPagoCobroScalarWhereInput[]
    NOT?: MetodoPagoCobroScalarWhereInput | MetodoPagoCobroScalarWhereInput[]
    id?: StringFilter<"MetodoPagoCobro"> | string
    cobro_id?: StringFilter<"MetodoPagoCobro"> | string
    metodo_pago?: EnumMetodoPagoFilter<"MetodoPagoCobro"> | $Enums.MetodoPago
    monto?: FloatFilter<"MetodoPagoCobro"> | number
    created_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
    updated_at?: DateTimeFilter<"MetodoPagoCobro"> | Date | string
  }

  export type CobroCreateWithoutConceptosInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutConceptosInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutConceptosInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
  }

  export type ConsultorioCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasCreateNestedManyWithoutConsultoriosInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    citas?: citasUncheckedCreateNestedManyWithoutConsultoriosInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutConceptosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
  }

  export type ServicioCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioUncheckedCreateWithoutConceptosInput = {
    id?: string
    nombre: string
    descripcion?: string | null
    precio_base: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicioCreateOrConnectWithoutConceptosInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
  }

  export type CobroUpsertWithoutConceptosInput = {
    update: XOR<CobroUpdateWithoutConceptosInput, CobroUncheckedUpdateWithoutConceptosInput>
    create: XOR<CobroCreateWithoutConceptosInput, CobroUncheckedCreateWithoutConceptosInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutConceptosInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutConceptosInput, CobroUncheckedUpdateWithoutConceptosInput>
  }

  export type CobroUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type ConsultorioUpsertWithoutConceptosInput = {
    update: XOR<ConsultorioUpdateWithoutConceptosInput, ConsultorioUncheckedUpdateWithoutConceptosInput>
    create: XOR<ConsultorioCreateWithoutConceptosInput, ConsultorioUncheckedCreateWithoutConceptosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutConceptosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutConceptosInput, ConsultorioUncheckedUpdateWithoutConceptosInput>
  }

  export type ConsultorioUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUpdateManyWithoutConsultoriosNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    citas?: citasUncheckedUpdateManyWithoutConsultoriosNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ServicioUpsertWithoutConceptosInput = {
    update: XOR<ServicioUpdateWithoutConceptosInput, ServicioUncheckedUpdateWithoutConceptosInput>
    create: XOR<ServicioCreateWithoutConceptosInput, ServicioUncheckedCreateWithoutConceptosInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutConceptosInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutConceptosInput, ServicioUncheckedUpdateWithoutConceptosInput>
  }

  export type ServicioUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateWithoutConceptosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio_base?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroCreateWithoutHistorialInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    metodos_pago?: MetodoPagoCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutHistorialInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    metodos_pago?: MetodoPagoCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutHistorialInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
  }

  export type UsuarioCreateWithoutHistorialInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio: ConsultorioCreateNestedOneWithoutUsuariosInput
    citas?: citasCreateNestedManyWithoutUsuariosInput
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutHistorialInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio_id: string
    citas?: citasUncheckedCreateNestedManyWithoutUsuariosInput
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutHistorialInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
  }

  export type CobroUpsertWithoutHistorialInput = {
    update: XOR<CobroUpdateWithoutHistorialInput, CobroUncheckedUpdateWithoutHistorialInput>
    create: XOR<CobroCreateWithoutHistorialInput, CobroUncheckedCreateWithoutHistorialInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutHistorialInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutHistorialInput, CobroUncheckedUpdateWithoutHistorialInput>
  }

  export type CobroUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type UsuarioUpsertWithoutHistorialInput = {
    update: XOR<UsuarioUpdateWithoutHistorialInput, UsuarioUncheckedUpdateWithoutHistorialInput>
    create: XOR<UsuarioCreateWithoutHistorialInput, UsuarioUncheckedCreateWithoutHistorialInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutHistorialInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutHistorialInput, UsuarioUncheckedUpdateWithoutHistorialInput>
  }

  export type UsuarioUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio?: ConsultorioUpdateOneRequiredWithoutUsuariosNestedInput
    citas?: citasUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio_id?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CobroConceptoCreateWithoutServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    precio_unitario: number
    cobro: CobroCreateNestedOneWithoutConceptosInput
    consultorio: ConsultorioCreateNestedOneWithoutConceptosInput
  }

  export type CobroConceptoUncheckedCreateWithoutServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
  }

  export type CobroConceptoCreateOrConnectWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    create: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput>
  }

  export type CobroConceptoCreateManyServicioInputEnvelope = {
    data: CobroConceptoCreateManyServicioInput | CobroConceptoCreateManyServicioInput[]
  }

  export type CobroConceptoUpsertWithWhereUniqueWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    update: XOR<CobroConceptoUpdateWithoutServicioInput, CobroConceptoUncheckedUpdateWithoutServicioInput>
    create: XOR<CobroConceptoCreateWithoutServicioInput, CobroConceptoUncheckedCreateWithoutServicioInput>
  }

  export type CobroConceptoUpdateWithWhereUniqueWithoutServicioInput = {
    where: CobroConceptoWhereUniqueInput
    data: XOR<CobroConceptoUpdateWithoutServicioInput, CobroConceptoUncheckedUpdateWithoutServicioInput>
  }

  export type CobroConceptoUpdateManyWithWhereWithoutServicioInput = {
    where: CobroConceptoScalarWhereInput
    data: XOR<CobroConceptoUpdateManyMutationInput, CobroConceptoUncheckedUpdateManyWithoutServicioInput>
  }

  export type CobroCreateWithoutMetodos_pagoInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoCreateNestedManyWithoutCobroInput
    paciente: PacienteCreateNestedOneWithoutCobrosInput
    usuario: UsuarioCreateNestedOneWithoutCobrosInput
    historial?: HistorialCobroCreateNestedManyWithoutCobroInput
  }

  export type CobroUncheckedCreateWithoutMetodos_pagoInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutCobroInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutCobroInput
  }

  export type CobroCreateOrConnectWithoutMetodos_pagoInput = {
    where: CobroWhereUniqueInput
    create: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
  }

  export type CobroUpsertWithoutMetodos_pagoInput = {
    update: XOR<CobroUpdateWithoutMetodos_pagoInput, CobroUncheckedUpdateWithoutMetodos_pagoInput>
    create: XOR<CobroCreateWithoutMetodos_pagoInput, CobroUncheckedCreateWithoutMetodos_pagoInput>
    where?: CobroWhereInput
  }

  export type CobroUpdateToOneWithWhereWithoutMetodos_pagoInput = {
    where?: CobroWhereInput
    data: XOR<CobroUpdateWithoutMetodos_pagoInput, CobroUncheckedUpdateWithoutMetodos_pagoInput>
  }

  export type CobroUpdateWithoutMetodos_pagoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutMetodos_pagoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type ProductAllergenCreateWithoutAllergenInput = {
    id: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
    Product: ProductCreateNestedOneWithoutProductAllergenInput
  }

  export type ProductAllergenUncheckedCreateWithoutAllergenInput = {
    id: string
    productId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductAllergenCreateOrConnectWithoutAllergenInput = {
    where: ProductAllergenWhereUniqueInput
    create: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput>
  }

  export type ProductAllergenCreateManyAllergenInputEnvelope = {
    data: ProductAllergenCreateManyAllergenInput | ProductAllergenCreateManyAllergenInput[]
  }

  export type ProductAllergenUpsertWithWhereUniqueWithoutAllergenInput = {
    where: ProductAllergenWhereUniqueInput
    update: XOR<ProductAllergenUpdateWithoutAllergenInput, ProductAllergenUncheckedUpdateWithoutAllergenInput>
    create: XOR<ProductAllergenCreateWithoutAllergenInput, ProductAllergenUncheckedCreateWithoutAllergenInput>
  }

  export type ProductAllergenUpdateWithWhereUniqueWithoutAllergenInput = {
    where: ProductAllergenWhereUniqueInput
    data: XOR<ProductAllergenUpdateWithoutAllergenInput, ProductAllergenUncheckedUpdateWithoutAllergenInput>
  }

  export type ProductAllergenUpdateManyWithWhereWithoutAllergenInput = {
    where: ProductAllergenScalarWhereInput
    data: XOR<ProductAllergenUpdateManyMutationInput, ProductAllergenUncheckedUpdateManyWithoutAllergenInput>
  }

  export type ProductAllergenScalarWhereInput = {
    AND?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
    OR?: ProductAllergenScalarWhereInput[]
    NOT?: ProductAllergenScalarWhereInput | ProductAllergenScalarWhereInput[]
    id?: StringFilter<"ProductAllergen"> | string
    productId?: StringFilter<"ProductAllergen"> | string
    allergenId?: StringFilter<"ProductAllergen"> | string
    mlPerDose?: FloatFilter<"ProductAllergen"> | number
    createdAt?: DateTimeFilter<"ProductAllergen"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAllergen"> | Date | string
  }

  export type SedeCreateWithoutInventoryUsageInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    Movement?: MovementCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeCreateNestedManyWithoutSedeInput
    User?: UserCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateWithoutInventoryUsageInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    Movement?: MovementUncheckedCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutSedeInput
    User?: UserUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeCreateOrConnectWithoutInventoryUsageInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutInventoryUsageInput, SedeUncheckedCreateWithoutInventoryUsageInput>
  }

  export type UserCreateWithoutInventoryUsageInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
    Movement?: MovementCreateNestedManyWithoutUserInput
    Sede: SedeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInventoryUsageInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    sedeId: string
    createdAt?: Date | string
    updatedAt: Date | string
    Movement?: MovementUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInventoryUsageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInventoryUsageInput, UserUncheckedCreateWithoutInventoryUsageInput>
  }

  export type PacienteCreateWithoutInventoryUsageInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasCreateNestedManyWithoutPacientesInput
    cobros?: CobroCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutInventoryUsageInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    citas?: citasUncheckedCreateNestedManyWithoutPacientesInput
    cobros?: CobroUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutInventoryUsageInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutInventoryUsageInput, PacienteUncheckedCreateWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailCreateWithoutInventoryUsageInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
    Movement?: MovementCreateNestedOneWithoutInventoryUsageDetailInput
    Product: ProductCreateNestedOneWithoutInventoryUsageDetailInput
  }

  export type InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    movementId?: string | null
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailCreateOrConnectWithoutInventoryUsageInput = {
    where: InventoryUsageDetailWhereUniqueInput
    create: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailCreateManyInventoryUsageInputEnvelope = {
    data: InventoryUsageDetailCreateManyInventoryUsageInput | InventoryUsageDetailCreateManyInventoryUsageInput[]
  }

  export type SedeUpsertWithoutInventoryUsageInput = {
    update: XOR<SedeUpdateWithoutInventoryUsageInput, SedeUncheckedUpdateWithoutInventoryUsageInput>
    create: XOR<SedeCreateWithoutInventoryUsageInput, SedeUncheckedCreateWithoutInventoryUsageInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutInventoryUsageInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutInventoryUsageInput, SedeUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type SedeUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movement?: MovementUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutSedeNestedInput
    User?: UserUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movement?: MovementUncheckedUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutSedeNestedInput
    User?: UserUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type UserUpsertWithoutInventoryUsageInput = {
    update: XOR<UserUpdateWithoutInventoryUsageInput, UserUncheckedUpdateWithoutInventoryUsageInput>
    create: XOR<UserCreateWithoutInventoryUsageInput, UserUncheckedCreateWithoutInventoryUsageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInventoryUsageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInventoryUsageInput, UserUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type UserUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movement?: MovementUpdateManyWithoutUserNestedInput
    Sede?: SedeUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    sedeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movement?: MovementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PacienteUpsertWithoutInventoryUsageInput = {
    update: XOR<PacienteUpdateWithoutInventoryUsageInput, PacienteUncheckedUpdateWithoutInventoryUsageInput>
    create: XOR<PacienteCreateWithoutInventoryUsageInput, PacienteUncheckedCreateWithoutInventoryUsageInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutInventoryUsageInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutInventoryUsageInput, PacienteUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type PacienteUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUpdateManyWithoutPacientesNestedInput
    cobros?: CobroUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    citas?: citasUncheckedUpdateManyWithoutPacientesNestedInput
    cobros?: CobroUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type InventoryUsageDetailUpsertWithWhereUniqueWithoutInventoryUsageInput = {
    where: InventoryUsageDetailWhereUniqueInput
    update: XOR<InventoryUsageDetailUpdateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedUpdateWithoutInventoryUsageInput>
    create: XOR<InventoryUsageDetailCreateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedCreateWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailUpdateWithWhereUniqueWithoutInventoryUsageInput = {
    where: InventoryUsageDetailWhereUniqueInput
    data: XOR<InventoryUsageDetailUpdateWithoutInventoryUsageInput, InventoryUsageDetailUncheckedUpdateWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailUpdateManyWithWhereWithoutInventoryUsageInput = {
    where: InventoryUsageDetailScalarWhereInput
    data: XOR<InventoryUsageDetailUpdateManyMutationInput, InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageInput>
  }

  export type InventoryUsageDetailScalarWhereInput = {
    AND?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
    OR?: InventoryUsageDetailScalarWhereInput[]
    NOT?: InventoryUsageDetailScalarWhereInput | InventoryUsageDetailScalarWhereInput[]
    id?: StringFilter<"InventoryUsageDetail"> | string
    createdAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
    doses?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    frascoLevel?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    inventoryUsageId?: StringFilter<"InventoryUsageDetail"> | string
    movementId?: StringNullableFilter<"InventoryUsageDetail"> | string | null
    productId?: StringFilter<"InventoryUsageDetail"> | string
    quantity?: FloatFilter<"InventoryUsageDetail"> | number
    totalCost?: FloatFilter<"InventoryUsageDetail"> | number
    unitCost?: FloatFilter<"InventoryUsageDetail"> | number
    units?: IntNullableFilter<"InventoryUsageDetail"> | number | null
    updatedAt?: DateTimeFilter<"InventoryUsageDetail"> | Date | string
  }

  export type InventoryUsageCreateWithoutInventoryUsageDetailInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutInventoryUsageInput
    User: UserCreateNestedOneWithoutInventoryUsageInput
    Paciente?: PacienteCreateNestedOneWithoutInventoryUsageInput
  }

  export type InventoryUsageUncheckedCreateWithoutInventoryUsageDetailInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    userId: string
  }

  export type InventoryUsageCreateOrConnectWithoutInventoryUsageDetailInput = {
    where: InventoryUsageWhereUniqueInput
    create: XOR<InventoryUsageCreateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedCreateWithoutInventoryUsageDetailInput>
  }

  export type MovementCreateWithoutInventoryUsageDetailInput = {
    id: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    Product: ProductCreateNestedOneWithoutMovementInput
    Sede: SedeCreateNestedOneWithoutMovementInput
    User: UserCreateNestedOneWithoutMovementInput
  }

  export type MovementUncheckedCreateWithoutInventoryUsageDetailInput = {
    id: string
    userId: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementCreateOrConnectWithoutInventoryUsageDetailInput = {
    where: MovementWhereUniqueInput
    create: XOR<MovementCreateWithoutInventoryUsageDetailInput, MovementUncheckedCreateWithoutInventoryUsageDetailInput>
  }

  export type ProductCreateWithoutInventoryUsageDetailInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    Movement?: MovementCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutInventoryUsageDetailInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    Movement?: MovementUncheckedCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutInventoryUsageDetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutInventoryUsageDetailInput, ProductUncheckedCreateWithoutInventoryUsageDetailInput>
  }

  export type InventoryUsageUpsertWithoutInventoryUsageDetailInput = {
    update: XOR<InventoryUsageUpdateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedUpdateWithoutInventoryUsageDetailInput>
    create: XOR<InventoryUsageCreateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedCreateWithoutInventoryUsageDetailInput>
    where?: InventoryUsageWhereInput
  }

  export type InventoryUsageUpdateToOneWithWhereWithoutInventoryUsageDetailInput = {
    where?: InventoryUsageWhereInput
    data: XOR<InventoryUsageUpdateWithoutInventoryUsageDetailInput, InventoryUsageUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type InventoryUsageUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutInventoryUsageNestedInput
    User?: UserUpdateOneRequiredWithoutInventoryUsageNestedInput
    Paciente?: PacienteUpdateOneWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MovementUpsertWithoutInventoryUsageDetailInput = {
    update: XOR<MovementUpdateWithoutInventoryUsageDetailInput, MovementUncheckedUpdateWithoutInventoryUsageDetailInput>
    create: XOR<MovementCreateWithoutInventoryUsageDetailInput, MovementUncheckedCreateWithoutInventoryUsageDetailInput>
    where?: MovementWhereInput
  }

  export type MovementUpdateToOneWithWhereWithoutInventoryUsageDetailInput = {
    where?: MovementWhereInput
    data: XOR<MovementUpdateWithoutInventoryUsageDetailInput, MovementUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type MovementUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutMovementNestedInput
    Sede?: SedeUpdateOneRequiredWithoutMovementNestedInput
    User?: UserUpdateOneRequiredWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutInventoryUsageDetailInput = {
    update: XOR<ProductUpdateWithoutInventoryUsageDetailInput, ProductUncheckedUpdateWithoutInventoryUsageDetailInput>
    create: XOR<ProductCreateWithoutInventoryUsageDetailInput, ProductUncheckedCreateWithoutInventoryUsageDetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutInventoryUsageDetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutInventoryUsageDetailInput, ProductUncheckedUpdateWithoutInventoryUsageDetailInput>
  }

  export type ProductUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Movement?: MovementUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutInventoryUsageDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    Movement?: MovementUncheckedUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutProductNestedInput
  }

  export type InventoryUsageDetailCreateWithoutMovementInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
    InventoryUsage: InventoryUsageCreateNestedOneWithoutInventoryUsageDetailInput
    Product: ProductCreateNestedOneWithoutInventoryUsageDetailInput
  }

  export type InventoryUsageDetailUncheckedCreateWithoutMovementInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailCreateOrConnectWithoutMovementInput = {
    where: InventoryUsageDetailWhereUniqueInput
    create: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput>
  }

  export type InventoryUsageDetailCreateManyMovementInputEnvelope = {
    data: InventoryUsageDetailCreateManyMovementInput | InventoryUsageDetailCreateManyMovementInput[]
  }

  export type ProductCreateWithoutMovementInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutMovementInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutMovementInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMovementInput, ProductUncheckedCreateWithoutMovementInput>
  }

  export type SedeCreateWithoutMovementInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeCreateNestedManyWithoutSedeInput
    User?: UserCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateWithoutMovementInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutSedeInput
    User?: UserUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeCreateOrConnectWithoutMovementInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutMovementInput, SedeUncheckedCreateWithoutMovementInput>
  }

  export type UserCreateWithoutMovementInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutUserInput
    Sede: SedeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMovementInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    sedeId: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMovementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMovementInput, UserUncheckedCreateWithoutMovementInput>
  }

  export type InventoryUsageDetailUpsertWithWhereUniqueWithoutMovementInput = {
    where: InventoryUsageDetailWhereUniqueInput
    update: XOR<InventoryUsageDetailUpdateWithoutMovementInput, InventoryUsageDetailUncheckedUpdateWithoutMovementInput>
    create: XOR<InventoryUsageDetailCreateWithoutMovementInput, InventoryUsageDetailUncheckedCreateWithoutMovementInput>
  }

  export type InventoryUsageDetailUpdateWithWhereUniqueWithoutMovementInput = {
    where: InventoryUsageDetailWhereUniqueInput
    data: XOR<InventoryUsageDetailUpdateWithoutMovementInput, InventoryUsageDetailUncheckedUpdateWithoutMovementInput>
  }

  export type InventoryUsageDetailUpdateManyWithWhereWithoutMovementInput = {
    where: InventoryUsageDetailScalarWhereInput
    data: XOR<InventoryUsageDetailUpdateManyMutationInput, InventoryUsageDetailUncheckedUpdateManyWithoutMovementInput>
  }

  export type ProductUpsertWithoutMovementInput = {
    update: XOR<ProductUpdateWithoutMovementInput, ProductUncheckedUpdateWithoutMovementInput>
    create: XOR<ProductCreateWithoutMovementInput, ProductUncheckedCreateWithoutMovementInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutMovementInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutMovementInput, ProductUncheckedUpdateWithoutMovementInput>
  }

  export type ProductUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SedeUpsertWithoutMovementInput = {
    update: XOR<SedeUpdateWithoutMovementInput, SedeUncheckedUpdateWithoutMovementInput>
    create: XOR<SedeCreateWithoutMovementInput, SedeUncheckedCreateWithoutMovementInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutMovementInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutMovementInput, SedeUncheckedUpdateWithoutMovementInput>
  }

  export type SedeUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutSedeNestedInput
    User?: UserUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutSedeNestedInput
    User?: UserUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type UserUpsertWithoutMovementInput = {
    update: XOR<UserUpdateWithoutMovementInput, UserUncheckedUpdateWithoutMovementInput>
    create: XOR<UserCreateWithoutMovementInput, UserUncheckedCreateWithoutMovementInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMovementInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMovementInput, UserUncheckedUpdateWithoutMovementInput>
  }

  export type UserUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutUserNestedInput
    Sede?: SedeUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    sedeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InventoryUsageDetailCreateWithoutProductInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
    InventoryUsage: InventoryUsageCreateNestedOneWithoutInventoryUsageDetailInput
    Movement?: MovementCreateNestedOneWithoutInventoryUsageDetailInput
  }

  export type InventoryUsageDetailUncheckedCreateWithoutProductInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    movementId?: string | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailCreateOrConnectWithoutProductInput = {
    where: InventoryUsageDetailWhereUniqueInput
    create: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput>
  }

  export type InventoryUsageDetailCreateManyProductInputEnvelope = {
    data: InventoryUsageDetailCreateManyProductInput | InventoryUsageDetailCreateManyProductInput[]
  }

  export type MovementCreateWithoutProductInput = {
    id: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutMovementInput
    Sede: SedeCreateNestedOneWithoutMovementInput
    User: UserCreateNestedOneWithoutMovementInput
  }

  export type MovementUncheckedCreateWithoutProductInput = {
    id: string
    userId: string
    sedeId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutMovementInput
  }

  export type MovementCreateOrConnectWithoutProductInput = {
    where: MovementWhereUniqueInput
    create: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput>
  }

  export type MovementCreateManyProductInputEnvelope = {
    data: MovementCreateManyProductInput | MovementCreateManyProductInput[]
  }

  export type ProductAllergenCreateWithoutProductInput = {
    id: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
    Allergen: AllergenCreateNestedOneWithoutProductAllergenInput
  }

  export type ProductAllergenUncheckedCreateWithoutProductInput = {
    id: string
    allergenId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductAllergenCreateOrConnectWithoutProductInput = {
    where: ProductAllergenWhereUniqueInput
    create: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput>
  }

  export type ProductAllergenCreateManyProductInputEnvelope = {
    data: ProductAllergenCreateManyProductInput | ProductAllergenCreateManyProductInput[]
  }

  export type ProductExpirationCreateWithoutProductInput = {
    id: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutProductExpirationInput
  }

  export type ProductExpirationUncheckedCreateWithoutProductInput = {
    id: string
    sedeId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductExpirationCreateOrConnectWithoutProductInput = {
    where: ProductExpirationWhereUniqueInput
    create: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput>
  }

  export type ProductExpirationCreateManyProductInputEnvelope = {
    data: ProductExpirationCreateManyProductInput | ProductExpirationCreateManyProductInput[]
  }

  export type StockBySedeCreateWithoutProductInput = {
    id: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutStockBySedeInput
  }

  export type StockBySedeUncheckedCreateWithoutProductInput = {
    id: string
    sedeId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeCreateOrConnectWithoutProductInput = {
    where: StockBySedeWhereUniqueInput
    create: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput>
  }

  export type StockBySedeCreateManyProductInputEnvelope = {
    data: StockBySedeCreateManyProductInput | StockBySedeCreateManyProductInput[]
  }

  export type InventoryUsageDetailUpsertWithWhereUniqueWithoutProductInput = {
    where: InventoryUsageDetailWhereUniqueInput
    update: XOR<InventoryUsageDetailUpdateWithoutProductInput, InventoryUsageDetailUncheckedUpdateWithoutProductInput>
    create: XOR<InventoryUsageDetailCreateWithoutProductInput, InventoryUsageDetailUncheckedCreateWithoutProductInput>
  }

  export type InventoryUsageDetailUpdateWithWhereUniqueWithoutProductInput = {
    where: InventoryUsageDetailWhereUniqueInput
    data: XOR<InventoryUsageDetailUpdateWithoutProductInput, InventoryUsageDetailUncheckedUpdateWithoutProductInput>
  }

  export type InventoryUsageDetailUpdateManyWithWhereWithoutProductInput = {
    where: InventoryUsageDetailScalarWhereInput
    data: XOR<InventoryUsageDetailUpdateManyMutationInput, InventoryUsageDetailUncheckedUpdateManyWithoutProductInput>
  }

  export type MovementUpsertWithWhereUniqueWithoutProductInput = {
    where: MovementWhereUniqueInput
    update: XOR<MovementUpdateWithoutProductInput, MovementUncheckedUpdateWithoutProductInput>
    create: XOR<MovementCreateWithoutProductInput, MovementUncheckedCreateWithoutProductInput>
  }

  export type MovementUpdateWithWhereUniqueWithoutProductInput = {
    where: MovementWhereUniqueInput
    data: XOR<MovementUpdateWithoutProductInput, MovementUncheckedUpdateWithoutProductInput>
  }

  export type MovementUpdateManyWithWhereWithoutProductInput = {
    where: MovementScalarWhereInput
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyWithoutProductInput>
  }

  export type MovementScalarWhereInput = {
    AND?: MovementScalarWhereInput | MovementScalarWhereInput[]
    OR?: MovementScalarWhereInput[]
    NOT?: MovementScalarWhereInput | MovementScalarWhereInput[]
    id?: StringFilter<"Movement"> | string
    userId?: StringFilter<"Movement"> | string
    sedeId?: StringFilter<"Movement"> | string
    productId?: StringFilter<"Movement"> | string
    type?: EnumMovementTypeFilter<"Movement"> | $Enums.MovementType
    quantity?: FloatFilter<"Movement"> | number
    unitCost?: FloatFilter<"Movement"> | number
    totalCost?: FloatFilter<"Movement"> | number
    batchNumber?: StringNullableFilter<"Movement"> | string | null
    expiryDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
  }

  export type ProductAllergenUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductAllergenWhereUniqueInput
    update: XOR<ProductAllergenUpdateWithoutProductInput, ProductAllergenUncheckedUpdateWithoutProductInput>
    create: XOR<ProductAllergenCreateWithoutProductInput, ProductAllergenUncheckedCreateWithoutProductInput>
  }

  export type ProductAllergenUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductAllergenWhereUniqueInput
    data: XOR<ProductAllergenUpdateWithoutProductInput, ProductAllergenUncheckedUpdateWithoutProductInput>
  }

  export type ProductAllergenUpdateManyWithWhereWithoutProductInput = {
    where: ProductAllergenScalarWhereInput
    data: XOR<ProductAllergenUpdateManyMutationInput, ProductAllergenUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductExpirationUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductExpirationWhereUniqueInput
    update: XOR<ProductExpirationUpdateWithoutProductInput, ProductExpirationUncheckedUpdateWithoutProductInput>
    create: XOR<ProductExpirationCreateWithoutProductInput, ProductExpirationUncheckedCreateWithoutProductInput>
  }

  export type ProductExpirationUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductExpirationWhereUniqueInput
    data: XOR<ProductExpirationUpdateWithoutProductInput, ProductExpirationUncheckedUpdateWithoutProductInput>
  }

  export type ProductExpirationUpdateManyWithWhereWithoutProductInput = {
    where: ProductExpirationScalarWhereInput
    data: XOR<ProductExpirationUpdateManyMutationInput, ProductExpirationUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductExpirationScalarWhereInput = {
    AND?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
    OR?: ProductExpirationScalarWhereInput[]
    NOT?: ProductExpirationScalarWhereInput | ProductExpirationScalarWhereInput[]
    id?: StringFilter<"ProductExpiration"> | string
    productId?: StringFilter<"ProductExpiration"> | string
    sedeId?: StringFilter<"ProductExpiration"> | string
    batchNumber?: StringFilter<"ProductExpiration"> | string
    expiryDate?: DateTimeFilter<"ProductExpiration"> | Date | string
    quantity?: IntFilter<"ProductExpiration"> | number
    createdAt?: DateTimeFilter<"ProductExpiration"> | Date | string
    updatedAt?: DateTimeFilter<"ProductExpiration"> | Date | string
  }

  export type StockBySedeUpsertWithWhereUniqueWithoutProductInput = {
    where: StockBySedeWhereUniqueInput
    update: XOR<StockBySedeUpdateWithoutProductInput, StockBySedeUncheckedUpdateWithoutProductInput>
    create: XOR<StockBySedeCreateWithoutProductInput, StockBySedeUncheckedCreateWithoutProductInput>
  }

  export type StockBySedeUpdateWithWhereUniqueWithoutProductInput = {
    where: StockBySedeWhereUniqueInput
    data: XOR<StockBySedeUpdateWithoutProductInput, StockBySedeUncheckedUpdateWithoutProductInput>
  }

  export type StockBySedeUpdateManyWithWhereWithoutProductInput = {
    where: StockBySedeScalarWhereInput
    data: XOR<StockBySedeUpdateManyMutationInput, StockBySedeUncheckedUpdateManyWithoutProductInput>
  }

  export type StockBySedeScalarWhereInput = {
    AND?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
    OR?: StockBySedeScalarWhereInput[]
    NOT?: StockBySedeScalarWhereInput | StockBySedeScalarWhereInput[]
    id?: StringFilter<"StockBySede"> | string
    productId?: StringFilter<"StockBySede"> | string
    sedeId?: StringFilter<"StockBySede"> | string
    quantity?: FloatFilter<"StockBySede"> | number
    createdAt?: DateTimeFilter<"StockBySede"> | Date | string
    updatedAt?: DateTimeFilter<"StockBySede"> | Date | string
  }

  export type AllergenCreateWithoutProductAllergenInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    alxoidType?: $Enums.AlxoidType | null
    isAlxoidExclusive?: boolean
  }

  export type AllergenUncheckedCreateWithoutProductAllergenInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    alxoidType?: $Enums.AlxoidType | null
    isAlxoidExclusive?: boolean
  }

  export type AllergenCreateOrConnectWithoutProductAllergenInput = {
    where: AllergenWhereUniqueInput
    create: XOR<AllergenCreateWithoutProductAllergenInput, AllergenUncheckedCreateWithoutProductAllergenInput>
  }

  export type ProductCreateWithoutProductAllergenInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutProductInput
    Movement?: MovementCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductAllergenInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput
    Movement?: MovementUncheckedCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductAllergenInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductAllergenInput, ProductUncheckedCreateWithoutProductAllergenInput>
  }

  export type AllergenUpsertWithoutProductAllergenInput = {
    update: XOR<AllergenUpdateWithoutProductAllergenInput, AllergenUncheckedUpdateWithoutProductAllergenInput>
    create: XOR<AllergenCreateWithoutProductAllergenInput, AllergenUncheckedCreateWithoutProductAllergenInput>
    where?: AllergenWhereInput
  }

  export type AllergenUpdateToOneWithWhereWithoutProductAllergenInput = {
    where?: AllergenWhereInput
    data: XOR<AllergenUpdateWithoutProductAllergenInput, AllergenUncheckedUpdateWithoutProductAllergenInput>
  }

  export type AllergenUpdateWithoutProductAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AllergenUncheckedUpdateWithoutProductAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alxoidType?: NullableEnumAlxoidTypeFieldUpdateOperationsInput | $Enums.AlxoidType | null
    isAlxoidExclusive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUpsertWithoutProductAllergenInput = {
    update: XOR<ProductUpdateWithoutProductAllergenInput, ProductUncheckedUpdateWithoutProductAllergenInput>
    create: XOR<ProductCreateWithoutProductAllergenInput, ProductUncheckedCreateWithoutProductAllergenInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductAllergenInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductAllergenInput, ProductUncheckedUpdateWithoutProductAllergenInput>
  }

  export type ProductUpdateWithoutProductAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutProductNestedInput
    Movement?: MovementUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutProductExpirationInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutProductInput
    Movement?: MovementCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductExpirationInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput
    Movement?: MovementUncheckedCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutProductInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductExpirationInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductExpirationInput, ProductUncheckedCreateWithoutProductExpirationInput>
  }

  export type SedeCreateWithoutProductExpirationInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutSedeInput
    Movement?: MovementCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeCreateNestedManyWithoutSedeInput
    User?: UserCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateWithoutProductExpirationInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutSedeInput
    Movement?: MovementUncheckedCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutSedeInput
    User?: UserUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeCreateOrConnectWithoutProductExpirationInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutProductExpirationInput, SedeUncheckedCreateWithoutProductExpirationInput>
  }

  export type ProductUpsertWithoutProductExpirationInput = {
    update: XOR<ProductUpdateWithoutProductExpirationInput, ProductUncheckedUpdateWithoutProductExpirationInput>
    create: XOR<ProductCreateWithoutProductExpirationInput, ProductUncheckedCreateWithoutProductExpirationInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductExpirationInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductExpirationInput, ProductUncheckedUpdateWithoutProductExpirationInput>
  }

  export type ProductUpdateWithoutProductExpirationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutProductNestedInput
    Movement?: MovementUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductExpirationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutProductNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SedeUpsertWithoutProductExpirationInput = {
    update: XOR<SedeUpdateWithoutProductExpirationInput, SedeUncheckedUpdateWithoutProductExpirationInput>
    create: XOR<SedeCreateWithoutProductExpirationInput, SedeUncheckedCreateWithoutProductExpirationInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutProductExpirationInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutProductExpirationInput, SedeUncheckedUpdateWithoutProductExpirationInput>
  }

  export type SedeUpdateWithoutProductExpirationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutSedeNestedInput
    Movement?: MovementUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutSedeNestedInput
    User?: UserUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateWithoutProductExpirationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutSedeNestedInput
    User?: UserUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type InventoryUsageCreateWithoutSedeInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutInventoryUsageInput
    Paciente?: PacienteCreateNestedOneWithoutInventoryUsageInput
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageUncheckedCreateWithoutSedeInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    userId: string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageCreateOrConnectWithoutSedeInput = {
    where: InventoryUsageWhereUniqueInput
    create: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput>
  }

  export type InventoryUsageCreateManySedeInputEnvelope = {
    data: InventoryUsageCreateManySedeInput | InventoryUsageCreateManySedeInput[]
  }

  export type MovementCreateWithoutSedeInput = {
    id: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutMovementInput
    Product: ProductCreateNestedOneWithoutMovementInput
    User: UserCreateNestedOneWithoutMovementInput
  }

  export type MovementUncheckedCreateWithoutSedeInput = {
    id: string
    userId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutMovementInput
  }

  export type MovementCreateOrConnectWithoutSedeInput = {
    where: MovementWhereUniqueInput
    create: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput>
  }

  export type MovementCreateManySedeInputEnvelope = {
    data: MovementCreateManySedeInput | MovementCreateManySedeInput[]
  }

  export type ProductExpirationCreateWithoutSedeInput = {
    id: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Product: ProductCreateNestedOneWithoutProductExpirationInput
  }

  export type ProductExpirationUncheckedCreateWithoutSedeInput = {
    id: string
    productId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductExpirationCreateOrConnectWithoutSedeInput = {
    where: ProductExpirationWhereUniqueInput
    create: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput>
  }

  export type ProductExpirationCreateManySedeInputEnvelope = {
    data: ProductExpirationCreateManySedeInput | ProductExpirationCreateManySedeInput[]
  }

  export type StockBySedeCreateWithoutSedeInput = {
    id: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
    Product: ProductCreateNestedOneWithoutStockBySedeInput
  }

  export type StockBySedeUncheckedCreateWithoutSedeInput = {
    id: string
    productId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeCreateOrConnectWithoutSedeInput = {
    where: StockBySedeWhereUniqueInput
    create: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput>
  }

  export type StockBySedeCreateManySedeInputEnvelope = {
    data: StockBySedeCreateManySedeInput | StockBySedeCreateManySedeInput[]
  }

  export type UserCreateWithoutSedeInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutUserInput
    Movement?: MovementCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSedeInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutUserInput
    Movement?: MovementUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSedeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput>
  }

  export type UserCreateManySedeInputEnvelope = {
    data: UserCreateManySedeInput | UserCreateManySedeInput[]
  }

  export type InventoryUsageUpsertWithWhereUniqueWithoutSedeInput = {
    where: InventoryUsageWhereUniqueInput
    update: XOR<InventoryUsageUpdateWithoutSedeInput, InventoryUsageUncheckedUpdateWithoutSedeInput>
    create: XOR<InventoryUsageCreateWithoutSedeInput, InventoryUsageUncheckedCreateWithoutSedeInput>
  }

  export type InventoryUsageUpdateWithWhereUniqueWithoutSedeInput = {
    where: InventoryUsageWhereUniqueInput
    data: XOR<InventoryUsageUpdateWithoutSedeInput, InventoryUsageUncheckedUpdateWithoutSedeInput>
  }

  export type InventoryUsageUpdateManyWithWhereWithoutSedeInput = {
    where: InventoryUsageScalarWhereInput
    data: XOR<InventoryUsageUpdateManyMutationInput, InventoryUsageUncheckedUpdateManyWithoutSedeInput>
  }

  export type MovementUpsertWithWhereUniqueWithoutSedeInput = {
    where: MovementWhereUniqueInput
    update: XOR<MovementUpdateWithoutSedeInput, MovementUncheckedUpdateWithoutSedeInput>
    create: XOR<MovementCreateWithoutSedeInput, MovementUncheckedCreateWithoutSedeInput>
  }

  export type MovementUpdateWithWhereUniqueWithoutSedeInput = {
    where: MovementWhereUniqueInput
    data: XOR<MovementUpdateWithoutSedeInput, MovementUncheckedUpdateWithoutSedeInput>
  }

  export type MovementUpdateManyWithWhereWithoutSedeInput = {
    where: MovementScalarWhereInput
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyWithoutSedeInput>
  }

  export type ProductExpirationUpsertWithWhereUniqueWithoutSedeInput = {
    where: ProductExpirationWhereUniqueInput
    update: XOR<ProductExpirationUpdateWithoutSedeInput, ProductExpirationUncheckedUpdateWithoutSedeInput>
    create: XOR<ProductExpirationCreateWithoutSedeInput, ProductExpirationUncheckedCreateWithoutSedeInput>
  }

  export type ProductExpirationUpdateWithWhereUniqueWithoutSedeInput = {
    where: ProductExpirationWhereUniqueInput
    data: XOR<ProductExpirationUpdateWithoutSedeInput, ProductExpirationUncheckedUpdateWithoutSedeInput>
  }

  export type ProductExpirationUpdateManyWithWhereWithoutSedeInput = {
    where: ProductExpirationScalarWhereInput
    data: XOR<ProductExpirationUpdateManyMutationInput, ProductExpirationUncheckedUpdateManyWithoutSedeInput>
  }

  export type StockBySedeUpsertWithWhereUniqueWithoutSedeInput = {
    where: StockBySedeWhereUniqueInput
    update: XOR<StockBySedeUpdateWithoutSedeInput, StockBySedeUncheckedUpdateWithoutSedeInput>
    create: XOR<StockBySedeCreateWithoutSedeInput, StockBySedeUncheckedCreateWithoutSedeInput>
  }

  export type StockBySedeUpdateWithWhereUniqueWithoutSedeInput = {
    where: StockBySedeWhereUniqueInput
    data: XOR<StockBySedeUpdateWithoutSedeInput, StockBySedeUncheckedUpdateWithoutSedeInput>
  }

  export type StockBySedeUpdateManyWithWhereWithoutSedeInput = {
    where: StockBySedeScalarWhereInput
    data: XOR<StockBySedeUpdateManyMutationInput, StockBySedeUncheckedUpdateManyWithoutSedeInput>
  }

  export type UserUpsertWithWhereUniqueWithoutSedeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSedeInput, UserUncheckedUpdateWithoutSedeInput>
    create: XOR<UserCreateWithoutSedeInput, UserUncheckedCreateWithoutSedeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSedeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSedeInput, UserUncheckedUpdateWithoutSedeInput>
  }

  export type UserUpdateManyWithWhereWithoutSedeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSedeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    sedeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ProductCreateWithoutStockBySedeInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutProductInput
    Movement?: MovementCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutStockBySedeInput = {
    id: string
    name: string
    type: $Enums.ProductType
    unit: $Enums.ProductUnit
    description?: string | null
    costPerUnit: number
    minStockLevel: number
    createdAt?: Date | string
    updatedAt: Date | string
    category?: string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutProductInput
    Movement?: MovementUncheckedCreateNestedManyWithoutProductInput
    ProductAllergen?: ProductAllergenUncheckedCreateNestedManyWithoutProductInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutStockBySedeInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStockBySedeInput, ProductUncheckedCreateWithoutStockBySedeInput>
  }

  export type SedeCreateWithoutStockBySedeInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutSedeInput
    Movement?: MovementCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutSedeInput
    User?: UserCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateWithoutStockBySedeInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutSedeInput
    Movement?: MovementUncheckedCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutSedeInput
    User?: UserUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeCreateOrConnectWithoutStockBySedeInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutStockBySedeInput, SedeUncheckedCreateWithoutStockBySedeInput>
  }

  export type ProductUpsertWithoutStockBySedeInput = {
    update: XOR<ProductUpdateWithoutStockBySedeInput, ProductUncheckedUpdateWithoutStockBySedeInput>
    create: XOR<ProductCreateWithoutStockBySedeInput, ProductUncheckedCreateWithoutStockBySedeInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutStockBySedeInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutStockBySedeInput, ProductUncheckedUpdateWithoutStockBySedeInput>
  }

  export type ProductUpdateWithoutStockBySedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutProductNestedInput
    Movement?: MovementUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutStockBySedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    unit?: EnumProductUnitFieldUpdateOperationsInput | $Enums.ProductUnit
    description?: NullableStringFieldUpdateOperationsInput | string | null
    costPerUnit?: FloatFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutProductNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutProductNestedInput
    ProductAllergen?: ProductAllergenUncheckedUpdateManyWithoutProductNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SedeUpsertWithoutStockBySedeInput = {
    update: XOR<SedeUpdateWithoutStockBySedeInput, SedeUncheckedUpdateWithoutStockBySedeInput>
    create: XOR<SedeCreateWithoutStockBySedeInput, SedeUncheckedCreateWithoutStockBySedeInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutStockBySedeInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutStockBySedeInput, SedeUncheckedUpdateWithoutStockBySedeInput>
  }

  export type SedeUpdateWithoutStockBySedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutSedeNestedInput
    Movement?: MovementUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutSedeNestedInput
    User?: UserUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateWithoutStockBySedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput
    User?: UserUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type InventoryUsageCreateWithoutUserInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Sede: SedeCreateNestedOneWithoutInventoryUsageInput
    Paciente?: PacienteCreateNestedOneWithoutInventoryUsageInput
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageUncheckedCreateWithoutUserInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutInventoryUsageInput
  }

  export type InventoryUsageCreateOrConnectWithoutUserInput = {
    where: InventoryUsageWhereUniqueInput
    create: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput>
  }

  export type InventoryUsageCreateManyUserInputEnvelope = {
    data: InventoryUsageCreateManyUserInput | InventoryUsageCreateManyUserInput[]
  }

  export type MovementCreateWithoutUserInput = {
    id: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailCreateNestedManyWithoutMovementInput
    Product: ProductCreateNestedOneWithoutMovementInput
    Sede: SedeCreateNestedOneWithoutMovementInput
  }

  export type MovementUncheckedCreateWithoutUserInput = {
    id: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedCreateNestedManyWithoutMovementInput
  }

  export type MovementCreateOrConnectWithoutUserInput = {
    where: MovementWhereUniqueInput
    create: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput>
  }

  export type MovementCreateManyUserInputEnvelope = {
    data: MovementCreateManyUserInput | MovementCreateManyUserInput[]
  }

  export type SedeCreateWithoutUserInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutSedeInput
    Movement?: MovementCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateWithoutUserInput = {
    id: string
    name: string
    address: string
    createdAt?: Date | string
    updatedAt: Date | string
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutSedeInput
    Movement?: MovementUncheckedCreateNestedManyWithoutSedeInput
    ProductExpiration?: ProductExpirationUncheckedCreateNestedManyWithoutSedeInput
    StockBySede?: StockBySedeUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeCreateOrConnectWithoutUserInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutUserInput, SedeUncheckedCreateWithoutUserInput>
  }

  export type InventoryUsageUpsertWithWhereUniqueWithoutUserInput = {
    where: InventoryUsageWhereUniqueInput
    update: XOR<InventoryUsageUpdateWithoutUserInput, InventoryUsageUncheckedUpdateWithoutUserInput>
    create: XOR<InventoryUsageCreateWithoutUserInput, InventoryUsageUncheckedCreateWithoutUserInput>
  }

  export type InventoryUsageUpdateWithWhereUniqueWithoutUserInput = {
    where: InventoryUsageWhereUniqueInput
    data: XOR<InventoryUsageUpdateWithoutUserInput, InventoryUsageUncheckedUpdateWithoutUserInput>
  }

  export type InventoryUsageUpdateManyWithWhereWithoutUserInput = {
    where: InventoryUsageScalarWhereInput
    data: XOR<InventoryUsageUpdateManyMutationInput, InventoryUsageUncheckedUpdateManyWithoutUserInput>
  }

  export type MovementUpsertWithWhereUniqueWithoutUserInput = {
    where: MovementWhereUniqueInput
    update: XOR<MovementUpdateWithoutUserInput, MovementUncheckedUpdateWithoutUserInput>
    create: XOR<MovementCreateWithoutUserInput, MovementUncheckedCreateWithoutUserInput>
  }

  export type MovementUpdateWithWhereUniqueWithoutUserInput = {
    where: MovementWhereUniqueInput
    data: XOR<MovementUpdateWithoutUserInput, MovementUncheckedUpdateWithoutUserInput>
  }

  export type MovementUpdateManyWithWhereWithoutUserInput = {
    where: MovementScalarWhereInput
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyWithoutUserInput>
  }

  export type SedeUpsertWithoutUserInput = {
    update: XOR<SedeUpdateWithoutUserInput, SedeUncheckedUpdateWithoutUserInput>
    create: XOR<SedeCreateWithoutUserInput, SedeUncheckedCreateWithoutUserInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutUserInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutUserInput, SedeUncheckedUpdateWithoutUserInput>
  }

  export type SedeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutSedeNestedInput
    Movement?: MovementUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutSedeNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutSedeNestedInput
    ProductExpiration?: ProductExpirationUncheckedUpdateManyWithoutSedeNestedInput
    StockBySede?: StockBySedeUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type ConsultorioCreateWithoutCitasInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    direccion: string
    created_at?: Date | string
    updated_at?: Date | string
    conceptos?: CobroConceptoUncheckedCreateNestedManyWithoutConsultorioInput
    precios?: PrecioConsultorioUncheckedCreateNestedManyWithoutConsultorioInput
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutCitasInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
  }

  export type PacienteCreateWithoutCitasInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroCreateNestedManyWithoutPacienteInput
    InventoryUsage?: InventoryUsageCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    fecha_nacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono: string
    email: string
    documento_identidad?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    apellido: string
    cobros?: CobroUncheckedCreateNestedManyWithoutPacienteInput
    InventoryUsage?: InventoryUsageUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCitasInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
  }

  export type UsuarioCreateWithoutCitasInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio: ConsultorioCreateNestedOneWithoutUsuariosInput
    cobros?: CobroCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCitasInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
    consultorio_id: string
    cobros?: CobroUncheckedCreateNestedManyWithoutUsuarioInput
    historial?: HistorialCobroUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCitasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
  }

  export type ConsultorioUpsertWithoutCitasInput = {
    update: XOR<ConsultorioUpdateWithoutCitasInput, ConsultorioUncheckedUpdateWithoutCitasInput>
    create: XOR<ConsultorioCreateWithoutCitasInput, ConsultorioUncheckedCreateWithoutCitasInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutCitasInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutCitasInput, ConsultorioUncheckedUpdateWithoutCitasInput>
  }

  export type ConsultorioUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutConsultorioNestedInput
    precios?: PrecioConsultorioUncheckedUpdateManyWithoutConsultorioNestedInput
    usuarios?: UsuarioUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type PacienteUpsertWithoutCitasInput = {
    update: XOR<PacienteUpdateWithoutCitasInput, PacienteUncheckedUpdateWithoutCitasInput>
    create: XOR<PacienteCreateWithoutCitasInput, PacienteUncheckedCreateWithoutCitasInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutCitasInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutCitasInput, PacienteUncheckedUpdateWithoutCitasInput>
  }

  export type PacienteUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUpdateManyWithoutPacienteNestedInput
    InventoryUsage?: InventoryUsageUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    documento_identidad?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    apellido?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUncheckedUpdateManyWithoutPacienteNestedInput
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type UsuarioUpsertWithoutCitasInput = {
    update: XOR<UsuarioUpdateWithoutCitasInput, UsuarioUncheckedUpdateWithoutCitasInput>
    create: XOR<UsuarioCreateWithoutCitasInput, UsuarioUncheckedCreateWithoutCitasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCitasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCitasInput, UsuarioUncheckedUpdateWithoutCitasInput>
  }

  export type UsuarioUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio?: ConsultorioUpdateOneRequiredWithoutUsuariosNestedInput
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    consultorio_id?: StringFieldUpdateOperationsInput | string
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type citasCreateManyPacientesInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    usuario_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type CobroCreateManyPacienteInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    usuario_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type InventoryUsageCreateManyPacienteInput = {
    id: string
    nombrePaciente: string
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
    userId: string
  }

  export type citasUpdateWithoutPacientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
    usuarios?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type citasUncheckedUpdateWithoutPacientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasUncheckedUpdateManyWithoutPacientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    usuario_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type InventoryUsageUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutInventoryUsageNestedInput
    User?: UserUpdateOneRequiredWithoutInventoryUsageNestedInput
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type citasCreateManyUsuariosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    consultorio_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type CobroCreateManyUsuarioInput = {
    id?: string
    fecha_cobro: Date | string
    monto_total: number
    notas?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    paciente_id: string
    estado: $Enums.EstadoCobro
    metodo_pago?: $Enums.MetodoPago | null
  }

  export type HistorialCobroCreateManyUsuarioInput = {
    id?: string
    created_at?: Date | string
    cobro_id: string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
  }

  export type citasUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUpdateOneRequiredWithoutCitasNestedInput
    pacientes?: PacienteUpdateOneRequiredWithoutCitasNestedInput
  }

  export type citasUncheckedUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasUncheckedUpdateManyWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUpdateManyWithoutCobroNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutCobrosNestedInput
    historial?: HistorialCobroUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
    conceptos?: CobroConceptoUncheckedUpdateManyWithoutCobroNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutCobroNestedInput
    metodos_pago?: MetodoPagoCobroUncheckedUpdateManyWithoutCobroNestedInput
  }

  export type CobroUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    monto_total?: FloatFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente_id?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoCobroFieldUpdateOperationsInput | $Enums.EstadoCobro
    metodo_pago?: NullableEnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago | null
  }

  export type HistorialCobroUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    cobro?: CobroUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type HistorialCobroUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
  }

  export type citasCreateManyConsultoriosInput = {
    id: string
    descripcion?: string | null
    estado: $Enums.EstadoCita
    paciente_id: string
    usuario_id: string
    created_at?: Date | string
    updated_at: Date | string
    color?: string | null
    fecha_fin: Date | string
    fecha_inicio: Date | string
  }

  export type CobroConceptoCreateManyConsultorioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type PrecioConsultorioCreateManyConsultorioInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    concepto: string
    precio: number
  }

  export type UsuarioCreateManyConsultorioInput = {
    id?: string
    nombre: string
    apellido: string
    email: string
    telefono: string
    created_at?: Date | string
    updated_at?: Date | string
    rol: $Enums.Rol
  }

  export type citasUpdateWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    pacientes?: PacienteUpdateOneRequiredWithoutCitasNestedInput
    usuarios?: UsuarioUpdateOneRequiredWithoutCitasNestedInput
  }

  export type citasUncheckedUpdateWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citasUncheckedUpdateManyWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoCitaFieldUpdateOperationsInput | $Enums.EstadoCita
    paciente_id?: StringFieldUpdateOperationsInput | string
    usuario_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroConceptoUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrecioConsultorioUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type PrecioConsultorioUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    concepto?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type UsuarioUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    citas?: citasUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    citas?: citasUncheckedUpdateManyWithoutUsuariosNestedInput
    cobros?: CobroUncheckedUpdateManyWithoutUsuarioNestedInput
    historial?: HistorialCobroUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
  }

  export type CobroConceptoCreateManyCobroInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    consultorio_id: string
    precio_unitario: number
    servicio_id: string
  }

  export type HistorialCobroCreateManyCobroInput = {
    id?: string
    created_at?: Date | string
    detalles_antes?: string | null
    detalles_despues: string
    tipo_cambio: $Enums.TipoCambio
    usuario_id: string
  }

  export type MetodoPagoCobroCreateManyCobroInput = {
    id?: string
    metodo_pago: $Enums.MetodoPago
    monto: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CobroConceptoUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type CobroConceptoUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    servicio_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario?: UsuarioUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialCobroUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type HistorialCobroUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detalles_antes?: NullableStringFieldUpdateOperationsInput | string | null
    detalles_despues?: StringFieldUpdateOperationsInput | string
    tipo_cambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    usuario_id?: StringFieldUpdateOperationsInput | string
  }

  export type MetodoPagoCobroUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetodoPagoCobroUncheckedUpdateManyWithoutCobroInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    monto?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CobroConceptoCreateManyServicioInput = {
    id?: string
    cantidad: number
    subtotal: number
    created_at?: Date | string
    updated_at?: Date | string
    cobro_id: string
    consultorio_id: string
    precio_unitario: number
  }

  export type CobroConceptoUpdateWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    cobro?: CobroUpdateOneRequiredWithoutConceptosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutConceptosNestedInput
  }

  export type CobroConceptoUncheckedUpdateWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type CobroConceptoUncheckedUpdateManyWithoutServicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cobro_id?: StringFieldUpdateOperationsInput | string
    consultorio_id?: StringFieldUpdateOperationsInput | string
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductAllergenCreateManyAllergenInput = {
    id: string
    productId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductAllergenUpdateWithoutAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutProductAllergenNestedInput
  }

  export type ProductAllergenUncheckedUpdateWithoutAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAllergenUncheckedUpdateManyWithoutAllergenInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailCreateManyInventoryUsageInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    movementId?: string | null
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movement?: MovementUpdateOneWithoutInventoryUsageDetailNestedInput
    Product?: ProductUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
  }

  export type InventoryUsageDetailUncheckedUpdateWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailCreateManyMovementInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    productId: string
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type InventoryUsageDetailUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
    Product?: ProductUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
  }

  export type InventoryUsageDetailUncheckedUpdateWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutMovementInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailCreateManyProductInput = {
    id: string
    createdAt?: Date | string
    doses?: number | null
    frascoLevel?: number | null
    inventoryUsageId: string
    movementId?: string | null
    quantity: number
    totalCost: number
    unitCost: number
    units?: number | null
    updatedAt: Date | string
  }

  export type MovementCreateManyProductInput = {
    id: string
    userId: string
    sedeId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
  }

  export type ProductAllergenCreateManyProductInput = {
    id: string
    allergenId: string
    mlPerDose: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ProductExpirationCreateManyProductInput = {
    id: string
    sedeId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeCreateManyProductInput = {
    id: string
    sedeId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InventoryUsageDetailUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateOneRequiredWithoutInventoryUsageDetailNestedInput
    Movement?: MovementUpdateOneWithoutInventoryUsageDetailNestedInput
  }

  export type InventoryUsageDetailUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageDetailUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    frascoLevel?: NullableIntFieldUpdateOperationsInput | number | null
    inventoryUsageId?: StringFieldUpdateOperationsInput | string
    movementId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutMovementNestedInput
    Sede?: SedeUpdateOneRequiredWithoutMovementNestedInput
    User?: UserUpdateOneRequiredWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAllergenUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Allergen?: AllergenUpdateOneRequiredWithoutProductAllergenNestedInput
  }

  export type ProductAllergenUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergenId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAllergenUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergenId?: StringFieldUpdateOperationsInput | string
    mlPerDose?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutProductExpirationNestedInput
  }

  export type ProductExpirationUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutStockBySedeNestedInput
  }

  export type StockBySedeUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageCreateManySedeInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    userId: string
  }

  export type MovementCreateManySedeInput = {
    id: string
    userId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
  }

  export type ProductExpirationCreateManySedeInput = {
    id: string
    productId: string
    batchNumber: string
    expiryDate: Date | string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StockBySedeCreateManySedeInput = {
    id: string
    productId: string
    quantity: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type UserCreateManySedeInput = {
    id: string
    email: string
    name: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InventoryUsageUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutInventoryUsageNestedInput
    Paciente?: PacienteUpdateOneWithoutInventoryUsageNestedInput
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateManyWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MovementUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutMovementNestedInput
    Product?: ProductUpdateOneRequiredWithoutMovementNestedInput
    User?: UserUpdateOneRequiredWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateManyWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutProductExpirationNestedInput
  }

  export type ProductExpirationUncheckedUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductExpirationUncheckedUpdateManyWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    batchNumber?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutStockBySedeNestedInput
  }

  export type StockBySedeUncheckedUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockBySedeUncheckedUpdateManyWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUpdateManyWithoutUserNestedInput
    Movement?: MovementUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsage?: InventoryUsageUncheckedUpdateManyWithoutUserNestedInput
    Movement?: MovementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSedeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUsageCreateManyUserInput = {
    id: string
    nombrePaciente: string
    pacienteId?: string | null
    tipoTratamiento: $Enums.TipoTratamiento
    observaciones?: string | null
    tuvoReaccion: boolean
    descripcionReaccion?: string | null
    createdAt?: Date | string
    sedeId: string
    updatedAt: Date | string
  }

  export type MovementCreateManyUserInput = {
    id: string
    sedeId: string
    productId: string
    type: $Enums.MovementType
    quantity: number
    unitCost: number
    totalCost: number
    batchNumber?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
  }

  export type InventoryUsageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sede?: SedeUpdateOneRequiredWithoutInventoryUsageNestedInput
    Paciente?: PacienteUpdateOneWithoutInventoryUsageNestedInput
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutInventoryUsageNestedInput
  }

  export type InventoryUsageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombrePaciente?: StringFieldUpdateOperationsInput | string
    pacienteId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoTratamiento?: EnumTipoTratamientoFieldUpdateOperationsInput | $Enums.TipoTratamiento
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    tuvoReaccion?: BoolFieldUpdateOperationsInput | boolean
    descripcionReaccion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sedeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUpdateManyWithoutMovementNestedInput
    Product?: ProductUpdateOneRequiredWithoutMovementNestedInput
    Sede?: SedeUpdateOneRequiredWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InventoryUsageDetail?: InventoryUsageDetailUncheckedUpdateManyWithoutMovementNestedInput
  }

  export type MovementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sedeId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumMovementTypeFieldUpdateOperationsInput | $Enums.MovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}