const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugServiciosInsert() {
  try {
    console.log('üîç Debuggeando inserci√≥n de servicios...\n');

    // Obtener el orden exacto de las columnas
    const columns = await prisma.$queryRaw`
      SELECT column_name, ordinal_position
      FROM information_schema.columns 
      WHERE table_name = 'servicios' 
      ORDER BY ordinal_position
    `;

    console.log('üìã Orden de columnas en la tabla servicios:');
    columns.forEach((col, index) => {
      console.log(`${index + 1}. ${col.column_name} (posici√≥n: ${col.ordinal_position})`);
    });
    console.log('');

    // Intentar una inserci√≥n manual para ver exactamente qu√© falla
    console.log('üß™ Intentando inserci√≥n manual...');
    
    const organizacionId = '03ea7973-906d-4fb6-bcfa-d8019628998e';
    const nombre = 'Test Servicio';
    const precioBase = 100.00;

    try {
      const result = await prisma.$queryRaw`
        INSERT INTO servicios (id, nombre, descripcion, precio_base, created_at, updated_at, organizacion_id)
        VALUES (gen_random_uuid(), ${nombre}, NULL, ${precioBase}, NOW(), NOW(), ${organizacionId}::uuid)
        RETURNING *
      `;
      console.log('‚úÖ Inserci√≥n exitosa:', result);
    } catch (error) {
      console.log('‚ùå Error en inserci√≥n:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugServiciosInsert(); 